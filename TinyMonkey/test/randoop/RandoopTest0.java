package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    int[][] var2 = new int[][] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var3 = new tinymonkeys.vue.VueCarte(1, 1, var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    javax.swing.JFrame.setDefaultLookAndFeelDecorated(true);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var13 = var5.areFocusTraversalKeysSet(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    java.awt.Frame[] var0 = java.awt.Frame.getFrames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var20 = var13.isAncestorOf((java.awt.Component)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setComponentZOrder((java.awt.Component)var19, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    java.util.Locale var0 = javax.swing.JComponent.getDefaultLocale();
    javax.swing.JComponent.setDefaultLocale(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    java.awt.Color var8 = var5.getForeground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.transferFocusDownCycle();
    java.awt.event.MouseListener[] var15 = var5.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var10 = var5.getFocusTraversalKeys(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    java.lang.String var17 = var5.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var5.areFocusTraversalKeysSet(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setComponentZOrder((java.awt.Component)var13, 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    boolean var0 = javax.swing.JFrame.isDefaultLookAndFeelDecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == true);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.Component var59 = var5.getComponentAt(1, 1);
    java.lang.String var60 = var5.getUIClassID();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var62 = var5.getInputMap((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PanelUI"+ "'", var60.equals("PanelUI"));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    javax.swing.JFrame.setDefaultLookAndFeelDecorated(false);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var15 = var5.inside(11, (-1));
    var5.setAlignmentX(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var5.areFocusTraversalKeysSet(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.firePropertyChange("", '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var13 = var5.getInputMap(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.removeAll();
    var5.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.contains(10, 111);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    javax.swing.InputMap var26 = var23.getInputMap(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setInputMap((-1), var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    boolean var13 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var13 = var12.getUIClassID();
    java.awt.Dimension var14 = var12.getMaximumSize();
    var5.setPreferredSize(var14);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 1.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isDisplayable();
    boolean var12 = var5.contains((-1), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.ActionMap var57 = var20.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    utils.Constantes var0 = new utils.Constantes();

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    javax.swing.TransferHandler var11 = var5.getTransferHandler();
    var5.setAlignmentX(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var14 = var5.getMouseMotionListeners();
    javax.swing.ActionMap var15 = var5.getActionMap();
    int var18 = var5.getBaseline(10, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    var5.firePropertyChange("", 10L, 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.isFontSet();
    var17.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.isShowing();
    var5.setDimensions(0, (-1), 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.Component var53 = var43.locate(0, (-1));
    var43.setAlignmentX(0.5f);
    java.awt.Font var56 = var43.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var62.enable(true);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var71 = var70.getUIClassID();
    javax.swing.TransferHandler var72 = var70.getTransferHandler();
    java.awt.Color var73 = var70.getForeground();
    var62.setBackground(var73);
    var43.setForeground(var73);
    var5.setForeground(var73);
    var5.setDebugGraphicsOptions(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PanelUI"+ "'", var71.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    java.awt.Component var20 = var5.add((java.awt.Component)var14);
    boolean var23 = var14.inside(11, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var26 = var14.getBaseline((-1), 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    java.awt.Window[] var0 = java.awt.Window.getWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    java.awt.Dimension var13 = var5.minimumSize();
    java.beans.PropertyChangeListener[] var14 = var5.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.invalidate();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    java.awt.image.ColorModel var62 = var54.getColorModel();
    var54.setLocation(100, 1);
    boolean var66 = var54.isDoubleBuffered();
    java.util.Locale var67 = var54.getLocale();
    java.awt.Dimension var68 = var54.getMaximumSize();
    java.awt.Insets var69 = var54.getInsets();
    var54.removeAll();
    boolean var73 = var54.contains(111, 11);
    tinymonkeys.vue.VueElement var79 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var80 = var79.getPeer();
    var79.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var79.repaint();
    java.lang.Object var86 = var79.getTreeLock();
    java.awt.image.ColorModel var87 = var79.getColorModel();
    var79.setLocation(100, 1);
    boolean var91 = var79.isDoubleBuffered();
    java.util.Locale var92 = var79.getLocale();
    java.awt.Dimension var93 = var79.getMaximumSize();
    var54.setMaximumSize(var93);
    java.awt.Dimension var95 = var25.getSize(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.image.VolatileImage var59 = var20.createVolatileImage((-1), 10);
    javax.swing.KeyStroke[] var60 = var20.getRegisteredKeyStrokes();
    java.awt.Dimension var61 = var20.getMinimumSize();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var68 = var67.getUIClassID();
    boolean var69 = var67.isFontSet();
    float var70 = var67.getAlignmentY();
    java.awt.Component var71 = var20.add((java.awt.Component)var67);
    var20.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "PanelUI"+ "'", var68.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    var5.setOpaque(false);
    java.awt.Component var20 = var5.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    boolean var8 = var2.coordonneesEgales(10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    java.awt.Color var66 = var5.getForeground();
    javax.swing.plaf.PanelUI var67 = var5.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var19 = var5.getFocusTraversalKeys(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    float var48 = var12.getAlignmentX();
    javax.swing.InputMap var50 = var12.getInputMap(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    int[][] var2 = new int[][] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var3 = new tinymonkeys.vue.VueCarte((-1), 11, var2);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    boolean var8 = var2.coordonneesEgales(1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    var5.setFocusCycleRoot(true);
    var5.resize(0, 10);
    var5.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    java.awt.Window[] var0 = java.awt.Window.getOwnerlessWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.isFontSet();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    java.awt.Component var43 = var33.locate(0, (-1));
    var33.setAlignmentX(0.5f);
    java.awt.Font var46 = var33.getFont();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var54 = var53.getUIClassID();
    float var55 = var53.getAlignmentX();
    boolean var56 = var53.isOptimizedDrawingEnabled();
    var33.putClientProperty((java.lang.Object)' ', (java.lang.Object)var56);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.Component var73 = var63.locate(0, (-1));
    var63.setAlignmentX(0.5f);
    java.awt.Font var76 = var63.getFont();
    java.awt.FontMetrics var77 = var33.getFontMetrics(var76);
    java.awt.FontMetrics var78 = var17.getFontMetrics(var76);
    java.awt.Component[] var79 = var17.getComponents();
    var17.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isDoubleBuffered();
    java.awt.Rectangle var28 = var18.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.Component var46 = var36.locate(0, (-1));
    var36.resize((-1), 0);
    var36.transferFocusDownCycle();
    var36.setDebugGraphicsOptions(1);
    java.awt.Dimension var53 = var36.getMaximumSize();
    int var54 = var36.countComponents();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var74 = var73.getPeer();
    var73.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var73.repaint();
    var73.updateUI();
    int var81 = var60.getComponentZOrder((java.awt.Component)var73);
    java.awt.Insets var82 = var60.getInsets();
    java.awt.Insets var83 = var36.getInsets(var82);
    java.awt.Insets var84 = var5.getInsets(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    var5.transferFocusDownCycle();
    boolean var16 = var5.inside(0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    java.awt.Dimension var13 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    java.awt.Color var66 = var5.getForeground();
    tinymonkeys.vue.VueElement var72 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var73 = var72.getUIClassID();
    java.awt.Dimension var74 = var72.getMaximumSize();
    var5.setPreferredSize(var74);
    var5.move((-1), 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "PanelUI"+ "'", var73.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    java.awt.Container var9 = var5.getParent();
    var5.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var12 = var5.getDropTarget();
    boolean var13 = var5.isFocusTraversalPolicySet();
    java.awt.Component[] var14 = var5.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.lang.String var7 = var5.toString();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    java.awt.image.ColorModel var11 = var5.getColorModel();
    var5.removeNotify();
    var5.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    javax.swing.ActionMap var9 = var5.getActionMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var11 = var5.getInputMap(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage(100, 100, 1, 10, 100);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    javax.swing.KeyStroke[] var20 = var5.getRegisteredKeyStrokes();
    boolean var21 = var5.isMaximumSizeSet();
    var5.setDebugGraphicsOptions(111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    var1.demandeDeplacement(10, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.transferFocusDownCycle();
    var5.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.getIgnoreRepaint();
    boolean var10 = var5.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.requestFocusInWindow();
    java.awt.event.KeyListener[] var20 = var5.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(11, 10);
    boolean var8 = var2.coordonneesEgales((-1), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.repaint(100, 100, 0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    javax.swing.ActionMap var9 = var5.getActionMap();
    var5.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.Component var53 = var43.locate(0, (-1));
    var43.setAlignmentX(0.5f);
    java.awt.Font var56 = var43.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var62.enable(true);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var71 = var70.getUIClassID();
    javax.swing.TransferHandler var72 = var70.getTransferHandler();
    java.awt.Color var73 = var70.getForeground();
    var62.setBackground(var73);
    var43.setForeground(var73);
    var5.setForeground(var73);
    tinymonkeys.vue.VueElement var82 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var83 = var82.getPeer();
    var82.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var82.repaint();
    java.lang.Object var89 = var82.getTreeLock();
    java.awt.image.ColorModel var90 = var82.getColorModel();
    boolean var91 = var82.getVerifyInputWhenFocusTarget();
    int var92 = var82.getWidth();
    var82.removeNotify();
    boolean var94 = var5.isFocusCycleRoot((java.awt.Container)var82);
    var82.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)1);
    float var99 = var82.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PanelUI"+ "'", var71.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 0.5f);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    int var78 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 111);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    java.lang.Object var56 = var49.getTreeLock();
    java.awt.image.ColorModel var57 = var49.getColorModel();
    var49.setLocation(100, 1);
    boolean var61 = var49.isDoubleBuffered();
    java.util.Locale var62 = var49.getLocale();
    java.awt.Dimension var63 = var49.getMaximumSize();
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var70 = var69.getPeer();
    var69.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var69.repaint();
    java.lang.Object var76 = var69.getTreeLock();
    java.awt.image.ColorModel var77 = var69.getColorModel();
    boolean var78 = var69.getVerifyInputWhenFocusTarget();
    int var79 = var69.getWidth();
    java.util.Locale var80 = var69.getLocale();
    var49.setLocale(var80);
    javax.swing.plaf.PanelUI var82 = var49.getUI();
    var37.setUI(var82);
    java.awt.Font var84 = var37.getFont();
    var19.setFont(var84);
    var19.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var5.areFocusTraversalKeysSet(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    java.awt.Image var16 = var5.createImage(0, 1);
    var5.enable(true);
    java.awt.Color var19 = var5.getBackground();
    java.awt.Component var22 = var5.getComponentAt(1, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.repaint();
    var5.firePropertyChange("hi!", '#', 'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var20 = var5.areFocusTraversalKeysSet(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    java.awt.Color var9 = var5.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isManagingFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    var22.setLocation(100, 1);
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var40 = var39.getUIClassID();
    javax.swing.TransferHandler var41 = var39.getTransferHandler();
    java.awt.Color var42 = var39.getForeground();
    var22.setForeground(var42);
    var5.setForeground(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "PanelUI"+ "'", var40.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    tinymonkeys.controleur.Controller var0 = new tinymonkeys.controleur.Controller();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.demandeDeplacementPirate(11, 111);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isOpaque();
    java.lang.String var9 = var5.getName();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.image.ColorModel var35 = var27.getColorModel();
    var27.setLocation(100, 1);
    boolean var39 = var27.isDoubleBuffered();
    java.util.Locale var40 = var27.getLocale();
    java.awt.Dimension var41 = var27.getMaximumSize();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    java.awt.image.ColorModel var55 = var47.getColorModel();
    boolean var56 = var47.getVerifyInputWhenFocusTarget();
    int var57 = var47.getWidth();
    java.util.Locale var58 = var47.getLocale();
    var27.setLocale(var58);
    javax.swing.plaf.PanelUI var60 = var27.getUI();
    var15.setUI(var60);
    var5.setUI(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    boolean var57 = var5.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    var5.requestFocus();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.Component var25 = var15.locate(0, (-1));
    var15.requestFocus();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.repaint();
    java.lang.Object var39 = var32.getTreeLock();
    java.awt.image.ColorModel var40 = var32.getColorModel();
    boolean var41 = var32.getVerifyInputWhenFocusTarget();
    var32.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var46 = var32.getBounds();
    var15.paintImmediately(var46);
    tinymonkeys.vue.VueSingeErratique var53 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var60 = var59.getPeer();
    var59.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var59.repaint();
    java.lang.Object var66 = var59.getTreeLock();
    java.awt.Component var69 = var59.locate(0, (-1));
    var59.requestFocus();
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.image.ColorModel var84 = var76.getColorModel();
    boolean var85 = var76.getVerifyInputWhenFocusTarget();
    var76.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var90 = var76.getBounds();
    var59.paintImmediately(var90);
    var53.setBounds(var90);
    var15.setBounds(var90);
    var5.scrollRectToVisible(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.util.Locale var20 = javax.swing.JComponent.getDefaultLocale();
    var5.setLocale(var20);
    java.beans.VetoableChangeListener[] var22 = var5.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(11, (-1), (-1), 100, 100);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var18 = var11.isAncestorOf((java.awt.Component)var17);
    boolean var19 = var11.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var20 = var11.getMouseMotionListeners();
    javax.swing.ActionMap var21 = var11.getActionMap();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var48 = var47.getUIClassID();
    float var49 = var47.getAlignmentX();
    boolean var50 = var47.isOptimizedDrawingEnabled();
    var27.putClientProperty((java.lang.Object)' ', (java.lang.Object)var50);
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.repaint();
    java.lang.Object var64 = var57.getTreeLock();
    java.awt.Component var67 = var57.locate(0, (-1));
    var57.setAlignmentX(0.5f);
    java.awt.Font var70 = var57.getFont();
    java.awt.FontMetrics var71 = var27.getFontMetrics(var70);
    java.awt.FontMetrics var72 = var11.getFontMetrics(var70);
    java.awt.FontMetrics var73 = var5.getFontMetrics(var70);
    java.lang.String var74 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PanelUI"+ "'", var48.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    boolean var32 = var5.isFocusTraversalPolicyProvider();
    java.awt.Dimension var33 = var5.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    var5.setFocusable(true);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var42 = var35.isAncestorOf((java.awt.Component)var41);
    boolean var43 = var35.isFocusTraversalPolicyProvider();
    boolean var46 = var35.contains(10, 111);
    java.awt.Dimension var47 = var35.minimumSize();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var54 = var53.getPeer();
    var53.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var53.repaint();
    java.lang.Object var60 = var53.getTreeLock();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var67 = var66.getPeer();
    var66.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var66.repaint();
    var66.updateUI();
    int var74 = var53.getComponentZOrder((java.awt.Component)var66);
    java.awt.Insets var75 = var53.getInsets();
    java.util.Locale var76 = var53.getLocale();
    var53.hide();
    java.awt.LayoutManager var78 = var53.getLayout();
    var35.setLayout(var78);
    var5.setLayout(var78);
    java.awt.event.MouseWheelListener[] var81 = var5.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.grabFocus();
    java.awt.Insets var79 = var5.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    var5.firePropertyChange("PanelUI", '4', '#');
    var5.firePropertyChange("hi!", 1.0f, 100.0f);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    boolean var7 = var5.requestFocus(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var9 = var5.areFocusTraversalKeysSet(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    int var10 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 10);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.run();
      fail("Expected exception of type randoop.util.ReflectionExecutor.TimeoutExceeded");
    } catch (randoop.util.ReflectionExecutor.TimeoutExceeded e) {
      // Expected exception.
    }

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    var5.removeAll();
    boolean var24 = var5.contains(111, 11);
    var5.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    java.lang.Object var18 = var5.getTreeLock();
    java.awt.Color var19 = var5.getForeground();
    int var20 = var5.getY();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.enable(true);
    java.awt.Toolkit var29 = var26.getToolkit();
    var26.disable();
    java.awt.Dimension var31 = var26.minimumSize();
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var35 = var26.contains(11, 11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var37 = var5.add((java.awt.Component)var26, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.image.ColorModel var33 = var25.getColorModel();
    boolean var34 = var25.getVerifyInputWhenFocusTarget();
    int var35 = var25.getWidth();
    java.util.Locale var36 = var25.getLocale();
    var5.setLocale(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var50 = var43.isAncestorOf((java.awt.Component)var49);
    java.awt.Point var51 = var49.location();
    java.awt.Point var52 = var5.getLocation(var51);
    var5.setRequestFocusEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    var5.removeAll();
    boolean var24 = var5.contains(111, 11);
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var43 = var42.getPeer();
    var42.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var42.repaint();
    java.lang.Object var49 = var42.getTreeLock();
    java.awt.event.HierarchyListener[] var50 = var42.getHierarchyListeners();
    boolean var51 = var30.isAncestorOf((java.awt.Component)var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var53 = var5.add((java.awt.Component)var30, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    java.awt.event.KeyListener[] var29 = var5.getKeyListeners();
    float var30 = var5.getAlignmentY();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.awt.GraphicsConfiguration var43 = var36.getGraphicsConfiguration();
    java.awt.Insets var44 = var36.insets();
    var36.show(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var48 = var5.add((java.awt.Component)var36, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.GraphicsConfiguration var65 = var23.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var72 = var71.getPeer();
    var71.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var71.repaint();
    java.lang.Object var78 = var71.getTreeLock();
    tinymonkeys.vue.VueElement var84 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var85 = var84.getPeer();
    var84.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var84.repaint();
    java.lang.Object var91 = var84.getTreeLock();
    java.awt.image.ColorModel var92 = var84.getColorModel();
    java.awt.Dimension var93 = var84.minimumSize();
    java.awt.event.HierarchyBoundsListener[] var94 = var84.getHierarchyBoundsListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.add((java.awt.Component)var71, (java.lang.Object)var84, 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    boolean var20 = var5.isManagingFocus();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.awt.GraphicsConfiguration var34 = var27.getGraphicsConfiguration();
    java.awt.Insets var35 = var27.insets();
    var27.repaint(1L);
    java.util.Set var39 = var27.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys(11, var39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    java.awt.Toolkit var62 = var59.getToolkit();
    java.awt.Component var64 = var5.add((java.awt.Component)var59, 0);
    boolean var67 = var59.contains(0, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    javax.accessibility.AccessibleContext var40 = var5.getAccessibleContext();
    int var41 = var5.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    var5.setOpaque(false);
    boolean var10 = var5.getAutoscrolls();
    var5.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    java.awt.Rectangle var26 = var5.getBounds(var25);
    boolean var27 = var5.isFocusCycleRoot();
    boolean var28 = var5.hasFocus();
    boolean var29 = var5.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var2.setAvatar("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var35 = var34.getUIClassID();
    javax.swing.TransferHandler var36 = var34.getTransferHandler();
    java.awt.Color var37 = var34.getForeground();
    var17.setForeground(var37);
    boolean var39 = var17.getIgnoreRepaint();
    java.awt.Component var40 = var5.add("PanelUI", (java.awt.Component)var17);
    boolean var41 = var40.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    var5.validate();
    var5.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    javax.swing.JRootPane var23 = var15.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.image.VolatileImage var59 = var20.createVolatileImage((-1), 10);
    javax.swing.KeyStroke[] var60 = var20.getRegisteredKeyStrokes();
    boolean var61 = var20.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.repaint((-1L), 100, 0, 10, 100);
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    java.awt.Component var40 = var30.locate(0, (-1));
    var30.requestFocus();
    boolean var42 = var30.isFocusTraversable();
    java.lang.Object var43 = var5.getClientProperty((java.lang.Object)var42);
    boolean var44 = var5.isFontSet();
    int var45 = var5.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 10);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    boolean var40 = var5.isFocusable();
    java.awt.GraphicsConfiguration var41 = var5.getGraphicsConfiguration();
    java.awt.Insets var42 = var5.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    java.awt.Point var30 = var5.getMousePosition(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var32 = var5.getComponent((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    var5.setFocusTraversalPolicyProvider(true);
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var12 = var11.getPeer();
    var11.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var11.repaint();
    java.lang.Object var18 = var11.getTreeLock();
    java.awt.Component var21 = var11.locate(0, (-1));
    var11.requestFocus();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    java.awt.image.ColorModel var36 = var28.getColorModel();
    boolean var37 = var28.getVerifyInputWhenFocusTarget();
    var28.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var42 = var28.getBounds();
    var11.paintImmediately(var42);
    var5.setBounds(var42);
    boolean var45 = var5.isShowing();
    int var46 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), 10);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    var5.setPosition((-1), 1);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    javax.swing.border.Border var52 = var25.getBorder();
    java.awt.Component.BaselineResizeBehavior var53 = var25.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    java.util.Locale var15 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.image.ColorModel var10 = var5.getColorModel();
    var5.repaint((-1L), (-1), 100, 0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    java.awt.Image var16 = var5.createImage(0, 1);
    var5.enable(true);
    var5.doLayout();
    javax.swing.ActionMap var20 = var5.getActionMap();
    int var21 = var5.getWidth();
    var5.setOpaque(true);
    boolean var24 = var5.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var36.enable(true);
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var45 = var44.getUIClassID();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.transferFocusUpCycle();
    boolean var58 = var51.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    var77.updateUI();
    int var85 = var64.getComponentZOrder((java.awt.Component)var77);
    var44.add((java.awt.Component)var51, (java.lang.Object)var64);
    boolean var87 = var36.isFocusCycleRoot((java.awt.Container)var51);
    boolean var88 = var5.isAncestorOf((java.awt.Component)var51);
    var5.nextFocus();
    var5.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "PanelUI"+ "'", var45.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    boolean var11 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var17.revalidate();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var25 = var24.getUIClassID();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var17.setPreferredSize(var26);
    java.awt.Dimension var28 = var5.getSize(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "PanelUI"+ "'", var25.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    int var15 = var5.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 11);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var51 = var50.getPeer();
    var50.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var50.repaint();
    java.lang.Object var57 = var50.getTreeLock();
    java.awt.event.HierarchyListener[] var58 = var50.getHierarchyListeners();
    boolean var59 = var38.isAncestorOf((java.awt.Component)var50);
    var50.resetKeyboardActions();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var67 = var66.getPeer();
    var66.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var66.repaint();
    java.lang.Object var73 = var66.getTreeLock();
    java.awt.image.ColorModel var74 = var66.getColorModel();
    var66.setLocation(100, 1);
    tinymonkeys.vue.VueElement var83 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var84 = var83.getUIClassID();
    javax.swing.TransferHandler var85 = var83.getTransferHandler();
    java.awt.Color var86 = var83.getForeground();
    var66.setForeground(var86);
    var5.add((java.awt.Component)var50, (java.lang.Object)var86);
    java.awt.Dimension var89 = var50.getSize();
    java.awt.Point var90 = var50.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "PanelUI"+ "'", var84.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.setInheritsPopupMenu(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.util.Locale var48 = var25.getLocale();
    javax.swing.JComponent.setDefaultLocale(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    java.awt.image.ColorModel var19 = var5.getColorModel();
    java.awt.FocusTraversalPolicy var20 = var5.getFocusTraversalPolicy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var22 = var5.getFocusTraversalKeys(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    java.awt.Image var16 = var5.createImage(0, 1);
    var5.enable(true);
    var5.doLayout();
    javax.swing.ActionMap var20 = var5.getActionMap();
    int var21 = var5.getWidth();
    var5.setOpaque(true);
    boolean var24 = var5.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var43 = var5.getMaximumSize();
    boolean var44 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isVisible();
    int var8 = var5.getWidth();
    var5.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var14 = var5.getMouseMotionListeners();
    javax.swing.ActionMap var15 = var5.getActionMap();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var22 = var21.getPeer();
    var21.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var21.repaint();
    java.lang.Object var28 = var21.getTreeLock();
    java.awt.Component var31 = var21.locate(0, (-1));
    var21.setAlignmentX(0.5f);
    java.awt.Font var34 = var21.getFont();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var42 = var41.getUIClassID();
    float var43 = var41.getAlignmentX();
    boolean var44 = var41.isOptimizedDrawingEnabled();
    var21.putClientProperty((java.lang.Object)' ', (java.lang.Object)var44);
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    java.lang.Object var58 = var51.getTreeLock();
    java.awt.Component var61 = var51.locate(0, (-1));
    var51.setAlignmentX(0.5f);
    java.awt.Font var64 = var51.getFont();
    java.awt.FontMetrics var65 = var21.getFontMetrics(var64);
    java.awt.FontMetrics var66 = var5.getFontMetrics(var64);
    int var67 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "PanelUI"+ "'", var42.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var13 = var5.getBaselineResizeBehavior();
    var5.show();
    var5.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    var5.setFocusTraversalPolicyProvider(true);
    var5.show();
    java.awt.peer.ComponentPeer var20 = var5.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    tinymonkeys.modele.Ile var4 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var5 = new tinymonkeys.modele.BandeDeSingesErratiques(var4);
    tinymonkeys.modele.SingeErratique var6 = new tinymonkeys.modele.SingeErratique((-1), 11, var4);
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    int[][] var9 = new int[][] { };
    var7.creationCarte(var9);
    var4.creationCarte(var9);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    int[][] var14 = new int[][] { };
    var12.creationCarte(var14);
    var4.creationCarte(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var17 = new tinymonkeys.vue.VueCarte(11, 1, var14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var55.enable(true);
    int var58 = var55.getY();
    boolean var59 = var55.isValid();
    java.awt.Toolkit var60 = var55.getToolkit();
    boolean var61 = var55.getIgnoreRepaint();
    boolean var62 = var55.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var68.enable(true);
    boolean var71 = var68.isShowing();
    int var72 = var68.getX();
    var68.grabFocus();
    tinymonkeys.vue.VueElement var79 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var80 = var79.getPeer();
    javax.swing.InputMap var82 = var79.getInputMap(0);
    tinymonkeys.vue.VueElement var89 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var90 = var89.getPeer();
    javax.swing.InputMap var92 = var89.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var93 = var89.getBaselineResizeBehavior();
    boolean var94 = var89.isPreferredSizeSet();
    java.awt.Component var95 = var79.add("", (java.awt.Component)var89);
    java.awt.Cursor var96 = var89.getCursor();
    var68.setCursor(var96);
    var55.setCursor(var96);
    var5.setCursor(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    java.awt.event.InputMethodListener[] var27 = var5.getInputMethodListeners();
    boolean var28 = var5.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    boolean var20 = var5.isManagingFocus();
    boolean var21 = var5.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    int var20 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    var5.setSize(111, 11);
    boolean var32 = var5.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate((-1), 111, 1, 1, (-1), "PanelUI");
    var6.setRequestFocusEnabled(false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.util.Locale var20 = javax.swing.JComponent.getDefaultLocale();
    var5.setLocale(var20);
    javax.swing.JComponent.setDefaultLocale(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var12 = var11.getPeer();
    var11.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var11.repaint();
    java.lang.Object var18 = var11.getTreeLock();
    java.awt.Component var21 = var11.locate(0, (-1));
    var11.requestFocus();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    java.awt.image.ColorModel var36 = var28.getColorModel();
    boolean var37 = var28.getVerifyInputWhenFocusTarget();
    var28.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var42 = var28.getBounds();
    var11.paintImmediately(var42);
    var5.setBounds(var42);
    boolean var45 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    javax.swing.InputMap var31 = var28.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var32 = var28.getBaselineResizeBehavior();
    boolean var33 = var28.isPreferredSizeSet();
    java.awt.Component var34 = var18.add("", (java.awt.Component)var28);
    java.awt.Cursor var35 = var28.getCursor();
    boolean var36 = var28.getVerifyInputWhenFocusTarget();
    java.lang.Object var37 = var5.getClientProperty((java.lang.Object)var36);
    int var38 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.event.KeyListener[] var15 = var11.getKeyListeners();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    boolean var48 = var37.requestDefaultFocus();
    java.awt.Toolkit var49 = var37.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.image.ColorModel var26 = var18.getColorModel();
    var18.setLocation(100, 1);
    boolean var30 = var18.isDoubleBuffered();
    java.util.Locale var31 = var18.getLocale();
    java.awt.Dimension var32 = var18.getMaximumSize();
    java.awt.Insets var33 = var18.getInsets();
    var18.removeAll();
    boolean var37 = var18.contains(111, 11);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.image.ColorModel var51 = var43.getColorModel();
    var43.setLocation(100, 1);
    boolean var55 = var43.isDoubleBuffered();
    java.util.Locale var56 = var43.getLocale();
    java.awt.Dimension var57 = var43.getMaximumSize();
    var18.setMaximumSize(var57);
    var5.setSize(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    int var11 = var5.getBaseline(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    java.awt.Component var20 = var5.add((java.awt.Component)var14);
    boolean var21 = var20.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement((-1), 0, 111, 111, 1);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isMaximumSizeSet();
    boolean var18 = var5.isOpaque();
    var5.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var22 = new tinymonkeys.modele.Pirate(var2, "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.creationTresor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Pirate var10 = var2.getPirate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ArrayList var13 = var2.deplacementsPossibles(100, 111);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    java.awt.Component.BaselineResizeBehavior var28 = var5.getBaselineResizeBehavior();
    boolean var29 = var5.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    javax.swing.event.EventListenerList var3 = var2.getPirateEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var18 = var5.preferredSize();
    java.beans.PropertyChangeListener[] var20 = var5.getPropertyChangeListeners("");
    java.awt.event.MouseMotionListener[] var21 = var5.getMouseMotionListeners();
    var5.paintImmediately(100, 0, 0, 11);
    boolean var27 = var5.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var18.revalidate();
    var18.setSize(0, 11);
    java.awt.Dimension var23 = var18.getMinimumSize();
    java.awt.Dimension var24 = var12.getSize(var23);
    var5.resize(var23);
    var5.disable();
    var5.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.event.HierarchyListener[] var44 = var36.getHierarchyListeners();
    boolean var45 = var24.isAncestorOf((java.awt.Component)var36);
    boolean var46 = var36.isFontSet();
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.lang.Object var59 = var52.getTreeLock();
    java.awt.Component var62 = var52.locate(0, (-1));
    var52.setAlignmentX(0.5f);
    java.awt.Font var65 = var52.getFont();
    tinymonkeys.vue.VueElement var72 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var73 = var72.getUIClassID();
    float var74 = var72.getAlignmentX();
    boolean var75 = var72.isOptimizedDrawingEnabled();
    var52.putClientProperty((java.lang.Object)' ', (java.lang.Object)var75);
    tinymonkeys.vue.VueElement var82 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var83 = var82.getPeer();
    var82.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var82.repaint();
    java.lang.Object var89 = var82.getTreeLock();
    java.awt.Component var92 = var82.locate(0, (-1));
    var82.setAlignmentX(0.5f);
    java.awt.Font var95 = var82.getFont();
    java.awt.FontMetrics var96 = var52.getFontMetrics(var95);
    java.awt.FontMetrics var97 = var36.getFontMetrics(var95);
    java.awt.FontMetrics var98 = var5.getFontMetrics(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "PanelUI"+ "'", var73.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    var5.setSize(11, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    var17.resetKeyboardActions();
    var17.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    java.lang.String var7 = var5.toString();
    boolean var8 = var5.isFocusTraversalPolicyProvider();
    var5.repaint((-1), 1, 100, 100);
    var5.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    javax.swing.ActionMap var9 = var5.getActionMap();
    boolean var10 = var5.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var56 = var2.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    int var9 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.Component var70 = var60.locate(0, (-1));
    var60.requestFocus();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    java.lang.Object var84 = var77.getTreeLock();
    java.awt.image.ColorModel var85 = var77.getColorModel();
    boolean var86 = var77.getVerifyInputWhenFocusTarget();
    var77.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var91 = var77.getBounds();
    var60.paintImmediately(var91);
    boolean var93 = var60.requestFocusInWindow();
    var60.firePropertyChange("hi!", 'a', 'a');
    java.awt.LayoutManager var98 = var60.getLayout();
    var2.setLayout(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    var5.setVisible(true);
    boolean var68 = var5.isPaintingTile();
    java.awt.image.ColorModel var69 = var5.getColorModel();
    java.awt.Container var70 = var5.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    var5.setEnabled(true);
    java.awt.event.MouseWheelListener[] var11 = var5.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var20 = var5.getFocusTraversalKeys(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("hi!", 1, 11);
    var5.move(0, 10);
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.Component var51 = var41.locate(0, (-1));
    var41.resize((-1), 0);
    var41.transferFocusDownCycle();
    javax.swing.KeyStroke[] var56 = var41.getRegisteredKeyStrokes();
    boolean var57 = var41.isMaximumSizeSet();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var70 = var63.isAncestorOf((java.awt.Component)var69);
    boolean var71 = var63.isFocusTraversalPolicyProvider();
    var63.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var76 = var63.preferredSize();
    var5.add((java.awt.Component)var41, (java.lang.Object)var76);
    java.awt.Dimension var78 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    javax.swing.TransferHandler var11 = var5.getTransferHandler();
    java.awt.Point var12 = var5.getMousePosition();
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 10L, (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.event.FocusListener[] var6 = var5.getFocusListeners();
    boolean var7 = var5.getInheritsPopupMenu();
    var5.repaint(1L, 0, 0, 10, (-1));
    var5.firePropertyChange("hi!", 10.0d, 10.0d);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.event.HierarchyListener[] var44 = var36.getHierarchyListeners();
    boolean var45 = var24.isAncestorOf((java.awt.Component)var36);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.awt.GraphicsConfiguration var59 = var52.getGraphicsConfiguration();
    java.awt.Insets var60 = var52.insets();
    var52.repaint(1L);
    java.util.Set var64 = var52.getFocusTraversalKeys(0);
    var24.setFocusTraversalKeys(0, var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys(100, var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    javax.swing.JComponent.setDefaultLocale(var76);
    javax.swing.JComponent.setDefaultLocale(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    var5.setIgnoreRepaint(true);
    var5.enable();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.event.HierarchyListener[] var44 = var36.getHierarchyListeners();
    boolean var45 = var24.isAncestorOf((java.awt.Component)var36);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.awt.GraphicsConfiguration var59 = var52.getGraphicsConfiguration();
    java.awt.Insets var60 = var52.insets();
    var52.repaint(1L);
    java.util.Set var64 = var52.getFocusTraversalKeys(0);
    var24.setFocusTraversalKeys(0, var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys(100, var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    var5.layout();
    java.awt.ComponentOrientation var11 = var5.getComponentOrientation();
    boolean var12 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    java.lang.String var7 = var5.toString();
    java.awt.image.ColorModel var8 = var5.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    javax.swing.JRootPane var31 = var5.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    boolean var31 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    int var28 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    var6.mortPirate();
    java.awt.Insets var8 = var6.insets();
    var6.mortPirate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.grabFocus();
    java.awt.Dimension var79 = var5.getMinimumSize();
    var5.firePropertyChange("PanelUI", '#', ' ');
    var5.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    tinymonkeys.controleur.Controller var0 = new tinymonkeys.controleur.Controller();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.demandeDeplacementPirate(111, 1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    boolean var7 = var5.requestFocus(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    var13.setLocation(100, 1);
    boolean var25 = var13.isDoubleBuffered();
    java.util.Locale var26 = var13.getLocale();
    java.awt.Dimension var27 = var13.getMaximumSize();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    java.awt.image.ColorModel var41 = var33.getColorModel();
    boolean var42 = var33.getVerifyInputWhenFocusTarget();
    int var43 = var33.getWidth();
    java.util.Locale var44 = var33.getLocale();
    var13.setLocale(var44);
    javax.swing.plaf.PanelUI var46 = var13.getUI();
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var58 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var59 = var52.isAncestorOf((java.awt.Component)var58);
    java.awt.Point var60 = var58.location();
    java.awt.Point var61 = var13.getLocation(var60);
    java.awt.Component var62 = var5.getComponentAt(var60);
    var5.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    int var28 = var5.countComponents();
    boolean var29 = var5.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var21 = new tinymonkeys.modele.Pirate(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.suppressionTresor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var22 = new tinymonkeys.modele.Pirate(var2, "hi!");
    var2.ajoutSingesErratiques((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    var5.setOpaque(false);
    boolean var20 = var5.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    float var10 = var5.getAlignmentY();
    int var11 = var5.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 11);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    var5.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    javax.swing.TransferHandler var11 = var5.getTransferHandler();
    java.awt.Point var12 = var5.getMousePosition();
    boolean var13 = var5.isDoubleBuffered();
    var5.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.isFontSet();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    java.awt.Component var43 = var33.locate(0, (-1));
    var33.setAlignmentX(0.5f);
    java.awt.Font var46 = var33.getFont();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var54 = var53.getUIClassID();
    float var55 = var53.getAlignmentX();
    boolean var56 = var53.isOptimizedDrawingEnabled();
    var33.putClientProperty((java.lang.Object)' ', (java.lang.Object)var56);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.Component var73 = var63.locate(0, (-1));
    var63.setAlignmentX(0.5f);
    java.awt.Font var76 = var63.getFont();
    java.awt.FontMetrics var77 = var33.getFontMetrics(var76);
    java.awt.FontMetrics var78 = var17.getFontMetrics(var76);
    java.awt.Component[] var79 = var17.getComponents();
    java.awt.GraphicsConfiguration var80 = var17.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.firePropertyChange("", 100L, (-1L));
    boolean var82 = var5.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    var5.setSize(111, 11);
    var5.firePropertyChange("", 100.0f, 0.5f);
    java.awt.event.MouseListener[] var36 = var5.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    var5.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    var5.setEnabled(true);
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 100.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setResizable(false);
    tinymonkeys.modele.Ile var62 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var63 = new tinymonkeys.modele.BandeDeSingesErratiques(var62);
    int[][] var64 = new int[][] { };
    var62.creationCarte(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.creationCarte(var64);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.repaint();
    java.lang.Object var68 = var61.getTreeLock();
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var75 = var74.getPeer();
    var74.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var74.repaint();
    var74.updateUI();
    int var82 = var61.getComponentZOrder((java.awt.Component)var74);
    java.awt.Insets var83 = var61.getInsets();
    boolean var84 = var61.getFocusTraversalKeysEnabled();
    var61.setSize(111, 11);
    var61.firePropertyChange("", 100.0f, 0.5f);
    java.awt.GraphicsConfiguration var92 = var61.getGraphicsConfiguration();
    var2.setLocationRelativeTo((java.awt.Component)var61);
    java.awt.event.WindowStateListener[] var94 = var2.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    java.awt.Color var7 = var5.getForeground();
    int var10 = var5.getBaseline(11, 1);
    var5.transferFocusDownCycle();
    boolean var12 = var5.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Pirate var10 = var2.getPirate();
    int var11 = var10.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    var5.setIgnoreRepaint(true);
    var5.enable();
    java.awt.Dimension var18 = var5.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    java.lang.String var11 = var5.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    boolean var31 = var5.getAutoscrolls();
    var5.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    var5.revalidate();
    boolean var9 = var5.getIgnoreRepaint();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.image.ColorModel var33 = var25.getColorModel();
    boolean var34 = var25.getVerifyInputWhenFocusTarget();
    int var35 = var25.getWidth();
    java.util.Locale var36 = var25.getLocale();
    var5.setLocale(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    var56.updateUI();
    int var64 = var43.getComponentZOrder((java.awt.Component)var56);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var71 = var70.getPeer();
    var70.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var70.transferFocusUpCycle();
    boolean var77 = var70.getInheritsPopupMenu();
    java.awt.Dimension var78 = var70.minimumSize();
    java.awt.Dimension var79 = var56.getSize(var78);
    var5.setMaximumSize(var79);
    var5.hide();
    var5.resize(10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(11, 111, 111, 3, 1);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    var5.computeVisibleRect(var25);
    boolean var27 = var5.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    int var6 = var5.getX();
    var5.positionInitiale((-1), 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var24 = var17.isAncestorOf((java.awt.Component)var23);
    javax.swing.plaf.PanelUI var25 = var17.getUI();
    var17.transferFocusDownCycle();
    var17.doLayout();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var33.enable(true);
    int var36 = var33.getY();
    boolean var37 = var33.isValid();
    java.awt.Toolkit var38 = var33.getToolkit();
    var5.add((java.awt.Component)var17, (java.lang.Object)var38);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    var5.setVisible(true);
    boolean var31 = var5.isOpaque();
    javax.swing.JRootPane var32 = var5.getRootPane();
    java.awt.Rectangle var33 = var5.getBounds();
    var5.disable();
    var5.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    java.awt.Toolkit var62 = var59.getToolkit();
    java.awt.Component var64 = var5.add((java.awt.Component)var59, 0);
    javax.swing.InputMap var65 = var5.getInputMap();
    java.awt.event.MouseWheelListener[] var66 = var5.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    var5.setFocusable(false);
    var5.setDimensions(100, 10, 11);
    var5.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.repaint(1L);
    var5.resetKeyboardActions();
    var5.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isDoubleBuffered();
    java.awt.Dimension var28 = var18.size();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    java.awt.image.ColorModel var42 = var34.getColorModel();
    var34.setLocation(100, 1);
    boolean var46 = var34.isDoubleBuffered();
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.lang.Object var59 = var52.getTreeLock();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var66 = var65.getPeer();
    var65.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var65.repaint();
    var65.updateUI();
    int var73 = var52.getComponentZOrder((java.awt.Component)var65);
    boolean var74 = var65.isDoubleBuffered();
    java.awt.Dimension var75 = var65.size();
    var34.setPreferredSize(var75);
    var18.setSize(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(11, 10);
    boolean var8 = var2.coordonneesEgales(10, 0);
    int var9 = var2.getX();
    int var10 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 10);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    int var50 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 111);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var43 = var5.getMaximumSize();
    var5.setSize((-1), (-1));
    boolean var47 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDefaultCloseOperation(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    int var11 = var5.getBaseline(111, 100);
    boolean var12 = var5.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var35 = var34.getUIClassID();
    javax.swing.TransferHandler var36 = var34.getTransferHandler();
    java.awt.Color var37 = var34.getForeground();
    var17.setForeground(var37);
    boolean var39 = var17.getIgnoreRepaint();
    java.awt.Component var40 = var5.add("PanelUI", (java.awt.Component)var17);
    javax.swing.JPopupMenu var41 = var17.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    boolean var47 = var38.isDoubleBuffered();
    java.awt.Dimension var48 = var38.size();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    javax.swing.InputMap var57 = var54.getInputMap(0);
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    javax.swing.InputMap var67 = var64.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var68 = var64.getBaselineResizeBehavior();
    boolean var69 = var64.isPreferredSizeSet();
    java.awt.Component var70 = var54.add("", (java.awt.Component)var64);
    java.awt.Cursor var71 = var64.getCursor();
    var38.setCursor(var71);
    var5.setCursor(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var0, "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var0.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var18.revalidate();
    var18.setSize(0, 11);
    java.awt.Dimension var23 = var18.getMinimumSize();
    java.awt.Dimension var24 = var12.getSize(var23);
    var5.resize(var23);
    var5.disable();
    java.awt.Point var28 = var5.getMousePosition(true);
    var5.repaint(3, 1, 0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    var5.hide();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    javax.swing.InputMap var36 = var33.getInputMap(0);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    javax.swing.InputMap var46 = var43.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var47 = var43.getBaselineResizeBehavior();
    boolean var48 = var43.isPreferredSizeSet();
    java.awt.Component var49 = var33.add("", (java.awt.Component)var43);
    java.awt.Container var50 = var49.getParent();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    java.lang.Object var63 = var56.getTreeLock();
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var70 = var69.getPeer();
    var69.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var69.repaint();
    var69.updateUI();
    int var77 = var56.getComponentZOrder((java.awt.Component)var69);
    java.awt.Insets var78 = var56.getInsets();
    java.util.Locale var79 = var56.getLocale();
    var56.hide();
    java.awt.LayoutManager var81 = var56.getLayout();
    java.awt.Rectangle var82 = var56.bounds();
    var50.setBounds(var82);
    var5.repaint(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    java.awt.im.InputMethodRequests var20 = var5.getInputMethodRequests();
    boolean var21 = var5.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    java.awt.im.InputMethodRequests var14 = var5.getInputMethodRequests();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    java.awt.Color var22 = var20.getForeground();
    var5.setForeground(var22);
    java.awt.event.KeyListener[] var24 = var5.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.requestFocusInWindow();
    var5.show();
    var5.enableInputMethods(false);
    boolean var34 = var5.inside(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.Rectangle var8 = var5.bounds();
    boolean var9 = var5.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var18.revalidate();
    var18.setSize(0, 11);
    java.awt.Dimension var23 = var18.getMinimumSize();
    java.awt.Dimension var24 = var12.getSize(var23);
    var5.resize(var23);
    var5.setPosition(111, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var30 = var5.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    java.awt.event.ContainerListener[] var8 = var5.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    tinymonkeys.modele.SingeErratique var7 = new tinymonkeys.modele.SingeErratique((-1), 11, var5);
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    int[][] var10 = new int[][] { };
    var8.creationCarte(var10);
    var5.creationCarte(var10);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    tinymonkeys.modele.SingeErratique var17 = new tinymonkeys.modele.SingeErratique((-1), 11, var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var15.creationCarte(var20);
    var5.creationCarte(var20);
    var0.creationCarte(var20);
    tinymonkeys.modele.Pirate var25 = new tinymonkeys.modele.Pirate(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Component var10 = var5.getComponentAt(0, 0);
    var5.setSize((-1), 100);
    boolean var14 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    javax.swing.border.Border var52 = var25.getBorder();
    var25.firePropertyChange("", 0.0d, 100.0d);
    java.awt.Component var59 = var25.getComponentAt(100, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    java.awt.event.KeyListener[] var29 = var5.getKeyListeners();
    javax.swing.event.AncestorListener[] var30 = var5.getAncestorListeners();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    var36.updateUI();
    var36.show(false);
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    java.lang.Object var58 = var51.getTreeLock();
    java.awt.Component var61 = var51.locate(0, (-1));
    var51.requestFocus();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    var68.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var68.repaint();
    java.lang.Object var75 = var68.getTreeLock();
    java.awt.image.ColorModel var76 = var68.getColorModel();
    boolean var77 = var68.getVerifyInputWhenFocusTarget();
    var68.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var82 = var68.getBounds();
    var51.paintImmediately(var82);
    var36.computeVisibleRect(var82);
    java.awt.Rectangle var85 = var5.getBounds(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    var5.setDebugGraphicsOptions(1);
    java.awt.Dimension var22 = var5.getMaximumSize();
    int var23 = var5.countComponents();
    java.lang.String var24 = var5.getToolTipText();
    var5.setFocusTraversalKeysEnabled(true);
    var5.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    var5.resetKeyboardActions();
    float var7 = var5.getAlignmentY();
    boolean var8 = var5.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    var5.removeAll();
    var5.disable();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var17.enable(true);
    java.awt.Toolkit var20 = var17.getToolkit();
    var17.disable();
    java.awt.Dimension var22 = var17.minimumSize();
    java.awt.FocusTraversalPolicy var23 = var17.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var25 = var17.getPropertyChangeListeners("hi!");
    java.awt.Component var26 = var5.add((java.awt.Component)var17);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var39 = var32.isAncestorOf((java.awt.Component)var38);
    javax.swing.plaf.PanelUI var40 = var32.getUI();
    java.awt.Image var43 = var32.createImage(0, 1);
    var32.enable(true);
    var32.doLayout();
    javax.swing.ActionMap var47 = var32.getActionMap();
    var5.setActionMap(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    javax.swing.event.EventListenerList var3 = var1.getPirateEcouteurs();
    var1.demandeDeplacement(0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var0, "");
    tinymonkeys.modele.Pirate var8 = var0.getPirate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = var0.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.image.ColorModel var33 = var25.getColorModel();
    boolean var34 = var25.getVerifyInputWhenFocusTarget();
    int var35 = var25.getWidth();
    java.util.Locale var36 = var25.getLocale();
    var5.setLocale(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    var56.updateUI();
    int var64 = var43.getComponentZOrder((java.awt.Component)var56);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var71 = var70.getPeer();
    var70.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var70.transferFocusUpCycle();
    boolean var77 = var70.getInheritsPopupMenu();
    java.awt.Dimension var78 = var70.minimumSize();
    java.awt.Dimension var79 = var56.getSize(var78);
    var5.setMaximumSize(var79);
    java.awt.Point var81 = var5.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    var5.layout();
    var5.requestFocus();

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var5.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var4 = var2.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Dimension var31 = var5.size();
    java.awt.Dimension var32 = var5.size();
    java.awt.Dimension var33 = var5.getPreferredSize();
    var5.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    java.awt.ComponentOrientation var78 = var5.getComponentOrientation();
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var44 = var37.isAncestorOf((java.awt.Component)var43);
    boolean var45 = var37.isFocusTraversalPolicyProvider();
    boolean var48 = var37.contains(10, 111);
    java.awt.Dimension var49 = var37.minimumSize();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var56 = var55.getPeer();
    var55.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var55.repaint();
    java.lang.Object var62 = var55.getTreeLock();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    var68.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var68.repaint();
    var68.updateUI();
    int var76 = var55.getComponentZOrder((java.awt.Component)var68);
    java.awt.Insets var77 = var55.getInsets();
    java.util.Locale var78 = var55.getLocale();
    var55.hide();
    java.awt.LayoutManager var80 = var55.getLayout();
    var37.setLayout(var80);
    java.awt.Dimension var82 = var37.getMaximumSize();
    var5.setPreferredSize(var82);
    int var84 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 111);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    boolean var8 = var0.singeEstPresent((-1), 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var2 = var0.getSingesErratiques();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.run();
      fail("Expected exception of type randoop.util.ReflectionExecutor.TimeoutExceeded");
    } catch (randoop.util.ReflectionExecutor.TimeoutExceeded e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.repaint();
    var5.setBounds(11, 1, 111, 1);
    javax.swing.JToolTip var22 = var5.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var0.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    tinymonkeys.modele.SingeErratique var10 = new tinymonkeys.modele.SingeErratique((-1), 11, var8);
    tinymonkeys.modele.Ile var11 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var11);
    int[][] var13 = new int[][] { };
    var11.creationCarte(var13);
    var8.creationCarte(var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var8.creationCarte(var18);
    var0.creationCarte(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.ajoutPirate("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.controleur.Controller var11 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var12 = new tinymonkeys.vue.Fenetre("PanelUI", var11);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var25 = var18.isAncestorOf((java.awt.Component)var24);
    boolean var26 = var18.isFocusTraversalPolicyProvider();
    boolean var29 = var18.contains(10, 111);
    java.awt.Dimension var30 = var18.minimumSize();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    java.awt.Insets var58 = var36.getInsets();
    java.util.Locale var59 = var36.getLocale();
    var36.hide();
    java.awt.LayoutManager var61 = var36.getLayout();
    var18.setLayout(var61);
    var12.setLayout(var61);
    java.awt.Color var64 = var12.getBackground();
    java.awt.Toolkit var65 = var12.getToolkit();
    javax.swing.TransferHandler var66 = var12.getTransferHandler();
    int var67 = var12.getDefaultCloseOperation();
    var12.setResizable(false);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var12);
    var12.setResizable(false);
    var12.liberationClavier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(111, 111, 3, 0, (-1));

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.setBounds(0, 1, 1, 10);
    javax.swing.InputVerifier var24 = var5.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isMaximumSizeSet();
    boolean var18 = var5.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.lang.String var7 = var5.toString();
    var5.firePropertyChange("", ' ', ' ');
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.Component var27 = var17.locate(0, (-1));
    var17.requestFocus();
    boolean var29 = var17.isFocusTraversable();
    java.awt.Insets var30 = var17.insets();
    java.awt.Insets var31 = var5.getInsets(var30);
    java.awt.Point var32 = var5.getMousePosition();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    java.awt.GraphicsConfiguration var45 = var38.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var46 = var38.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var52.revalidate();
    java.lang.String var54 = var52.toString();
    java.awt.Component var55 = var38.add((java.awt.Component)var52);
    var5.setNextFocusableComponent((java.awt.Component)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var54.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.event.FocusListener[] var8 = var5.getFocusListeners();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    boolean var20 = var14.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    javax.swing.plaf.PanelUI var34 = var26.getUI();
    var26.transferFocusDownCycle();
    var26.doLayout();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var42.enable(true);
    int var45 = var42.getY();
    boolean var46 = var42.isValid();
    java.awt.Toolkit var47 = var42.getToolkit();
    var14.add((java.awt.Component)var26, (java.lang.Object)var47);
    java.beans.PropertyChangeListener[] var50 = var14.getPropertyChangeListeners("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Color var51 = var14.getBackground();
    var5.setForeground(var51);
    java.awt.Point var54 = var5.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    var22.setLocation(100, 1);
    boolean var34 = var22.isDoubleBuffered();
    java.util.Locale var35 = var22.getLocale();
    java.awt.Dimension var36 = var22.getMaximumSize();
    java.awt.Insets var37 = var22.getInsets();
    var22.removeAll();
    boolean var41 = var22.contains(111, 11);
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    java.awt.image.ColorModel var55 = var47.getColorModel();
    var47.setLocation(100, 1);
    boolean var59 = var47.isDoubleBuffered();
    java.util.Locale var60 = var47.getLocale();
    java.awt.Dimension var61 = var47.getMaximumSize();
    var22.setMaximumSize(var61);
    var5.setPreferredSize(var61);
    var5.paintImmediately(10, 0, 11, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    int var34 = var5.getY();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var41 = var40.getPeer();
    var40.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var40.repaint();
    java.lang.Object var47 = var40.getTreeLock();
    java.awt.Component var50 = var40.locate(0, (-1));
    var40.setAlignmentX(0.5f);
    tinymonkeys.vue.VueElement var58 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var59 = var58.getPeer();
    var58.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var58.repaint();
    java.lang.Object var65 = var58.getTreeLock();
    java.awt.image.ColorModel var66 = var58.getColorModel();
    boolean var67 = var58.getAutoscrolls();
    var58.setIgnoreRepaint(true);
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var82 = var75.isAncestorOf((java.awt.Component)var81);
    boolean var83 = var75.isFocusTraversalPolicyProvider();
    boolean var86 = var75.contains(10, 111);
    java.awt.Dimension var87 = var75.minimumSize();
    var58.setMaximumSize(var87);
    var40.setPreferredSize(var87);
    var5.setMaximumSize(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.event.AncestorListener[] var57 = var5.getAncestorListeners();
    var5.setDimensions((-1), 10, 11);
    var5.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var36.enable(true);
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var45 = var44.getUIClassID();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.transferFocusUpCycle();
    boolean var58 = var51.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    var77.updateUI();
    int var85 = var64.getComponentZOrder((java.awt.Component)var77);
    var44.add((java.awt.Component)var51, (java.lang.Object)var64);
    boolean var87 = var36.isFocusCycleRoot((java.awt.Container)var51);
    boolean var88 = var5.isAncestorOf((java.awt.Component)var51);
    java.awt.Cursor var89 = var51.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "PanelUI"+ "'", var45.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("hi!", 1, 11);
    boolean var33 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var5.setMinimumSize(var31);
    var5.transferFocusDownCycle();
    boolean var35 = var5.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.locate(111, 111);
    javax.swing.KeyStroke[] var23 = var5.getRegisteredKeyStrokes();
    int var24 = var5.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    var5.removeAll();
    boolean var55 = var5.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    tinymonkeys.vue.VueSingeErratique var18 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    java.lang.Object var31 = var24.getTreeLock();
    java.awt.Component var34 = var24.locate(0, (-1));
    var24.requestFocus();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.image.ColorModel var49 = var41.getColorModel();
    boolean var50 = var41.getVerifyInputWhenFocusTarget();
    var41.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var55 = var41.getBounds();
    var24.paintImmediately(var55);
    var18.setBounds(var55);
    var5.paintImmediately(var55);
    java.awt.Dimension var59 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.image.ColorModel var26 = var18.getColorModel();
    var18.setLocation(100, 1);
    boolean var30 = var18.isDoubleBuffered();
    java.util.Locale var31 = var18.getLocale();
    java.awt.Dimension var32 = var18.getMaximumSize();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    java.lang.Object var45 = var38.getTreeLock();
    java.awt.image.ColorModel var46 = var38.getColorModel();
    boolean var47 = var38.getVerifyInputWhenFocusTarget();
    int var48 = var38.getWidth();
    java.util.Locale var49 = var38.getLocale();
    var18.setLocale(var49);
    boolean var51 = var18.isFocusTraversalPolicyProvider();
    boolean var52 = var5.isAncestorOf((java.awt.Component)var18);
    boolean var53 = var5.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    boolean var23 = var15.getVerifyInputWhenFocusTarget();
    javax.swing.ActionMap var24 = var15.getActionMap();
    int var25 = var15.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var22 = var21.getUIClassID();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.transferFocusUpCycle();
    boolean var35 = var28.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    var21.add((java.awt.Component)var28, (java.lang.Object)var41);
    var41.invalidate();
    javax.swing.InputVerifier var65 = var41.getInputVerifier();
    var41.setEnabled(false);
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var74 = var73.getPeer();
    javax.swing.InputMap var76 = var73.getInputMap(0);
    boolean var77 = var73.isShowing();
    java.awt.dnd.DropTarget var78 = var73.getDropTarget();
    java.awt.Dimension var79 = var73.getMaximumSize();
    java.awt.Dimension var80 = var41.getSize(var79);
    var5.setMinimumSize(var79);
    var5.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "PanelUI"+ "'", var22.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var64.enable(true);
    var64.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var79 = var76.locate(11, 10);
    tinymonkeys.vue.VueElement var85 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var86 = var85.getPeer();
    var85.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var85.repaint();
    var85.updateUI();
    var85.show(false);
    float var95 = var85.getAlignmentY();
    java.awt.Rectangle var96 = var85.bounds();
    java.awt.Rectangle var97 = var76.getBounds(var96);
    var64.computeVisibleRect(var97);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setShape((java.awt.Shape)var97);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.Component var59 = var5.getComponentAt(1, 1);
    var5.setAlignmentX(0.5f);
    var5.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Tresor var5 = var2.getTresor();
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    tinymonkeys.modele.SingeErratique var10 = new tinymonkeys.modele.SingeErratique((-1), 11, var8);
    tinymonkeys.modele.Ile var11 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var11);
    int[][] var13 = new int[][] { };
    var11.creationCarte(var13);
    var8.creationCarte(var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var8.creationCarte(var18);
    tinymonkeys.controleur.Controller var22 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var23 = new tinymonkeys.vue.Fenetre("PanelUI", var22);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var36 = var29.isAncestorOf((java.awt.Component)var35);
    boolean var37 = var29.isFocusTraversalPolicyProvider();
    boolean var40 = var29.contains(10, 111);
    java.awt.Dimension var41 = var29.minimumSize();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    var60.updateUI();
    int var68 = var47.getComponentZOrder((java.awt.Component)var60);
    java.awt.Insets var69 = var47.getInsets();
    java.util.Locale var70 = var47.getLocale();
    var47.hide();
    java.awt.LayoutManager var72 = var47.getLayout();
    var29.setLayout(var72);
    var23.setLayout(var72);
    java.awt.Color var75 = var23.getBackground();
    java.awt.MenuBar var76 = var23.getMenuBar();
    var8.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    javax.accessibility.AccessibleContext var79 = var23.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var22 = var15.isAncestorOf((java.awt.Component)var21);
    tinymonkeys.vue.VueSingeErratique var28 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    java.awt.Component var44 = var34.locate(0, (-1));
    var34.requestFocus();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    java.lang.Object var58 = var51.getTreeLock();
    java.awt.image.ColorModel var59 = var51.getColorModel();
    boolean var60 = var51.getVerifyInputWhenFocusTarget();
    var51.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var65 = var51.getBounds();
    var34.paintImmediately(var65);
    var28.setBounds(var65);
    var15.paintImmediately(var65);
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var80 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var81 = var74.isAncestorOf((java.awt.Component)var80);
    boolean var82 = var74.isFocusTraversalPolicyProvider();
    var74.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var87 = var74.preferredSize();
    var15.resize(var87);
    var5.resize(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    java.awt.Dimension var13 = var5.minimumSize();
    java.beans.VetoableChangeListener[] var14 = var5.getVetoableChangeListeners();
    var5.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    java.awt.Container var9 = var5.getParent();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.Component var25 = var15.locate(0, (-1));
    var15.setAlignmentX(0.5f);
    java.awt.Font var28 = var15.getFont();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var43 = var42.getUIClassID();
    javax.swing.TransferHandler var44 = var42.getTransferHandler();
    java.awt.Color var45 = var42.getForeground();
    var34.setBackground(var45);
    var15.setForeground(var45);
    var5.setBackground(var45);
    boolean var49 = var5.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isDoubleBuffered();
    boolean var28 = var18.isBackgroundSet();
    java.lang.String var29 = var18.toString();
    var18.show(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    var22.setLocation(100, 1);
    boolean var34 = var22.isDoubleBuffered();
    java.util.Locale var35 = var22.getLocale();
    java.awt.Dimension var36 = var22.getMaximumSize();
    java.awt.Insets var37 = var22.getInsets();
    var22.removeAll();
    boolean var41 = var22.contains(111, 11);
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    java.awt.image.ColorModel var55 = var47.getColorModel();
    var47.setLocation(100, 1);
    boolean var59 = var47.isDoubleBuffered();
    java.util.Locale var60 = var47.getLocale();
    java.awt.Dimension var61 = var47.getMaximumSize();
    var22.setMaximumSize(var61);
    var5.setPreferredSize(var61);
    boolean var64 = var5.isFocusable();
    int var65 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 111);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    var5.setName("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    javax.swing.event.EventListenerList var3 = var1.getPirateEcouteurs();
    tinymonkeys.controleur.Controller var5 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var6 = new tinymonkeys.vue.Fenetre("PanelUI", var5);
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var19 = var12.isAncestorOf((java.awt.Component)var18);
    boolean var20 = var12.isFocusTraversalPolicyProvider();
    boolean var23 = var12.contains(10, 111);
    java.awt.Dimension var24 = var12.minimumSize();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    var43.updateUI();
    int var51 = var30.getComponentZOrder((java.awt.Component)var43);
    java.awt.Insets var52 = var30.getInsets();
    java.util.Locale var53 = var30.getLocale();
    var30.hide();
    java.awt.LayoutManager var55 = var30.getLayout();
    var12.setLayout(var55);
    var6.setLayout(var55);
    java.awt.Color var58 = var6.getBackground();
    java.awt.Toolkit var59 = var6.getToolkit();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var72 = var65.isAncestorOf((java.awt.Component)var71);
    javax.swing.plaf.PanelUI var73 = var65.getUI();
    java.awt.Image var76 = var65.createImage(0, 1);
    var65.enable(true);
    java.awt.Color var79 = var65.getBackground();
    var6.setBackground(var79);
    var6.setLocation(111, 10);
    java.awt.Container var84 = var6.getFocusCycleRootAncestor();
    var6.setState(0);
    boolean var87 = var6.isResizable();
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var6);
    java.lang.String var89 = var1.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    var2.toFront();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var24 = var2.getFocusTraversalKeys(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    int var13 = var5.getY();
    java.beans.VetoableChangeListener[] var14 = var5.getVetoableChangeListeners();
    var5.setToolTipText("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '4', '4');
    var5.setDebugGraphicsOptions((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.repaint();
    var5.firePropertyChange("hi!", '#', 'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    var5.setSize(111, 11);
    var5.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var9 = var5.getBaselineResizeBehavior();
    var5.layout();
    boolean var11 = var5.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.updateUI();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    int var14 = var5.countComponents();
    boolean var17 = var5.contains(0, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.controleur.Controller var11 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var12 = new tinymonkeys.vue.Fenetre("PanelUI", var11);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var25 = var18.isAncestorOf((java.awt.Component)var24);
    boolean var26 = var18.isFocusTraversalPolicyProvider();
    boolean var29 = var18.contains(10, 111);
    java.awt.Dimension var30 = var18.minimumSize();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    java.awt.Insets var58 = var36.getInsets();
    java.util.Locale var59 = var36.getLocale();
    var36.hide();
    java.awt.LayoutManager var61 = var36.getLayout();
    var18.setLayout(var61);
    var12.setLayout(var61);
    java.awt.Color var64 = var12.getBackground();
    java.awt.Toolkit var65 = var12.getToolkit();
    javax.swing.TransferHandler var66 = var12.getTransferHandler();
    int var67 = var12.getDefaultCloseOperation();
    var12.setResizable(false);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var71 = var2.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    var5.resetKeyboardActions();
    float var7 = var5.getAlignmentY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var8 = var5.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    var2.demandeDeplacementPirate(1, 111);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = var2.valeurCarte(100, 111);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    java.awt.event.MouseWheelListener[] var29 = var5.getMouseWheelListeners();
    java.awt.Color var30 = var5.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    java.awt.Point var28 = var17.getMousePosition(true);
    int var29 = var17.getY();
    javax.swing.JPopupMenu var30 = var17.getComponentPopupMenu();
    var17.resetKeyboardActions();
    java.awt.im.InputContext var32 = var17.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    float var8 = var5.getAlignmentY();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var17 = var14.locate(11, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    var23.updateUI();
    var23.show(false);
    float var33 = var23.getAlignmentY();
    java.awt.Rectangle var34 = var23.bounds();
    java.awt.Rectangle var35 = var14.getBounds(var34);
    var5.setBounds(var34);
    boolean var37 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    java.awt.Component var36 = var26.locate(0, (-1));
    var26.requestFocus();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.image.ColorModel var51 = var43.getColorModel();
    boolean var52 = var43.getVerifyInputWhenFocusTarget();
    var43.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var57 = var43.getBounds();
    var26.paintImmediately(var57);
    var26.removeAll();
    java.awt.Color var60 = var26.getBackground();
    var5.setForeground(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(11, 10, 0, 0, 100);
    var5.requestFocus();
    var5.firePropertyChange("PanelUI", '4', '4');

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    java.lang.String var6 = var5.getAvatar();
    java.lang.String var7 = var5.getAvatar();
    var5.positionInitiale(100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "PanelUI"+ "'", var7.equals("PanelUI"));

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.event.WindowStateListener[] var57 = var2.getWindowStateListeners();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.transferFocusUpCycle();
    boolean var70 = var63.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.Component var86 = var76.locate(0, (-1));
    var76.resize((-1), 0);
    var76.transferFocusDownCycle();
    var76.setDebugGraphicsOptions(1);
    java.awt.Dimension var93 = var76.getMaximumSize();
    java.awt.Dimension var94 = var63.getSize(var93);
    var2.setMinimumSize(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    var5.setPosition(1, 1);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 0L, 0L);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.awt.GraphicsConfiguration var27 = var20.getGraphicsConfiguration();
    java.awt.Insets var28 = var20.insets();
    var20.repaint(1L);
    var20.resetKeyboardActions();
    tinymonkeys.vue.VueTresor var37 = new tinymonkeys.vue.VueTresor(100, 11, 1, (-1), 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.add((java.awt.Component)var20, (java.lang.Object)1, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    tinymonkeys.modele.Ile var4 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var5 = new tinymonkeys.modele.BandeDeSingesErratiques(var4);
    tinymonkeys.modele.SingeErratique var6 = new tinymonkeys.modele.SingeErratique((-1), 11, var4);
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    int[][] var9 = new int[][] { };
    var7.creationCarte(var9);
    var4.creationCarte(var9);
    tinymonkeys.modele.Ile var14 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var15 = new tinymonkeys.modele.BandeDeSingesErratiques(var14);
    tinymonkeys.modele.SingeErratique var16 = new tinymonkeys.modele.SingeErratique((-1), 11, var14);
    tinymonkeys.modele.Ile var17 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var18 = new tinymonkeys.modele.BandeDeSingesErratiques(var17);
    int[][] var19 = new int[][] { };
    var17.creationCarte(var19);
    var14.creationCarte(var19);
    var4.creationCarte(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var23 = new tinymonkeys.vue.VueCarte((-1), (-1), var19);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    javax.accessibility.AccessibleContext var3 = var2.getAccessibleContext();
    java.util.List var4 = var2.getIconImages();
    java.lang.String var5 = var2.getWarningString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    var5.setLocation(1, 11);
    var5.firePropertyChange("", 100.0f, 0.5f);
    java.awt.Graphics var19 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(1, 111, 11, (-1), 111);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isOpaque();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var17 = var14.locate(11, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    var23.updateUI();
    var23.show(false);
    float var33 = var23.getAlignmentY();
    java.awt.Rectangle var34 = var23.bounds();
    java.awt.Rectangle var35 = var14.getBounds(var34);
    var5.scrollRectToVisible(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.awt.GraphicsConfiguration var40 = var33.getGraphicsConfiguration();
    java.awt.Insets var41 = var33.insets();
    var33.repaint(1L);
    java.util.Set var45 = var33.getFocusTraversalKeys(0);
    var5.setFocusTraversalKeys(0, var45);
    var5.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    int var12 = var5.getWidth();
    javax.swing.JRootPane var13 = var5.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.repaint();
    boolean var17 = var5.requestFocusInWindow();
    boolean var18 = var5.isShowing();
    var5.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    boolean var32 = var19.hasFocus();
    var19.requestFocus();
    boolean var34 = var19.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    javax.swing.TransferHandler var65 = var2.getTransferHandler();
    java.awt.Image var66 = var2.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    var5.layout();
    var5.setToolTipText("hi!");

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.image.ColorModel var43 = var35.getColorModel();
    boolean var44 = var35.getVerifyInputWhenFocusTarget();
    var35.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var49 = var35.getBounds();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var62 = var55.isAncestorOf((java.awt.Component)var61);
    java.awt.Point var63 = var61.location();
    java.awt.Point var64 = var35.getLocation(var63);
    boolean var65 = var5.contains(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(10, 100, 111, 111, 10, "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.repaint();
    var12.updateUI();
    var12.show(false);
    boolean var22 = var12.isFocusTraversalPolicyProvider();
    boolean var23 = var12.isManagingFocus();
    java.awt.Component[] var24 = var12.getComponents();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var37 = var30.isAncestorOf((java.awt.Component)var36);
    boolean var38 = var30.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var39 = var30.getMouseMotionListeners();
    javax.swing.ActionMap var40 = var30.getActionMap();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    java.awt.Component var56 = var46.locate(0, (-1));
    var46.setAlignmentX(0.5f);
    java.awt.Font var59 = var46.getFont();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var67 = var66.getUIClassID();
    float var68 = var66.getAlignmentX();
    boolean var69 = var66.isOptimizedDrawingEnabled();
    var46.putClientProperty((java.lang.Object)' ', (java.lang.Object)var69);
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.Component var86 = var76.locate(0, (-1));
    var76.setAlignmentX(0.5f);
    java.awt.Font var89 = var76.getFont();
    java.awt.FontMetrics var90 = var46.getFontMetrics(var89);
    java.awt.FontMetrics var91 = var30.getFontMetrics(var89);
    java.awt.FontMetrics var92 = var12.getFontMetrics(var89);
    java.awt.Insets var93 = var12.getInsets();
    var6.remove((java.awt.Component)var12);
    boolean var95 = var6.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "PanelUI"+ "'", var67.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    java.lang.String var3 = var1.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.awt.Component var55 = var2.getGlassPane();
    var55.firePropertyChange("hi!", 'a', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    javax.swing.event.EventListenerList var3 = var1.getPirateEcouteurs();
    var1.setAvatar("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isShowing();
    int var9 = var5.getX();
    var5.firePropertyChange("", (short)100, (short)10);
    var5.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 111);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Dimension var8 = var5.getPreferredSize();
    java.awt.Color var9 = var5.getBackground();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var21.revalidate();
    var21.setSize(0, 11);
    java.awt.Dimension var26 = var21.getMinimumSize();
    java.awt.Dimension var27 = var15.getSize(var26);
    var5.setPreferredSize(var27);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var43 = var42.getUIClassID();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.transferFocusUpCycle();
    boolean var56 = var49.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    java.lang.Object var69 = var62.getTreeLock();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var76 = var75.getPeer();
    var75.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var75.repaint();
    var75.updateUI();
    int var83 = var62.getComponentZOrder((java.awt.Component)var75);
    var42.add((java.awt.Component)var49, (java.lang.Object)var62);
    boolean var85 = var34.isFocusCycleRoot((java.awt.Container)var49);
    javax.swing.event.AncestorListener[] var86 = var34.getAncestorListeners();
    var34.setDebugGraphicsOptions(0);
    java.awt.peer.ComponentPeer var89 = var34.getPeer();
    tinymonkeys.vue.VueElement var95 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var96 = var95.getPeer();
    java.awt.Color var97 = var95.getForeground();
    var34.setForeground(var97);
    var5.setBackground(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    java.awt.Dimension var17 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.Component var35 = var25.locate(0, (-1));
    var25.setAlignmentX(0.5f);
    java.awt.Font var38 = var25.getFont();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var44.enable(true);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var53 = var52.getUIClassID();
    javax.swing.TransferHandler var54 = var52.getTransferHandler();
    java.awt.Color var55 = var52.getForeground();
    var44.setBackground(var55);
    var25.setForeground(var55);
    java.awt.Insets var58 = var25.insets();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var65 = var64.getUIClassID();
    java.lang.String var66 = var64.toString();
    var64.firePropertyChange("", ' ', ' ');
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.Component var86 = var76.locate(0, (-1));
    var76.requestFocus();
    boolean var88 = var76.isFocusTraversable();
    java.awt.Insets var89 = var76.insets();
    java.awt.Insets var90 = var64.getInsets(var89);
    java.awt.Insets var91 = var25.getInsets(var90);
    java.awt.Insets var92 = var5.getInsets(var90);
    float var93 = var5.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "PanelUI"+ "'", var53.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "PanelUI"+ "'", var65.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var66.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0.5f);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    int var3 = var1.getX();
    var1.positionInitiale((-1), 10);
    javax.swing.event.EventListenerList var7 = var1.getPirateEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    javax.swing.TransferHandler var65 = var2.getTransferHandler();
    var2.setBounds((-1), (-1), 1, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Toolkit var18 = var5.getToolkit();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var27 = var24.locate(11, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    var33.show(false);
    float var43 = var33.getAlignmentY();
    java.awt.Rectangle var44 = var33.bounds();
    java.awt.Rectangle var45 = var24.getBounds(var44);
    java.awt.Rectangle var46 = var5.getBounds(var44);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.lang.Object var59 = var52.getTreeLock();
    java.awt.image.ColorModel var60 = var52.getColorModel();
    var52.setLocation(100, 1);
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var70 = var69.getUIClassID();
    javax.swing.TransferHandler var71 = var69.getTransferHandler();
    java.awt.Color var72 = var69.getForeground();
    var52.setForeground(var72);
    var5.setBackground(var72);
    boolean var75 = var5.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "PanelUI"+ "'", var70.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.event.MouseMotionListener[] var30 = var5.getMouseMotionListeners();
    var5.setDoubleBuffered(false);
    var5.setFocusCycleRoot(true);
    java.lang.String var35 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]"+ "'", var35.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    boolean var32 = var19.hasFocus();
    tinymonkeys.controleur.Controller var34 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var35 = new tinymonkeys.vue.Fenetre("PanelUI", var34);
    var35.pack();
    var35.addNotify();
    java.awt.Graphics var38 = var35.getGraphics();
    var19.printAll(var38);
    boolean var42 = var19.inside(11, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    var2.demandeDeplacementPirate(1, 111);
    tinymonkeys.controleur.Controller var19 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var20 = new tinymonkeys.vue.Fenetre("PanelUI", var19);
    javax.accessibility.AccessibleContext var21 = var20.getAccessibleContext();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    java.awt.Container var9 = var5.getParent();
    var5.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var12 = var5.getDropTarget();
    boolean var13 = var5.isFocusTraversalPolicySet();
    java.awt.im.InputContext var14 = var5.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isMaximumSizeSet();
    boolean var18 = var5.isOpaque();
    java.awt.Component.BaselineResizeBehavior var19 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var0.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setResizable(false);
    boolean var62 = var2.isDisplayable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var64 = var2.getFocusTraversalKeys(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var23.isFontSet();
    boolean var66 = var23.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.event.WindowStateListener[] var57 = var2.getWindowStateListeners();
    java.awt.Component var58 = var2.getGlassPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var13 = var5.getBaselineResizeBehavior();
    var5.show();
    var5.setEnabled(false);
    boolean var17 = var5.isMinimumSizeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var19 = var5.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    boolean var20 = var5.isManagingFocus();
    java.lang.String var21 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PanelUI"+ "'", var21.equals("PanelUI"));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.Component var29 = var19.locate(0, (-1));
    var19.resize((-1), 0);
    var19.transferFocusDownCycle();
    javax.swing.KeyStroke[] var34 = var19.getRegisteredKeyStrokes();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var47 = var40.isAncestorOf((java.awt.Component)var46);
    boolean var48 = var40.isFocusTraversalPolicyProvider();
    boolean var51 = var40.contains(10, 111);
    var19.remove((java.awt.Component)var40);
    javax.swing.JRootPane var53 = var19.getRootPane();
    java.lang.String var54 = var19.getToolTipText();
    boolean var55 = var5.isAncestorOf((java.awt.Component)var19);
    java.awt.GraphicsConfiguration var56 = var5.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    var1.demandeDeplacement(10, (-1));
    int var6 = var1.getX();
    tinymonkeys.modele.Ile var9 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var10 = new tinymonkeys.modele.BandeDeSingesErratiques(var9);
    tinymonkeys.modele.SingeErratique var11 = new tinymonkeys.modele.SingeErratique((-1), 11, var9);
    tinymonkeys.modele.Tresor var12 = var9.getTresor();
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    tinymonkeys.modele.SingeErratique var17 = new tinymonkeys.modele.SingeErratique((-1), 11, var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var15.creationCarte(var20);
    tinymonkeys.modele.Ile var23 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var24 = new tinymonkeys.modele.BandeDeSingesErratiques(var23);
    int[][] var25 = new int[][] { };
    var23.creationCarte(var25);
    var15.creationCarte(var25);
    tinymonkeys.controleur.Controller var29 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var30 = new tinymonkeys.vue.Fenetre("PanelUI", var29);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var43 = var36.isAncestorOf((java.awt.Component)var42);
    boolean var44 = var36.isFocusTraversalPolicyProvider();
    boolean var47 = var36.contains(10, 111);
    java.awt.Dimension var48 = var36.minimumSize();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var68 = var67.getPeer();
    var67.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var67.repaint();
    var67.updateUI();
    int var75 = var54.getComponentZOrder((java.awt.Component)var67);
    java.awt.Insets var76 = var54.getInsets();
    java.util.Locale var77 = var54.getLocale();
    var54.hide();
    java.awt.LayoutManager var79 = var54.getLayout();
    var36.setLayout(var79);
    var30.setLayout(var79);
    java.awt.Color var82 = var30.getBackground();
    java.awt.MenuBar var83 = var30.getMenuBar();
    var15.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var30);
    var9.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var30);
    var30.setFocusableWindowState(false);
    tinymonkeys.vue.VueElement var93 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var93.enable(true);
    int var96 = var93.getY();
    var30.setGlassPane((java.awt.Component)var93);
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var30);
    boolean var99 = var30.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var36 = var33.locate(11, 10);
    java.awt.Container var37 = var33.getParent();
    var33.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var40 = var33.getDropTarget();
    boolean var41 = var33.isFocusTraversalPolicySet();
    javax.swing.InputMap var42 = var33.getInputMap();
    var5.setInputMap(0, var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    javax.accessibility.AccessibleContext var3 = var2.getAccessibleContext();
    java.awt.MenuBar var4 = var2.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    var5.setFocusCycleRoot(true);
    java.awt.Graphics var15 = var5.getGraphics();
    var5.setDebugGraphicsOptions(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    int var60 = var2.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.event.MouseWheelListener[] var20 = var5.getMouseWheelListeners();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    boolean var32 = var26.getAutoscrolls();
    float var33 = var26.getAlignmentX();
    java.lang.Object var34 = var5.getClientProperty((java.lang.Object)var26);
    java.lang.Object var35 = var5.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.controleur.Controller var39 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var40 = new tinymonkeys.vue.Fenetre("PanelUI", var39);
    var40.pack();
    var40.addNotify();
    java.awt.Graphics var43 = var40.getGraphics();
    var5.printComponents(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    int var6 = var2.getX();
    int var7 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage(1, (-1), 3, 1, 111);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    javax.swing.InputMap var30 = var27.getInputMap(0);
    boolean var31 = var27.isShowing();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    java.awt.Component var33 = var18.add((java.awt.Component)var27);
    java.awt.Component var34 = var5.add("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var33);
    boolean var35 = var5.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isVisible();
    boolean var8 = var5.isCursorSet();
    var5.show(true);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var16.enable(true);
    int var19 = var16.getY();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    java.awt.Color var27 = var25.getForeground();
    var5.add((java.awt.Component)var16, (java.lang.Object)var27, 0);
    boolean var30 = var16.hasFocus();
    javax.swing.KeyStroke[] var31 = var16.getRegisteredKeyStrokes();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    var37.setLocation(100, 1);
    boolean var49 = var37.isDoubleBuffered();
    java.util.Locale var50 = var37.getLocale();
    java.awt.Dimension var51 = var37.getMaximumSize();
    var16.setSize(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.remove(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    var5.removeAll();
    java.awt.Container var11 = var5.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    boolean var49 = var5.isForegroundSet();
    java.beans.PropertyChangeListener[] var51 = var5.getPropertyChangeListeners("hi!");
    var5.repaint();
    java.awt.Container var53 = var5.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    int var22 = var2.getDefaultCloseOperation();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var35 = var28.isAncestorOf((java.awt.Component)var34);
    javax.swing.plaf.PanelUI var36 = var28.getUI();
    java.awt.Image var39 = var28.createImage(0, 1);
    tinymonkeys.vue.VueElement var45 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var48 = var45.locate(11, 10);
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    var54.show(false);
    float var64 = var54.getAlignmentY();
    java.awt.Rectangle var65 = var54.bounds();
    java.awt.Rectangle var66 = var45.getBounds(var65);
    boolean var67 = var45.isFocusCycleRoot();
    java.awt.Component var70 = var45.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.image.ColorModel var84 = var76.getColorModel();
    var76.setLocation(100, 1);
    boolean var88 = var76.isMaximumSizeSet();
    java.awt.Component var89 = var45.add((java.awt.Component)var76);
    tinymonkeys.controleur.Controller var91 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var92 = new tinymonkeys.vue.Fenetre("PanelUI", var91);
    var92.pack();
    var92.addNotify();
    java.awt.Graphics var95 = var92.getGraphics();
    var89.paintAll(var95);
    var28.paintAll(var95);
    var2.paint(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    boolean var32 = var5.isFocusTraversalPolicyProvider();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    java.lang.Object var58 = var51.getTreeLock();
    java.awt.event.HierarchyListener[] var59 = var51.getHierarchyListeners();
    boolean var60 = var39.isAncestorOf((java.awt.Component)var51);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var68 = var67.getPeer();
    var67.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var67.repaint();
    java.awt.GraphicsConfiguration var74 = var67.getGraphicsConfiguration();
    java.awt.Insets var75 = var67.insets();
    var67.repaint(1L);
    java.util.Set var79 = var67.getFocusTraversalKeys(0);
    var39.setFocusTraversalKeys(0, var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys(111, var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    int var52 = var25.getHeight();
    java.awt.Point var54 = var25.getMousePosition(false);
    int var55 = var25.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 111);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    java.util.Vector var2 = var1.getSingesErratiques();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.run();
      fail("Expected exception of type randoop.util.ReflectionExecutor.TimeoutExceeded");
    } catch (randoop.util.ReflectionExecutor.TimeoutExceeded e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    int var13 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.event.AncestorListener[] var57 = var5.getAncestorListeners();
    boolean var58 = var5.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.Point var49 = var25.getMousePosition(false);
    var25.setEnabled(true);
    java.awt.event.MouseMotionListener[] var52 = var25.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Font var38 = var5.getFont();
    java.awt.event.ContainerListener[] var39 = var5.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.firePropertyChange("", 100L, (-1L));
    boolean var84 = var5.contains(1, 10);
    java.awt.ComponentOrientation var85 = var5.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.util.Locale var48 = var25.getLocale();
    javax.swing.JToolTip var49 = var25.createToolTip();
    int var50 = var49.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    var5.setFocusCycleRoot(true);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.event.FocusListener[] var28 = var27.getFocusListeners();
    boolean var29 = var27.getInheritsPopupMenu();
    var5.setNextFocusableComponent((java.awt.Component)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.event.WindowStateListener[] var57 = var2.getWindowStateListeners();
    var2.toFront();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.requestFocusInWindow();
    var5.show();
    var5.enableInputMethods(false);
    javax.swing.JPopupMenu var32 = var5.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    var5.setName("hi!");
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    var37.setAutoscrolls(false);
    javax.swing.InputMap var53 = var37.getInputMap();
    var5.setInputMap(0, var53);
    var5.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var5.setMinimumSize(var31);
    boolean var34 = var5.isMaximumSizeSet();
    var5.layout();
    var5.firePropertyChange("", 10.0f, 100.0f);
    javax.swing.JToolTip var40 = var5.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    var5.setOpaque(false);
    java.awt.event.HierarchyListener[] var20 = var5.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(11, 10);
    boolean var8 = var2.coordonneesEgales(10, 0);
    var2.setPosition(1, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.run();
      fail("Expected exception of type randoop.util.ReflectionExecutor.TimeoutExceeded");
    } catch (randoop.util.ReflectionExecutor.TimeoutExceeded e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isDoubleBuffered();
    java.awt.Dimension var28 = var18.size();
    java.awt.Dimension var29 = var18.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    var5.transferFocusBackward();
    java.awt.Point var59 = var5.location();
    boolean var60 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.event.FocusListener[] var6 = var5.getFocusListeners();
    var5.doLayout();
    int var10 = var5.getBaseline(100, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    boolean var49 = var5.isForegroundSet();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var56 = var55.getPeer();
    var55.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var55.repaint();
    java.awt.GraphicsConfiguration var62 = var55.getGraphicsConfiguration();
    boolean var63 = var55.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var70 = var69.getPeer();
    var69.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var69.repaint();
    java.lang.Object var76 = var69.getTreeLock();
    java.awt.image.ColorModel var77 = var69.getColorModel();
    boolean var78 = var69.getVerifyInputWhenFocusTarget();
    int var79 = var69.getWidth();
    var69.removeNotify();
    boolean var81 = var55.isAncestorOf((java.awt.Component)var69);
    boolean var82 = var69.hasFocus();
    tinymonkeys.controleur.Controller var84 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var85 = new tinymonkeys.vue.Fenetre("PanelUI", var84);
    var85.pack();
    var85.addNotify();
    java.awt.Graphics var88 = var85.getGraphics();
    var69.printAll(var88);
    var5.print(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    var5.setLocation(1, 11);
    var5.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var43 = var5.getMaximumSize();
    var5.setRequestFocusEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    float var11 = var5.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    java.awt.Container var9 = var5.getParent();
    var5.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var12 = var5.getDropTarget();
    tinymonkeys.vue.VuePirate var19 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    var19.mortPirate();
    java.awt.Insets var21 = var19.insets();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var34 = var27.isAncestorOf((java.awt.Component)var33);
    javax.swing.plaf.PanelUI var35 = var27.getUI();
    java.awt.Image var38 = var27.createImage(0, 1);
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var47 = var44.locate(11, 10);
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var54 = var53.getPeer();
    var53.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var53.repaint();
    var53.updateUI();
    var53.show(false);
    float var63 = var53.getAlignmentY();
    java.awt.Rectangle var64 = var53.bounds();
    java.awt.Rectangle var65 = var44.getBounds(var64);
    boolean var66 = var44.isFocusCycleRoot();
    java.awt.Component var69 = var44.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var76 = var75.getPeer();
    var75.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var75.repaint();
    java.lang.Object var82 = var75.getTreeLock();
    java.awt.image.ColorModel var83 = var75.getColorModel();
    var75.setLocation(100, 1);
    boolean var87 = var75.isMaximumSizeSet();
    java.awt.Component var88 = var44.add((java.awt.Component)var75);
    tinymonkeys.controleur.Controller var90 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var91 = new tinymonkeys.vue.Fenetre("PanelUI", var90);
    var91.pack();
    var91.addNotify();
    java.awt.Graphics var94 = var91.getGraphics();
    var88.paintAll(var94);
    var27.paintAll(var94);
    var19.dessineElement(var94);
    var5.printAll(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isValid();
    boolean var17 = var5.isManagingFocus();
    var5.setFocusable(true);
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    var37.setLocation(100, 1);
    boolean var49 = var37.isDoubleBuffered();
    java.util.Locale var50 = var37.getLocale();
    java.awt.Dimension var51 = var37.getMaximumSize();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.repaint();
    java.lang.Object var64 = var57.getTreeLock();
    java.awt.image.ColorModel var65 = var57.getColorModel();
    boolean var66 = var57.getVerifyInputWhenFocusTarget();
    int var67 = var57.getWidth();
    java.util.Locale var68 = var57.getLocale();
    var37.setLocale(var68);
    javax.swing.plaf.PanelUI var70 = var37.getUI();
    var25.setUI(var70);
    java.awt.Font var72 = var25.getFont();
    var5.setFont(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    var10.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var10.repaint();
    java.lang.Object var17 = var10.getTreeLock();
    java.awt.Component var20 = var10.locate(0, (-1));
    var10.setAlignmentX(0.5f);
    java.awt.Font var23 = var10.getFont();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var31 = var30.getUIClassID();
    float var32 = var30.getAlignmentX();
    boolean var33 = var30.isOptimizedDrawingEnabled();
    var10.putClientProperty((java.lang.Object)' ', (java.lang.Object)var33);
    var10.transferFocusBackward();
    java.awt.Dimension var36 = var10.getSize();
    var2.setSize(var36);
    java.awt.Container var38 = var2.getContentPane();
    float var39 = var2.getOpacity();
    java.awt.MenuBar var40 = var2.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    javax.swing.KeyStroke[] var20 = var5.getRegisteredKeyStrokes();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    boolean var34 = var26.isFocusTraversalPolicyProvider();
    boolean var37 = var26.contains(10, 111);
    var5.remove((java.awt.Component)var26);
    var5.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    int[][] var4 = new int[][] { };
    var2.creationCarte(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var6 = new tinymonkeys.vue.VueCarte(10, 3, var4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(111, (-1), 11, 100, 0);
    java.awt.dnd.DropTarget var6 = var5.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    java.awt.Container var30 = var5.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    int var37 = var34.getY();
    boolean var38 = var34.isValid();
    java.awt.Toolkit var39 = var34.getToolkit();
    var34.setVisible(false);
    java.awt.event.MouseListener[] var42 = var34.getMouseListeners();
    tinymonkeys.vue.VueElement var48 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var49 = var48.getPeer();
    var48.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var48.repaint();
    java.lang.Object var55 = var48.getTreeLock();
    java.awt.image.ColorModel var56 = var48.getColorModel();
    boolean var57 = var48.getVerifyInputWhenFocusTarget();
    var48.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var62 = var48.getBounds();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var75 = var68.isAncestorOf((java.awt.Component)var74);
    java.awt.Point var76 = var74.location();
    java.awt.Point var77 = var48.getLocation(var76);
    java.awt.Point var78 = var34.getLocation(var77);
    java.awt.Component var79 = var5.findComponentAt(var78);
    var5.setName("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    int var6 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    var2.setFocusableWindowState(true);
    java.awt.event.WindowStateListener[] var58 = var2.getWindowStateListeners();
    var2.toFront();
    var2.reshape(11, 100, 10, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Dimension var31 = var5.size();
    java.awt.Dimension var32 = var5.size();
    java.awt.Dimension var33 = var5.getPreferredSize();
    var5.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    boolean var54 = var2.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    float var48 = var12.getAlignmentX();
    var12.firePropertyChange("", 1.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.move(1, 100);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    java.awt.Rectangle var26 = var5.getBounds(var25);
    var5.hide();
    var5.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    java.awt.Graphics var16 = var5.getGraphics();
    boolean var17 = var5.isCursorSet();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    boolean var72 = var17.isAutoRequestFocus();
    java.awt.Rectangle var73 = var17.getMaximizedBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.transferFocusUpCycle();
    boolean var68 = var61.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var69 = var61.getBaselineResizeBehavior();
    var61.show();
    var61.setEnabled(false);
    boolean var73 = var61.isMinimumSizeSet();
    var2.setContentPane((java.awt.Container)var61);
    boolean var75 = var2.isAlwaysOnTop();
    boolean var76 = var2.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var13 = var5.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var19.revalidate();
    java.lang.String var21 = var19.toString();
    java.awt.Component var22 = var5.add((java.awt.Component)var19);
    tinymonkeys.vue.VueSingeErratique var28 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var29 = var28.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var41.revalidate();
    var41.setSize(0, 11);
    java.awt.Dimension var46 = var41.getMinimumSize();
    java.awt.Dimension var47 = var35.getSize(var46);
    var28.resize(var46);
    var28.disable();
    java.awt.Cursor var50 = var28.getCursor();
    var5.setCursor(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var21.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    java.awt.Color var56 = var2.getBackground();
    boolean var57 = var2.isFocusOwner();
    var2.setAlwaysOnTop(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor(10, 10);
    int var3 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var2);
    var5.positionInitiale(11, 1);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Toolkit var18 = var5.getToolkit();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var27 = var24.locate(11, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    var33.show(false);
    float var43 = var33.getAlignmentY();
    java.awt.Rectangle var44 = var33.bounds();
    java.awt.Rectangle var45 = var24.getBounds(var44);
    java.awt.Rectangle var46 = var5.getBounds(var44);
    javax.swing.TransferHandler var47 = var5.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Window var60 = var2.getOwner();
    var2.setSize(11, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.image.VolatileImage var59 = var20.createVolatileImage((-1), 10);
    javax.swing.KeyStroke[] var60 = var20.getRegisteredKeyStrokes();
    var20.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    java.awt.Component var44 = var34.locate(0, (-1));
    var34.setAlignmentX(0.5f);
    java.awt.Toolkit var47 = var34.getToolkit();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var56 = var53.locate(11, 10);
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    var62.updateUI();
    var62.show(false);
    float var72 = var62.getAlignmentY();
    java.awt.Rectangle var73 = var62.bounds();
    java.awt.Rectangle var74 = var53.getBounds(var73);
    java.awt.Rectangle var75 = var34.getBounds(var73);
    var5.scrollRectToVisible(var75);
    java.lang.String var77 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "PanelUI"+ "'", var77.equals("PanelUI"));

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    var2.repaint(100L, 3, 100, 11, (-1));
    float var65 = var2.getOpacity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1.0f);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    java.awt.Color var56 = var2.getBackground();
    boolean var57 = var2.isFocusOwner();
    var2.pack();
    var2.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var55.enable(true);
    java.awt.Toolkit var58 = var55.getToolkit();
    var55.disable();
    java.awt.Dimension var60 = var55.minimumSize();
    java.awt.FocusTraversalPolicy var61 = var55.getFocusTraversalPolicy();
    var55.firePropertyChange("hi!", true, false);
    java.awt.Dimension var66 = var55.getMinimumSize();
    var5.resize(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.Component var59 = var5.getComponentAt(1, 1);
    java.lang.String var60 = var5.getUIClassID();
    boolean var61 = var5.isVisible();
    boolean var62 = var5.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PanelUI"+ "'", var60.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    java.awt.event.HierarchyBoundsListener[] var15 = var5.getHierarchyBoundsListeners();
    javax.swing.InputVerifier var16 = var5.getInputVerifier();
    var5.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    var5.resetKeyboardActions();
    java.awt.event.ContainerListener[] var7 = var5.getContainerListeners();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    boolean var22 = var13.getAutoscrolls();
    var13.setIgnoreRepaint(true);
    java.awt.Component var26 = var5.add((java.awt.Component)var13, 0);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var45 = var44.getPeer();
    var44.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var44.repaint();
    java.lang.Object var51 = var44.getTreeLock();
    java.awt.image.ColorModel var52 = var44.getColorModel();
    var44.setLocation(100, 1);
    boolean var56 = var44.isDoubleBuffered();
    java.util.Locale var57 = var44.getLocale();
    java.awt.Dimension var58 = var44.getMaximumSize();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    java.awt.image.ColorModel var72 = var64.getColorModel();
    boolean var73 = var64.getVerifyInputWhenFocusTarget();
    int var74 = var64.getWidth();
    java.util.Locale var75 = var64.getLocale();
    var44.setLocale(var75);
    javax.swing.plaf.PanelUI var77 = var44.getUI();
    var32.setUI(var77);
    java.awt.Font var79 = var32.getFont();
    java.awt.FontMetrics var80 = var13.getFontMetrics(var79);
    var13.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    java.awt.Color var8 = var5.getForeground();
    javax.swing.KeyStroke[] var9 = var5.getRegisteredKeyStrokes();
    java.lang.String var10 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "PanelUI"+ "'", var10.equals("PanelUI"));

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Graphics var54 = var2.getGraphics();
    java.awt.im.InputContext var55 = var2.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setVisible(false);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.Component var28 = var18.locate(0, (-1));
    var18.setAlignmentX(0.5f);
    java.awt.Font var31 = var18.getFont();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var39 = var38.getUIClassID();
    float var40 = var38.getAlignmentX();
    boolean var41 = var38.isOptimizedDrawingEnabled();
    var18.putClientProperty((java.lang.Object)' ', (java.lang.Object)var41);
    tinymonkeys.vue.VueElement var48 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var49 = var48.getPeer();
    var48.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var48.repaint();
    java.lang.Object var55 = var48.getTreeLock();
    java.awt.Component var58 = var48.locate(0, (-1));
    var48.setAlignmentX(0.5f);
    java.awt.Font var61 = var48.getFont();
    java.awt.FontMetrics var62 = var18.getFontMetrics(var61);
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var74.revalidate();
    var74.setSize(0, 11);
    java.awt.Dimension var79 = var74.getMinimumSize();
    java.awt.Dimension var80 = var68.getSize(var79);
    var18.setMaximumSize(var79);
    java.awt.Dimension var82 = var5.getSize(var79);
    var5.repaint(100L);
    int var85 = var5.getHeight();
    java.awt.event.FocusListener[] var86 = var5.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "PanelUI"+ "'", var39.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    var5.setFocusable(false);
    var5.setDimensions(100, 10, 11);
    java.awt.Point var14 = var5.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var18 = var5.preferredSize();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    java.lang.Object var31 = var24.getTreeLock();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    var37.updateUI();
    int var45 = var24.getComponentZOrder((java.awt.Component)var37);
    boolean var46 = var37.isDoubleBuffered();
    java.awt.Dimension var47 = var37.size();
    java.awt.Dimension var48 = var5.getSize(var47);
    var5.firePropertyChange("hi!", 100, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    boolean var22 = var2.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var0, "");
    java.lang.String var8 = var7.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    javax.swing.KeyStroke[] var20 = var5.getRegisteredKeyStrokes();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    boolean var34 = var26.isFocusTraversalPolicyProvider();
    boolean var37 = var26.contains(10, 111);
    var5.remove((java.awt.Component)var26);
    javax.swing.JRootPane var39 = var5.getRootPane();
    java.lang.String var40 = var5.getToolTipText();
    boolean var41 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isVisible();
    boolean var8 = var5.isCursorSet();
    var5.show(true);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var16.enable(true);
    int var19 = var16.getY();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    java.awt.Color var27 = var25.getForeground();
    var5.add((java.awt.Component)var16, (java.lang.Object)var27, 0);
    var16.disable();
    javax.swing.ActionMap var31 = var16.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Pirate var4 = var2.getPirate();
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    tinymonkeys.modele.SingeErratique var9 = new tinymonkeys.modele.SingeErratique((-1), 11, var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var7.creationCarte(var12);
    tinymonkeys.modele.Ile var17 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var18 = new tinymonkeys.modele.BandeDeSingesErratiques(var17);
    tinymonkeys.modele.SingeErratique var19 = new tinymonkeys.modele.SingeErratique((-1), 11, var17);
    tinymonkeys.modele.Ile var20 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var21 = new tinymonkeys.modele.BandeDeSingesErratiques(var20);
    int[][] var22 = new int[][] { };
    var20.creationCarte(var22);
    var17.creationCarte(var22);
    var7.creationCarte(var22);
    var2.creationCarte(var22);
    var0.creationCarte(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.suppressionTresor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var0, "");
    tinymonkeys.modele.Pirate var8 = var0.getPirate();
    tinymonkeys.modele.Tresor var9 = var0.getTresor();
    tinymonkeys.modele.Pirate var11 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var0.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    int var18 = var2.getState();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var25 = var24.getUIClassID();
    boolean var26 = var24.isFontSet();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var39 = var32.isAncestorOf((java.awt.Component)var38);
    boolean var40 = var32.isFocusTraversalPolicyProvider();
    boolean var43 = var32.contains(10, 111);
    java.awt.Dimension var44 = var32.minimumSize();
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var51 = var50.getPeer();
    var50.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var50.repaint();
    java.lang.Object var57 = var50.getTreeLock();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    var63.updateUI();
    int var71 = var50.getComponentZOrder((java.awt.Component)var63);
    java.awt.Insets var72 = var50.getInsets();
    java.util.Locale var73 = var50.getLocale();
    var50.hide();
    java.awt.LayoutManager var75 = var50.getLayout();
    var32.setLayout(var75);
    java.awt.Dimension var77 = var32.getMaximumSize();
    var24.setMinimumSize(var77);
    var2.setSize(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "PanelUI"+ "'", var25.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    javax.swing.border.Border var48 = var25.getBorder();
    var25.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window.Type var18 = var2.getType();
    int var19 = var2.getCursorType();
    tinymonkeys.controleur.Controller var21 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var22 = new tinymonkeys.vue.Fenetre("PanelUI", var21);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var35 = var28.isAncestorOf((java.awt.Component)var34);
    boolean var36 = var28.isFocusTraversalPolicyProvider();
    boolean var39 = var28.contains(10, 111);
    java.awt.Dimension var40 = var28.minimumSize();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var60 = var59.getPeer();
    var59.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var59.repaint();
    var59.updateUI();
    int var67 = var46.getComponentZOrder((java.awt.Component)var59);
    java.awt.Insets var68 = var46.getInsets();
    java.util.Locale var69 = var46.getLocale();
    var46.hide();
    java.awt.LayoutManager var71 = var46.getLayout();
    var28.setLayout(var71);
    var22.setLayout(var71);
    java.awt.Color var74 = var22.getBackground();
    java.awt.Toolkit var75 = var22.getToolkit();
    javax.swing.TransferHandler var76 = var22.getTransferHandler();
    int var77 = var22.getDefaultCloseOperation();
    boolean var78 = var22.isCursorSet();
    java.util.List var79 = var22.getIconImages();
    var2.setIconImages(var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var82 = var2.getFocusTraversalKeys(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Toolkit var18 = var5.getToolkit();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var27 = var24.locate(11, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    var33.show(false);
    float var43 = var33.getAlignmentY();
    java.awt.Rectangle var44 = var33.bounds();
    java.awt.Rectangle var45 = var24.getBounds(var44);
    java.awt.Rectangle var46 = var5.getBounds(var44);
    var5.setToolTipText("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    var1.demandeDeplacement(10, 1);
    int var6 = var1.getY();
    var1.demandeDeplacement(1, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    float var19 = var5.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    javax.accessibility.AccessibleContext var3 = var2.getAccessibleContext();
    javax.swing.JRootPane var4 = var2.getRootPane();
    var2.pack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    java.awt.Color var7 = var5.getForeground();
    var5.updateUI();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    boolean var10 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    java.awt.Rectangle var26 = var5.getBounds(var25);
    boolean var27 = var5.isFocusCycleRoot();
    boolean var28 = var5.hasFocus();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var43 = var42.getUIClassID();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.transferFocusUpCycle();
    boolean var56 = var49.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    java.lang.Object var69 = var62.getTreeLock();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var76 = var75.getPeer();
    var75.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var75.repaint();
    var75.updateUI();
    int var83 = var62.getComponentZOrder((java.awt.Component)var75);
    var42.add((java.awt.Component)var49, (java.lang.Object)var62);
    boolean var85 = var34.isFocusCycleRoot((java.awt.Container)var49);
    javax.swing.event.AncestorListener[] var86 = var34.getAncestorListeners();
    java.awt.Container var87 = var34.getParent();
    boolean var88 = var5.isAncestorOf((java.awt.Component)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var18 = var5.preferredSize();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    java.lang.Object var31 = var24.getTreeLock();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    var37.updateUI();
    int var45 = var24.getComponentZOrder((java.awt.Component)var37);
    boolean var46 = var37.isDoubleBuffered();
    java.awt.Dimension var47 = var37.size();
    java.awt.Dimension var48 = var5.getSize(var47);
    int var49 = var5.getDebugGraphicsOptions();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.repaint();
    java.awt.Graphics var15 = var5.getGraphics();
    java.awt.Container var16 = var5.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setVisible(false);
    java.awt.Dimension var13 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    java.awt.Component var38 = var28.locate(0, (-1));
    var28.requestFocus();
    boolean var40 = var28.isFocusTraversable();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    java.awt.Component var56 = var46.locate(0, (-1));
    var46.setAlignmentX(0.5f);
    java.awt.Font var59 = var46.getFont();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var67 = var66.getUIClassID();
    float var68 = var66.getAlignmentX();
    boolean var69 = var66.isOptimizedDrawingEnabled();
    var46.putClientProperty((java.lang.Object)' ', (java.lang.Object)var69);
    var46.transferFocusBackward();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    java.awt.GraphicsConfiguration var84 = var77.getGraphicsConfiguration();
    var77.setFocusCycleRoot(true);
    var28.add((java.awt.Component)var46, (java.lang.Object)true);
    boolean var88 = var28.isDoubleBuffered();
    java.awt.Color var89 = var28.getForeground();
    tinymonkeys.vue.VueElement var95 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var96 = var95.getUIClassID();
    java.awt.Dimension var97 = var95.getMaximumSize();
    var28.setPreferredSize(var97);
    java.awt.Dimension var99 = var15.getSize(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "PanelUI"+ "'", var67.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "PanelUI"+ "'", var96.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var21 = new tinymonkeys.modele.Pirate(var2);
    tinymonkeys.modele.Ile var22 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var23 = var22.getSingesErratiques();
    tinymonkeys.modele.Pirate var24 = var22.getPirate();
    var22.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var30 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var31 = new tinymonkeys.modele.BandeDeSingesErratiques(var30);
    tinymonkeys.modele.SingeErratique var32 = new tinymonkeys.modele.SingeErratique((-1), 11, var30);
    tinymonkeys.modele.Ile var33 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var34 = new tinymonkeys.modele.BandeDeSingesErratiques(var33);
    int[][] var35 = new int[][] { };
    var33.creationCarte(var35);
    var30.creationCarte(var35);
    tinymonkeys.modele.Ile var38 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var39 = new tinymonkeys.modele.BandeDeSingesErratiques(var38);
    int[][] var40 = new int[][] { };
    var38.creationCarte(var40);
    var30.creationCarte(var40);
    var22.creationCarte(var40);
    var2.setCarte(var40);
    tinymonkeys.modele.Pirate var46 = new tinymonkeys.modele.Pirate(var2, "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    boolean var12 = var2.singeEstPresent(0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    var5.transferFocusDownCycle();
    var5.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    java.awt.image.ColorModel var11 = var5.getColorModel();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var24 = var17.isAncestorOf((java.awt.Component)var23);
    javax.swing.plaf.PanelUI var25 = var17.getUI();
    java.awt.Image var28 = var17.createImage(0, 1);
    var17.enable(true);
    var17.doLayout();
    javax.swing.ActionMap var32 = var17.getActionMap();
    var5.setActionMap(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    var5.validate();
    var5.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    java.awt.event.WindowListener[] var83 = var2.getWindowListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var18.revalidate();
    var18.setSize(0, 11);
    java.awt.Dimension var23 = var18.getMinimumSize();
    java.awt.Dimension var24 = var12.getSize(var23);
    var5.resize(var23);
    var5.disable();
    java.awt.image.VolatileImage var29 = var5.createVolatileImage(111, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Ile var4 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var5 = var4.getSingesErratiques();
    tinymonkeys.modele.Pirate var6 = var4.getPirate();
    tinymonkeys.modele.Ile var9 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var10 = new tinymonkeys.modele.BandeDeSingesErratiques(var9);
    tinymonkeys.modele.SingeErratique var11 = new tinymonkeys.modele.SingeErratique((-1), 11, var9);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    int[][] var14 = new int[][] { };
    var12.creationCarte(var14);
    var9.creationCarte(var14);
    tinymonkeys.modele.Ile var19 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var20 = new tinymonkeys.modele.BandeDeSingesErratiques(var19);
    tinymonkeys.modele.SingeErratique var21 = new tinymonkeys.modele.SingeErratique((-1), 11, var19);
    tinymonkeys.modele.Ile var22 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var23 = new tinymonkeys.modele.BandeDeSingesErratiques(var22);
    int[][] var24 = new int[][] { };
    var22.creationCarte(var24);
    var19.creationCarte(var24);
    var9.creationCarte(var24);
    var4.creationCarte(var24);
    var2.creationCarte(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var30 = new tinymonkeys.vue.VueCarte(0, 0, var24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    tinymonkeys.controleur.Controller var0 = new tinymonkeys.controleur.Controller();
    var0.lanceEvolutionsPersonnages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.lanceEvolutionsPersonnages();
      fail("Expected exception of type java.lang.IllegalThreadStateException");
    } catch (java.lang.IllegalThreadStateException e) {
      // Expected exception.
    }

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var44 = var37.isAncestorOf((java.awt.Component)var43);
    boolean var45 = var37.isFocusTraversalPolicyProvider();
    boolean var48 = var37.contains(10, 111);
    java.awt.Dimension var49 = var37.minimumSize();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var56 = var55.getPeer();
    var55.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var55.repaint();
    java.lang.Object var62 = var55.getTreeLock();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    var68.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var68.repaint();
    var68.updateUI();
    int var76 = var55.getComponentZOrder((java.awt.Component)var68);
    java.awt.Insets var77 = var55.getInsets();
    java.util.Locale var78 = var55.getLocale();
    var55.hide();
    java.awt.LayoutManager var80 = var55.getLayout();
    var37.setLayout(var80);
    java.awt.Dimension var82 = var37.getMaximumSize();
    var5.setPreferredSize(var82);
    java.awt.Dimension var84 = var5.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var22 = var15.isAncestorOf((java.awt.Component)var21);
    javax.swing.plaf.PanelUI var23 = var15.getUI();
    java.awt.Image var26 = var15.createImage(0, 1);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var35 = var32.locate(11, 10);
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    var41.updateUI();
    var41.show(false);
    float var51 = var41.getAlignmentY();
    java.awt.Rectangle var52 = var41.bounds();
    java.awt.Rectangle var53 = var32.getBounds(var52);
    boolean var54 = var32.isFocusCycleRoot();
    java.awt.Component var57 = var32.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isMaximumSizeSet();
    java.awt.Component var76 = var32.add((java.awt.Component)var63);
    tinymonkeys.controleur.Controller var78 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var79 = new tinymonkeys.vue.Fenetre("PanelUI", var78);
    var79.pack();
    var79.addNotify();
    java.awt.Graphics var82 = var79.getGraphics();
    var76.paintAll(var82);
    var15.paintAll(var82);
    var5.printAll(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Graphics var54 = var2.getGraphics();
    java.lang.String var55 = var2.getWarningString();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.repaint();
    java.lang.Object var68 = var61.getTreeLock();
    java.awt.image.ColorModel var69 = var61.getColorModel();
    var61.setLocation(100, 1);
    tinymonkeys.vue.VueElement var78 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var79 = var78.getUIClassID();
    javax.swing.TransferHandler var80 = var78.getTransferHandler();
    java.awt.Color var81 = var78.getForeground();
    var61.setForeground(var81);
    var2.setForeground(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "PanelUI"+ "'", var79.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.event.HierarchyBoundsListener[] var6 = var5.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isVisible();
    boolean var8 = var5.isCursorSet();
    var5.show(true);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var16.enable(true);
    int var19 = var16.getY();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    java.awt.Color var27 = var25.getForeground();
    var5.add((java.awt.Component)var16, (java.lang.Object)var27, 0);
    java.awt.Component var32 = var16.locate(11, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    java.awt.Color var56 = var2.getBackground();
    boolean var57 = var2.isFocusOwner();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.awt.GraphicsConfiguration var71 = var64.getGraphicsConfiguration();
    java.awt.Insets var72 = var64.insets();
    var64.repaint(1L);
    java.util.Set var76 = var64.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(100, var76);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var5.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Component var10 = var5.getComponentAt(0, 0);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var17 = var16.getPeer();
    var16.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var16.repaint();
    java.lang.Object var23 = var16.getTreeLock();
    java.awt.image.ColorModel var24 = var16.getColorModel();
    boolean var25 = var16.getVerifyInputWhenFocusTarget();
    var16.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var30 = var16.getBounds();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var43 = var36.isAncestorOf((java.awt.Component)var42);
    java.awt.Point var44 = var42.location();
    java.awt.Point var45 = var16.getLocation(var44);
    java.awt.Point var46 = var5.getLocation(var44);
    var5.setLocation(111, 1);
    boolean var50 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    java.awt.Container var9 = var5.getParent();
    java.awt.Graphics var10 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Point var12 = var5.getMousePosition();
    var5.setFocusTraversalKeysEnabled(false);
    java.awt.Insets var15 = var5.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    java.awt.Container var40 = var5.getTopLevelAncestor();
    java.awt.Point var41 = var5.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.getComponentAt(11, 10);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    int var36 = var28.getY();
    java.beans.VetoableChangeListener[] var37 = var28.getVetoableChangeListeners();
    var5.remove((java.awt.Component)var28);
    int var39 = var28.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition((-1), 3);
    int var6 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.transferFocusDownCycle();
    var5.doLayout();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var22 = var21.getPeer();
    var21.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var21.repaint();
    java.lang.Object var28 = var21.getTreeLock();
    java.awt.image.ColorModel var29 = var21.getColorModel();
    var21.setLocation(100, 1);
    boolean var33 = var21.isDoubleBuffered();
    java.util.Locale var34 = var21.getLocale();
    java.awt.Dimension var35 = var21.getMaximumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.image.ColorModel var49 = var41.getColorModel();
    boolean var50 = var41.getVerifyInputWhenFocusTarget();
    int var51 = var41.getWidth();
    java.util.Locale var52 = var41.getLocale();
    var21.setLocale(var52);
    javax.swing.JComponent.setDefaultLocale(var52);
    javax.swing.JComponent.setDefaultLocale(var52);
    var5.setLocale(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    boolean var54 = var2.getFocusableWindowState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    boolean var10 = var2.isResizable();
    java.awt.Shape var11 = var2.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.isShowing();
    var5.repaint(0L);
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var20 = var17.locate(11, 10);
    java.awt.Container var21 = var17.getParent();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var46.enable(true);
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var55 = var54.getUIClassID();
    javax.swing.TransferHandler var56 = var54.getTransferHandler();
    java.awt.Color var57 = var54.getForeground();
    var46.setBackground(var57);
    var27.setForeground(var57);
    var17.setBackground(var57);
    boolean var61 = var5.isAncestorOf((java.awt.Component)var17);
    var17.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    tinymonkeys.modele.Pirate var73 = new tinymonkeys.modele.Pirate(var2, "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");
    var73.demandeDeplacement(10, 10);
    java.lang.String var77 = var73.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]"+ "'", var77.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    boolean var11 = var5.getIgnoreRepaint();
    boolean var12 = var5.getIgnoreRepaint();
    java.lang.String var13 = var5.getToolTipText();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    var20.updateUI();
    var20.show(false);
    float var30 = var20.getAlignmentY();
    java.awt.Rectangle var31 = var20.bounds();
    int var32 = var20.getDebugGraphicsOptions();
    java.lang.Object var33 = var20.getTreeLock();
    java.awt.Component var34 = var5.add("PanelUI", (java.awt.Component)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.transferFocusDownCycle();
    var5.doLayout();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var22 = var21.getPeer();
    var21.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var21.repaint();
    var21.updateUI();
    var21.show(false);
    float var31 = var21.getAlignmentY();
    java.awt.Rectangle var32 = var21.bounds();
    var5.repaint(var32);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.isShowing();
    var5.repaint(0L);
    java.awt.Component var12 = var5.getNextFocusableComponent();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var18.enable(true);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var27 = var26.getUIClassID();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.transferFocusUpCycle();
    boolean var40 = var33.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var60 = var59.getPeer();
    var59.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var59.repaint();
    var59.updateUI();
    int var67 = var46.getComponentZOrder((java.awt.Component)var59);
    var26.add((java.awt.Component)var33, (java.lang.Object)var46);
    boolean var69 = var18.isFocusCycleRoot((java.awt.Container)var33);
    int var70 = var18.getHeight();
    tinymonkeys.vue.VueElement var76 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var77 = var76.getPeer();
    var76.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var76.repaint();
    java.lang.Object var83 = var76.getTreeLock();
    java.awt.image.ColorModel var84 = var76.getColorModel();
    var76.setLocation(100, 1);
    boolean var88 = var76.isDoubleBuffered();
    java.util.Locale var89 = var76.getLocale();
    var18.setLocale(var89);
    java.awt.ComponentOrientation var91 = var18.getComponentOrientation();
    var5.setComponentOrientation(var91);
    java.lang.String var93 = var5.getToolTipText();
    boolean var94 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "PanelUI"+ "'", var27.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.event.AncestorListener[] var57 = var5.getAncestorListeners();
    var5.firePropertyChange("", (short)10, (short)(-1));
    java.awt.im.InputContext var62 = var5.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    boolean var11 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    var5.setAutoscrolls(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window.Type var18 = var2.getType();
    int var19 = var2.getCursorType();
    boolean var20 = var2.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.locate(111, 111);
    var5.reshape(1, 1, (-1), 11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var29 = var5.getFocusTraversalKeys(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    boolean var72 = var17.isAutoRequestFocus();
    boolean var73 = var17.isAlwaysOnTopSupported();
    java.lang.String var74 = var17.getWarningString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    boolean var7 = var6.isOpaque();
    tinymonkeys.vue.VuePirate var14 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    var14.mortPirate();
    java.awt.Insets var16 = var14.insets();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var29 = var22.isAncestorOf((java.awt.Component)var28);
    javax.swing.plaf.PanelUI var30 = var22.getUI();
    java.awt.Image var33 = var22.createImage(0, 1);
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var42 = var39.locate(11, 10);
    tinymonkeys.vue.VueElement var48 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var49 = var48.getPeer();
    var48.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var48.repaint();
    var48.updateUI();
    var48.show(false);
    float var58 = var48.getAlignmentY();
    java.awt.Rectangle var59 = var48.bounds();
    java.awt.Rectangle var60 = var39.getBounds(var59);
    boolean var61 = var39.isFocusCycleRoot();
    java.awt.Component var64 = var39.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var71 = var70.getPeer();
    var70.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var70.repaint();
    java.lang.Object var77 = var70.getTreeLock();
    java.awt.image.ColorModel var78 = var70.getColorModel();
    var70.setLocation(100, 1);
    boolean var82 = var70.isMaximumSizeSet();
    java.awt.Component var83 = var39.add((java.awt.Component)var70);
    tinymonkeys.controleur.Controller var85 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var86 = new tinymonkeys.vue.Fenetre("PanelUI", var85);
    var86.pack();
    var86.addNotify();
    java.awt.Graphics var89 = var86.getGraphics();
    var83.paintAll(var89);
    var22.paintAll(var89);
    var14.dessineElement(var89);
    var6.dessineElement(var89);
    boolean var94 = var6.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setBounds((-1), 1, 111, 3);
    java.awt.Component var65 = var2.getFocusOwner();
    java.awt.Component var66 = var2.getGlassPane();
    boolean var67 = var2.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.image.VolatileImage var59 = var20.createVolatileImage((-1), 10);
    javax.swing.KeyStroke[] var60 = var20.getRegisteredKeyStrokes();
    java.awt.Dimension var61 = var20.getMinimumSize();
    boolean var62 = var20.isPaintingTile();
    javax.swing.border.Border var63 = var20.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    javax.swing.event.EventListenerList var3 = var1.getPirateEcouteurs();
    tinymonkeys.controleur.Controller var5 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var6 = new tinymonkeys.vue.Fenetre("PanelUI", var5);
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var19 = var12.isAncestorOf((java.awt.Component)var18);
    boolean var20 = var12.isFocusTraversalPolicyProvider();
    boolean var23 = var12.contains(10, 111);
    java.awt.Dimension var24 = var12.minimumSize();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    var43.updateUI();
    int var51 = var30.getComponentZOrder((java.awt.Component)var43);
    java.awt.Insets var52 = var30.getInsets();
    java.util.Locale var53 = var30.getLocale();
    var30.hide();
    java.awt.LayoutManager var55 = var30.getLayout();
    var12.setLayout(var55);
    var6.setLayout(var55);
    java.awt.Color var58 = var6.getBackground();
    java.awt.Toolkit var59 = var6.getToolkit();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var72 = var65.isAncestorOf((java.awt.Component)var71);
    javax.swing.plaf.PanelUI var73 = var65.getUI();
    java.awt.Image var76 = var65.createImage(0, 1);
    var65.enable(true);
    java.awt.Color var79 = var65.getBackground();
    var6.setBackground(var79);
    var6.setLocation(111, 10);
    java.awt.Container var84 = var6.getFocusCycleRootAncestor();
    var6.setState(0);
    boolean var87 = var6.isResizable();
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var6);
    var6.transferFocusUpCycle();
    var6.dispose();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    boolean var29 = var17.isDoubleBuffered();
    java.util.Locale var30 = var17.getLocale();
    java.awt.Dimension var31 = var17.getMaximumSize();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    int var47 = var37.getWidth();
    java.util.Locale var48 = var37.getLocale();
    var17.setLocale(var48);
    javax.swing.plaf.PanelUI var50 = var17.getUI();
    var5.setUI(var50);
    java.awt.Font var52 = var5.getFont();
    boolean var53 = var5.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    java.awt.event.HierarchyBoundsListener[] var15 = var5.getHierarchyBoundsListeners();
    javax.swing.InputVerifier var16 = var5.getInputVerifier();
    javax.accessibility.AccessibleContext var17 = var5.getAccessibleContext();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var23.enable(true);
    int var26 = var23.getY();
    boolean var27 = var23.isValid();
    java.awt.Toolkit var28 = var23.getToolkit();
    var23.setVisible(false);
    java.awt.event.MouseListener[] var31 = var23.getMouseListeners();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var64 = var57.isAncestorOf((java.awt.Component)var63);
    java.awt.Point var65 = var63.location();
    java.awt.Point var66 = var37.getLocation(var65);
    java.awt.Point var67 = var23.getLocation(var66);
    java.awt.Component var68 = var5.findComponentAt(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Rectangle var31 = var5.bounds();
    boolean var32 = var5.getInheritsPopupMenu();
    int var33 = var5.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window.Type var18 = var2.getType();
    int var19 = var2.getCursorType();
    boolean var20 = var2.getFocusableWindowState();
    java.awt.event.WindowStateListener[] var21 = var2.getWindowStateListeners();
    java.awt.Graphics var22 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var36.enable(true);
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var45 = var44.getUIClassID();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.transferFocusUpCycle();
    boolean var58 = var51.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    var77.updateUI();
    int var85 = var64.getComponentZOrder((java.awt.Component)var77);
    var44.add((java.awt.Component)var51, (java.lang.Object)var64);
    boolean var87 = var36.isFocusCycleRoot((java.awt.Container)var51);
    boolean var88 = var5.isAncestorOf((java.awt.Component)var51);
    var5.nextFocus();
    boolean var90 = var5.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "PanelUI"+ "'", var45.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    boolean var65 = var2.isAutoRequestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var67 = var2.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    java.awt.Color var66 = var5.getForeground();
    javax.swing.JPopupMenu var67 = var5.getComponentPopupMenu();
    boolean var68 = var5.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    boolean var32 = var19.hasFocus();
    var19.requestFocus();
    java.awt.Toolkit var34 = var19.getToolkit();
    int var35 = var19.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    javax.swing.JLayeredPane var18 = var2.getLayeredPane();
    tinymonkeys.modele.Ile var23 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var24 = new tinymonkeys.modele.BandeDeSingesErratiques(var23);
    tinymonkeys.modele.SingeErratique var25 = new tinymonkeys.modele.SingeErratique((-1), 11, var23);
    tinymonkeys.modele.Ile var26 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var27 = new tinymonkeys.modele.BandeDeSingesErratiques(var26);
    int[][] var28 = new int[][] { };
    var26.creationCarte(var28);
    var23.creationCarte(var28);
    tinymonkeys.modele.Ile var33 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var34 = new tinymonkeys.modele.BandeDeSingesErratiques(var33);
    tinymonkeys.modele.SingeErratique var35 = new tinymonkeys.modele.SingeErratique((-1), 11, var33);
    tinymonkeys.modele.Ile var36 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var37 = new tinymonkeys.modele.BandeDeSingesErratiques(var36);
    int[][] var38 = new int[][] { };
    var36.creationCarte(var38);
    var33.creationCarte(var38);
    var23.creationCarte(var38);
    tinymonkeys.modele.Pirate var42 = new tinymonkeys.modele.Pirate(var23);
    tinymonkeys.modele.Ile var43 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var44 = var43.getSingesErratiques();
    tinymonkeys.modele.Pirate var45 = var43.getPirate();
    var43.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var51 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var52 = new tinymonkeys.modele.BandeDeSingesErratiques(var51);
    tinymonkeys.modele.SingeErratique var53 = new tinymonkeys.modele.SingeErratique((-1), 11, var51);
    tinymonkeys.modele.Ile var54 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var55 = new tinymonkeys.modele.BandeDeSingesErratiques(var54);
    int[][] var56 = new int[][] { };
    var54.creationCarte(var56);
    var51.creationCarte(var56);
    tinymonkeys.modele.Ile var59 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var60 = new tinymonkeys.modele.BandeDeSingesErratiques(var59);
    int[][] var61 = new int[][] { };
    var59.creationCarte(var61);
    var51.creationCarte(var61);
    var43.creationCarte(var61);
    var23.setCarte(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.GestionImages var66 = new tinymonkeys.vue.GestionImages(var18, 100, (-1), var61);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    var5.setBounds(0, (-1), 1, 111);
    var5.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.firePropertyChange("hi!", 'a', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var20 = var13.isAncestorOf((java.awt.Component)var19);
    boolean var21 = var13.isFocusTraversalPolicyProvider();
    boolean var24 = var13.contains(10, 111);
    java.awt.Dimension var25 = var13.minimumSize();
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var32 = var31.getPeer();
    var31.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var31.repaint();
    java.lang.Object var38 = var31.getTreeLock();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var45 = var44.getPeer();
    var44.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var44.repaint();
    var44.updateUI();
    int var52 = var31.getComponentZOrder((java.awt.Component)var44);
    java.awt.Insets var53 = var31.getInsets();
    java.util.Locale var54 = var31.getLocale();
    var31.hide();
    java.awt.LayoutManager var56 = var31.getLayout();
    var13.setLayout(var56);
    java.awt.Dimension var58 = var13.getMaximumSize();
    var5.setMinimumSize(var58);
    java.awt.Font var60 = var5.getFont();
    var5.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    var5.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    var5.setFocusable(false);
    var5.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var22 = new tinymonkeys.modele.Pirate(var2, "hi!");
    tinymonkeys.modele.BandeDeSingesErratiques var23 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.ajoutSingesErratiques(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    var20.disable();
    int var58 = var20.getY();
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    java.awt.image.ColorModel var72 = var64.getColorModel();
    boolean var73 = var64.getVerifyInputWhenFocusTarget();
    var64.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var78 = var64.getBounds();
    tinymonkeys.vue.VueElement var84 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var90 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var91 = var84.isAncestorOf((java.awt.Component)var90);
    java.awt.Point var92 = var90.location();
    java.awt.Point var93 = var64.getLocation(var92);
    boolean var94 = var20.contains(var93);
    var20.setDebugGraphicsOptions(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.createBufferStrategy((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    java.awt.Color var56 = var2.getBackground();
    boolean var57 = var2.isFocusOwner();
    var2.setSize(11, 111);
    java.awt.Image var61 = var2.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor(111, (-1));

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    boolean var83 = var2.isResizable();
    boolean var84 = var2.isFocusCycleRoot();
    var2.toFront();
    var2.setState(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.event.FocusListener[] var8 = var5.getFocusListeners();
    var5.setPosition((-1), (-1));
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    boolean var29 = var17.isDoubleBuffered();
    java.util.Locale var30 = var17.getLocale();
    java.awt.Dimension var31 = var17.getMaximumSize();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    int var47 = var37.getWidth();
    java.util.Locale var48 = var37.getLocale();
    var17.setLocale(var48);
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var62 = var55.isAncestorOf((java.awt.Component)var61);
    java.awt.Point var63 = var61.location();
    java.awt.Point var64 = var17.getLocation(var63);
    var5.setLocation(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    var5.transferFocus();
    boolean var32 = var5.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    java.awt.Color var7 = var5.getForeground();
    var5.updateUI();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    var28.updateUI();
    int var36 = var15.getComponentZOrder((java.awt.Component)var28);
    boolean var37 = var28.isDoubleBuffered();
    java.awt.Dimension var38 = var28.size();
    var28.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 'a', ' ');
    java.awt.event.HierarchyListener[] var43 = var28.getHierarchyListeners();
    java.awt.Dimension var44 = var28.getMaximumSize();
    var28.setSize(1, 111);
    java.awt.Dimension var48 = var28.getMinimumSize();
    var5.setPreferredSize(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    var11.addNotify();
    java.awt.event.MouseMotionListener[] var15 = var11.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    java.awt.event.HierarchyListener[] var42 = var34.getHierarchyListeners();
    boolean var43 = var22.isAncestorOf((java.awt.Component)var34);
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var51 = var50.getPeer();
    var50.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var50.repaint();
    java.awt.GraphicsConfiguration var57 = var50.getGraphicsConfiguration();
    java.awt.Insets var58 = var50.insets();
    var50.repaint(1L);
    java.util.Set var62 = var50.getFocusTraversalKeys(0);
    var22.setFocusTraversalKeys(0, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setFocusTraversalKeys(1, var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    var1.demandeDeplacement(10, (-1));
    int var6 = var1.getX();
    tinymonkeys.modele.Ile var9 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var10 = new tinymonkeys.modele.BandeDeSingesErratiques(var9);
    tinymonkeys.modele.SingeErratique var11 = new tinymonkeys.modele.SingeErratique((-1), 11, var9);
    tinymonkeys.modele.Tresor var12 = var9.getTresor();
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    tinymonkeys.modele.SingeErratique var17 = new tinymonkeys.modele.SingeErratique((-1), 11, var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var15.creationCarte(var20);
    tinymonkeys.modele.Ile var23 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var24 = new tinymonkeys.modele.BandeDeSingesErratiques(var23);
    int[][] var25 = new int[][] { };
    var23.creationCarte(var25);
    var15.creationCarte(var25);
    tinymonkeys.controleur.Controller var29 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var30 = new tinymonkeys.vue.Fenetre("PanelUI", var29);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var43 = var36.isAncestorOf((java.awt.Component)var42);
    boolean var44 = var36.isFocusTraversalPolicyProvider();
    boolean var47 = var36.contains(10, 111);
    java.awt.Dimension var48 = var36.minimumSize();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var68 = var67.getPeer();
    var67.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var67.repaint();
    var67.updateUI();
    int var75 = var54.getComponentZOrder((java.awt.Component)var67);
    java.awt.Insets var76 = var54.getInsets();
    java.util.Locale var77 = var54.getLocale();
    var54.hide();
    java.awt.LayoutManager var79 = var54.getLayout();
    var36.setLayout(var79);
    var30.setLayout(var79);
    java.awt.Color var82 = var30.getBackground();
    java.awt.MenuBar var83 = var30.getMenuBar();
    var15.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var30);
    var9.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var30);
    var30.setFocusableWindowState(false);
    tinymonkeys.vue.VueElement var93 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var93.enable(true);
    int var96 = var93.getY();
    var30.setGlassPane((java.awt.Component)var93);
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var30);
    java.awt.Dimension var99 = var30.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    java.awt.Dimension var16 = var5.getPreferredSize();
    boolean var17 = var5.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.transferFocusDownCycle();
    boolean var79 = var5.isMinimumSizeSet();
    int var80 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    var5.setVisible(true);
    boolean var70 = var5.contains(1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    javax.swing.ActionMap var9 = var5.getActionMap();
    float var10 = var5.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    var5.firePropertyChange("", false, true);
    java.awt.Dimension var54 = var5.getSize();
    tinymonkeys.vue.VueTresor var60 = new tinymonkeys.vue.VueTresor(11, (-1), (-1), 100, 100);
    boolean var63 = var60.inside(111, 10);
    boolean var64 = var5.isFocusCycleRoot((java.awt.Container)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    int var3 = var1.getX();
    var1.positionInitiale((-1), 10);
    var1.setAvatar("PanelUI");
    var1.setAvatar("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    int var13 = var5.getY();
    java.beans.VetoableChangeListener[] var14 = var5.getVetoableChangeListeners();
    var5.setToolTipText("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '4', '4');
    boolean var23 = var5.inside(10, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var19 = var18.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var20 = var18.getSingesErratiques();
    java.util.Vector var21 = var20.getSingesErratiques();
    var2.setIconImages((java.util.List)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.controleur.Controller var11 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var12 = new tinymonkeys.vue.Fenetre("PanelUI", var11);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var25 = var18.isAncestorOf((java.awt.Component)var24);
    boolean var26 = var18.isFocusTraversalPolicyProvider();
    boolean var29 = var18.contains(10, 111);
    java.awt.Dimension var30 = var18.minimumSize();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    java.awt.Insets var58 = var36.getInsets();
    java.util.Locale var59 = var36.getLocale();
    var36.hide();
    java.awt.LayoutManager var61 = var36.getLayout();
    var18.setLayout(var61);
    var12.setLayout(var61);
    java.awt.Color var64 = var12.getBackground();
    java.awt.Toolkit var65 = var12.getToolkit();
    javax.swing.TransferHandler var66 = var12.getTransferHandler();
    int var67 = var12.getDefaultCloseOperation();
    var12.setResizable(false);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var12);
    java.awt.event.HierarchyListener[] var71 = var12.getHierarchyListeners();
    java.awt.image.BufferStrategy var72 = var12.getBufferStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    java.beans.PropertyChangeListener[] var73 = var17.getPropertyChangeListeners("");
    int var74 = var17.getDefaultCloseOperation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 3);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    boolean var23 = var15.getVerifyInputWhenFocusTarget();
    java.awt.peer.ComponentPeer var24 = var15.getPeer();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    var43.updateUI();
    int var51 = var30.getComponentZOrder((java.awt.Component)var43);
    java.awt.Insets var52 = var30.getInsets();
    java.util.Locale var53 = var30.getLocale();
    var30.hide();
    java.awt.LayoutManager var55 = var30.getLayout();
    java.awt.Dimension var56 = var30.size();
    java.awt.Dimension var57 = var30.size();
    java.awt.Rectangle var58 = var30.getVisibleRect();
    java.awt.Rectangle var59 = var15.getBounds(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.transferFocusDownCycle();
    var5.doLayout();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var22 = var21.getPeer();
    var21.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var21.repaint();
    java.lang.Object var28 = var21.getTreeLock();
    java.awt.image.ColorModel var29 = var21.getColorModel();
    var21.setLocation(100, 1);
    boolean var33 = var21.isDoubleBuffered();
    java.util.Locale var34 = var21.getLocale();
    java.awt.Dimension var35 = var21.getMaximumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.image.ColorModel var49 = var41.getColorModel();
    boolean var50 = var41.getVerifyInputWhenFocusTarget();
    int var51 = var41.getWidth();
    java.util.Locale var52 = var41.getLocale();
    var21.setLocale(var52);
    javax.swing.JComponent.setDefaultLocale(var52);
    javax.swing.JComponent.setDefaultLocale(var52);
    var5.setLocale(var52);
    java.awt.image.ColorModel var57 = var5.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

}
