package randoop;

import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test1");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.Dimension var48 = var12.getMinimumSize();
    var12.enable();
    java.awt.Component var50 = var12.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test2");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.isShowing();
    var5.repaint(0L);
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var20 = var17.locate(11, 10);
    java.awt.Container var21 = var17.getParent();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var46.enable(true);
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var55 = var54.getUIClassID();
    javax.swing.TransferHandler var56 = var54.getTransferHandler();
    java.awt.Color var57 = var54.getForeground();
    var46.setBackground(var57);
    var27.setForeground(var57);
    var17.setBackground(var57);
    boolean var61 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var62 = var17.isFocusCycleRoot();
    boolean var63 = var17.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test3");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    java.awt.event.InputMethodListener[] var27 = var5.getInputMethodListeners();
    var5.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test4");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    boolean var21 = var5.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test5");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isShowing();
    int var9 = var5.getX();
    var5.grabFocus();
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var23 = var16.isAncestorOf((java.awt.Component)var22);
    boolean var24 = var16.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var25 = var16.getMouseMotionListeners();
    javax.swing.ActionMap var26 = var16.getActionMap();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.repaint();
    java.lang.Object var39 = var32.getTreeLock();
    java.awt.Component var42 = var32.locate(0, (-1));
    var32.setAlignmentX(0.5f);
    java.awt.Font var45 = var32.getFont();
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var53 = var52.getUIClassID();
    float var54 = var52.getAlignmentX();
    boolean var55 = var52.isOptimizedDrawingEnabled();
    var32.putClientProperty((java.lang.Object)' ', (java.lang.Object)var55);
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    java.lang.Object var69 = var62.getTreeLock();
    java.awt.Component var72 = var62.locate(0, (-1));
    var62.setAlignmentX(0.5f);
    java.awt.Font var75 = var62.getFont();
    java.awt.FontMetrics var76 = var32.getFontMetrics(var75);
    java.awt.FontMetrics var77 = var16.getFontMetrics(var75);
    java.awt.FontMetrics var78 = var5.getFontMetrics(var75);
    boolean var79 = var5.isRequestFocusEnabled();
    var5.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "PanelUI"+ "'", var53.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test6");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.Dimension var8 = var5.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test7");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.hide();
    java.util.Locale var79 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test8");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.show(false);
    var5.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test9");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(100, 0, 0, 0, 111);
    tinymonkeys.vue.VueSingeErratique var11 = new tinymonkeys.vue.VueSingeErratique(11, 10, 0, 0, 100);
    java.awt.Container var12 = var11.getTopLevelAncestor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setComponentZOrder((java.awt.Component)var11, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test10");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    var35.updateUI();
    var35.show(false);
    float var45 = var35.getAlignmentY();
    boolean var46 = var5.isAncestorOf((java.awt.Component)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test11");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setAlwaysOnTop(true);
    var2.setOpacity(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test12");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    java.lang.String var7 = var5.toString();
    var5.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test13");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    var1.demandeDeplacement(10, (-1));
    int var6 = var1.getX();
    int var7 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test14");


    tinymonkeys.controleur.Controller var0 = new tinymonkeys.controleur.Controller();
    var0.lanceEvolutionsPersonnages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.demandeDeplacementPirate(3, 10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test15");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    int var48 = var25.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 111);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test16");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    javax.swing.InputMap var15 = var5.getInputMap();
    tinymonkeys.vue.VueTresor var21 = new tinymonkeys.vue.VueTresor(11, (-1), (-1), 100, 100);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var34 = var27.isAncestorOf((java.awt.Component)var33);
    boolean var35 = var27.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var36 = var27.getMouseMotionListeners();
    javax.swing.ActionMap var37 = var27.getActionMap();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.Component var53 = var43.locate(0, (-1));
    var43.setAlignmentX(0.5f);
    java.awt.Font var56 = var43.getFont();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var64 = var63.getUIClassID();
    float var65 = var63.getAlignmentX();
    boolean var66 = var63.isOptimizedDrawingEnabled();
    var43.putClientProperty((java.lang.Object)' ', (java.lang.Object)var66);
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var74 = var73.getPeer();
    var73.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var73.repaint();
    java.lang.Object var80 = var73.getTreeLock();
    java.awt.Component var83 = var73.locate(0, (-1));
    var73.setAlignmentX(0.5f);
    java.awt.Font var86 = var73.getFont();
    java.awt.FontMetrics var87 = var43.getFontMetrics(var86);
    java.awt.FontMetrics var88 = var27.getFontMetrics(var86);
    java.awt.FontMetrics var89 = var21.getFontMetrics(var86);
    var5.setFont(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "PanelUI"+ "'", var64.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test17");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    int var37 = var34.getY();
    boolean var38 = var34.isValid();
    java.awt.Toolkit var39 = var34.getToolkit();
    var34.setVisible(false);
    java.awt.event.MouseListener[] var42 = var34.getMouseListeners();
    tinymonkeys.vue.VueElement var48 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var49 = var48.getPeer();
    var48.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var48.repaint();
    java.lang.Object var55 = var48.getTreeLock();
    java.awt.image.ColorModel var56 = var48.getColorModel();
    boolean var57 = var48.getVerifyInputWhenFocusTarget();
    var48.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var62 = var48.getBounds();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var75 = var68.isAncestorOf((java.awt.Component)var74);
    java.awt.Point var76 = var74.location();
    java.awt.Point var77 = var48.getLocation(var76);
    java.awt.Point var78 = var34.getLocation(var77);
    java.awt.Component var79 = var5.findComponentAt(var78);
    java.awt.Graphics var80 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test18");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.isFontSet();
    var17.setToolTipText("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test19");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor(11, 111);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test20");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.requestFocusInWindow();
    java.awt.Component var31 = var5.locate(0, 1);
    java.awt.Rectangle var32 = var5.getVisibleRect();
    var5.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var35 = var34.getUIClassID();
    javax.swing.TransferHandler var36 = var34.getTransferHandler();
    java.awt.Color var37 = var34.getForeground();
    var17.setForeground(var37);
    boolean var39 = var17.getIgnoreRepaint();
    java.awt.Component var40 = var5.add("PanelUI", (java.awt.Component)var17);
    java.awt.event.MouseListener[] var41 = var17.getMouseListeners();
    boolean var44 = var17.inside(0, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test22");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var80 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test23");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var15.revalidate();
    var15.setSize(0, 11);
    java.awt.Dimension var20 = var15.getMinimumSize();
    boolean var21 = var15.getAutoscrolls();
    float var22 = var15.getAlignmentX();
    int var23 = var15.getX();
    java.awt.Rectangle var24 = var15.bounds();
    java.awt.Rectangle var25 = var5.getBounds(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test24");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var2.setAvatar("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    java.lang.String var5 = var2.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var5.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test25");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    java.awt.Toolkit var62 = var59.getToolkit();
    java.awt.Component var64 = var5.add((java.awt.Component)var59, 0);
    java.lang.String var65 = var64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var65.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test26");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("hi!", 1, 11);
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test27");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var12 = var11.getPeer();
    var11.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var11.repaint();
    var11.updateUI();
    java.awt.Cursor var19 = var11.getCursor();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    java.awt.peer.ComponentPeer var27 = var25.getPeer();
    java.beans.VetoableChangeListener[] var28 = var25.getVetoableChangeListeners();
    int var29 = var25.getWidth();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var35.enable(true);
    var35.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var50 = var47.locate(11, 10);
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    var56.updateUI();
    var56.show(false);
    float var66 = var56.getAlignmentY();
    java.awt.Rectangle var67 = var56.bounds();
    java.awt.Rectangle var68 = var47.getBounds(var67);
    var35.computeVisibleRect(var68);
    var25.repaint(var68);
    var11.setBounds(var68);
    boolean var72 = var5.isAncestorOf((java.awt.Component)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test28");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    javax.swing.plaf.PanelUI var15 = var5.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test29");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    boolean var31 = var5.getAutoscrolls();
    boolean var32 = var5.isFontSet();
    var5.reshape(111, (-1), 1, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test30");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var43 = var5.getMaximumSize();
    var5.firePropertyChange("PanelUI", '#', 'a');
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var54 = var53.getPeer();
    javax.swing.InputMap var56 = var53.getInputMap(0);
    boolean var57 = var53.isShowing();
    java.awt.dnd.DropTarget var58 = var53.getDropTarget();
    java.awt.Dimension var59 = var53.getMaximumSize();
    var5.setPreferredSize(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test31");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(11, 100, 11, 3, 1);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test32");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setResizable(false);
    var2.liberationClavier();
    var2.firePropertyChange("PanelUI", (-1.0f), 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test33");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(111, 11, 11, 111, 0);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test34");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.event.AncestorListener[] var57 = var5.getAncestorListeners();
    var5.setDimensions((-1), 10, 11);
    java.awt.Dimension var62 = var5.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test35");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var9 = var5.getBaselineResizeBehavior();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.Component var25 = var15.locate(0, (-1));
    var15.requestFocus();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.repaint();
    java.lang.Object var39 = var32.getTreeLock();
    java.awt.image.ColorModel var40 = var32.getColorModel();
    boolean var41 = var32.getVerifyInputWhenFocusTarget();
    var32.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var46 = var32.getBounds();
    var15.paintImmediately(var46);
    boolean var48 = var15.requestFocusInWindow();
    var15.firePropertyChange("hi!", 'a', 'a');
    java.awt.LayoutManager var53 = var15.getLayout();
    var5.setLayout(var53);
    tinymonkeys.controleur.Controller var58 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var59 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var58);
    tinymonkeys.vue.Fenetre var60 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var58);
    tinymonkeys.vue.Fenetre var61 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var58);
    var5.addKeyListener((java.awt.event.KeyListener)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test36");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.Component var47 = var37.locate(0, (-1));
    var37.requestFocus();
    boolean var49 = var37.isFocusTraversable();
    java.awt.event.InputMethodListener[] var50 = var37.getInputMethodListeners();
    boolean var51 = var37.isMaximumSizeSet();
    java.awt.Component var54 = var37.getComponentAt(11, 10);
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    int var68 = var60.getY();
    java.beans.VetoableChangeListener[] var69 = var60.getVetoableChangeListeners();
    var37.remove((java.awt.Component)var60);
    java.awt.Rectangle var71 = var60.bounds();
    var5.scrollRectToVisible(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test37");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    boolean var16 = var5.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test38");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    java.awt.im.InputMethodRequests var20 = var5.getInputMethodRequests();
    java.lang.String var21 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PanelUI"+ "'", var21.equals("PanelUI"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test39");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(11, 1, 1, 3, 11, "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test40");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var54 = var53.getPeer();
    var53.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var53.repaint();
    java.lang.Object var60 = var53.getTreeLock();
    java.awt.Component var63 = var53.locate(0, (-1));
    var53.setAlignmentX(0.5f);
    java.awt.Font var66 = var53.getFont();
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var74 = var73.getUIClassID();
    float var75 = var73.getAlignmentX();
    boolean var76 = var73.isOptimizedDrawingEnabled();
    var53.putClientProperty((java.lang.Object)' ', (java.lang.Object)var76);
    tinymonkeys.vue.VueElement var83 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var84 = var83.getPeer();
    var83.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var83.repaint();
    java.lang.Object var90 = var83.getTreeLock();
    java.awt.Component var93 = var83.locate(0, (-1));
    var83.setAlignmentX(0.5f);
    java.awt.Font var96 = var83.getFont();
    java.awt.FontMetrics var97 = var53.getFontMetrics(var96);
    var37.setNextFocusableComponent((java.awt.Component)var53);
    var53.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "PanelUI"+ "'", var74.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test41");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    int var7 = var5.getHeight();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    var13.setLocation(100, 1);
    boolean var25 = var13.isDoubleBuffered();
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var32 = var31.getPeer();
    var31.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var31.repaint();
    java.lang.Object var38 = var31.getTreeLock();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var45 = var44.getPeer();
    var44.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var44.repaint();
    var44.updateUI();
    int var52 = var31.getComponentZOrder((java.awt.Component)var44);
    tinymonkeys.vue.VueElement var58 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var59 = var58.getPeer();
    var58.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var58.transferFocusUpCycle();
    boolean var65 = var58.getInheritsPopupMenu();
    java.awt.Dimension var66 = var58.minimumSize();
    java.awt.Dimension var67 = var44.getSize(var66);
    var13.setSize(var66);
    var5.setPreferredSize(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test42");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.Insets var18 = var5.insets();
    javax.swing.JRootPane var19 = var5.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test43");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    boolean var65 = var2.isAutoRequestFocus();
    int var66 = var2.getState();
    var2.repaint(100L, (-1), 111, 0, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test44");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    java.util.Locale var58 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test45");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    var5.reshape((-1), 1, (-1), 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test46");


    tinymonkeys.controleur.Controller var2 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var3 = new tinymonkeys.vue.Fenetre("PanelUI", var2);
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.demandeDeplacementPirate(1, 111);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test47");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    var10.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var10.repaint();
    java.lang.Object var17 = var10.getTreeLock();
    java.awt.Component var20 = var10.locate(0, (-1));
    var10.setAlignmentX(0.5f);
    java.awt.Font var23 = var10.getFont();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var31 = var30.getUIClassID();
    float var32 = var30.getAlignmentX();
    boolean var33 = var30.isOptimizedDrawingEnabled();
    var10.putClientProperty((java.lang.Object)' ', (java.lang.Object)var33);
    var10.transferFocusBackward();
    java.awt.Dimension var36 = var10.getSize();
    var2.setSize(var36);
    java.awt.Container var38 = var2.getContentPane();
    var2.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test48");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    var5.setLocation(1, 11);
    var5.firePropertyChange("", 100.0f, 0.5f);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '#', 'a');
    var5.firePropertyChange("", '#', 'a');
    boolean var27 = var5.isDisplayable();
    java.awt.Component var28 = var5.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test49");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    java.awt.Dimension var16 = var5.getPreferredSize();
    java.awt.Component var19 = var5.getComponentAt(1, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test50");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var12 = var11.getPeer();
    var11.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var11.repaint();
    java.lang.Object var18 = var11.getTreeLock();
    java.awt.Component var21 = var11.locate(0, (-1));
    var11.requestFocus();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    java.awt.image.ColorModel var36 = var28.getColorModel();
    boolean var37 = var28.getVerifyInputWhenFocusTarget();
    var28.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var42 = var28.getBounds();
    var11.paintImmediately(var42);
    var5.setBounds(var42);
    boolean var45 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test51");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.list();
    boolean var17 = var5.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test52");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(11, (-1), (-1), 100, 100);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var18 = var11.isAncestorOf((java.awt.Component)var17);
    boolean var19 = var11.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var20 = var11.getMouseMotionListeners();
    javax.swing.ActionMap var21 = var11.getActionMap();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var48 = var47.getUIClassID();
    float var49 = var47.getAlignmentX();
    boolean var50 = var47.isOptimizedDrawingEnabled();
    var27.putClientProperty((java.lang.Object)' ', (java.lang.Object)var50);
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.repaint();
    java.lang.Object var64 = var57.getTreeLock();
    java.awt.Component var67 = var57.locate(0, (-1));
    var57.setAlignmentX(0.5f);
    java.awt.Font var70 = var57.getFont();
    java.awt.FontMetrics var71 = var27.getFontMetrics(var70);
    java.awt.FontMetrics var72 = var11.getFontMetrics(var70);
    java.awt.FontMetrics var73 = var5.getFontMetrics(var70);
    java.awt.Font var74 = var5.getFont();
    var5.setFocusable(false);
    var5.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PanelUI"+ "'", var48.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test53");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.transferFocusDownCycle();
    boolean var79 = var5.isMinimumSizeSet();
    java.awt.Component[] var80 = var5.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test54");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    int var80 = var2.getState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test55");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    javax.swing.event.EventListenerList var3 = var1.getPirateEcouteurs();
    tinymonkeys.controleur.Controller var5 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var6 = new tinymonkeys.vue.Fenetre("PanelUI", var5);
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var19 = var12.isAncestorOf((java.awt.Component)var18);
    boolean var20 = var12.isFocusTraversalPolicyProvider();
    boolean var23 = var12.contains(10, 111);
    java.awt.Dimension var24 = var12.minimumSize();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    var43.updateUI();
    int var51 = var30.getComponentZOrder((java.awt.Component)var43);
    java.awt.Insets var52 = var30.getInsets();
    java.util.Locale var53 = var30.getLocale();
    var30.hide();
    java.awt.LayoutManager var55 = var30.getLayout();
    var12.setLayout(var55);
    var6.setLayout(var55);
    java.awt.Color var58 = var6.getBackground();
    java.awt.Toolkit var59 = var6.getToolkit();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var72 = var65.isAncestorOf((java.awt.Component)var71);
    javax.swing.plaf.PanelUI var73 = var65.getUI();
    java.awt.Image var76 = var65.createImage(0, 1);
    var65.enable(true);
    java.awt.Color var79 = var65.getBackground();
    var6.setBackground(var79);
    var6.setLocation(111, 10);
    java.awt.Container var84 = var6.getFocusCycleRootAncestor();
    var6.setState(0);
    boolean var87 = var6.isResizable();
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var6);
    java.awt.Container var89 = var6.getFocusCycleRootAncestor();
    var6.setUndecorated(false);
    int var92 = var6.getExtendedState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test56");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Pirate var4 = var2.getPirate();
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    tinymonkeys.modele.SingeErratique var9 = new tinymonkeys.modele.SingeErratique((-1), 11, var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var7.creationCarte(var12);
    tinymonkeys.modele.Ile var17 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var18 = new tinymonkeys.modele.BandeDeSingesErratiques(var17);
    tinymonkeys.modele.SingeErratique var19 = new tinymonkeys.modele.SingeErratique((-1), 11, var17);
    tinymonkeys.modele.Ile var20 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var21 = new tinymonkeys.modele.BandeDeSingesErratiques(var20);
    int[][] var22 = new int[][] { };
    var20.creationCarte(var22);
    var17.creationCarte(var22);
    var7.creationCarte(var22);
    var2.creationCarte(var22);
    var0.creationCarte(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var30 = var0.valeurCarte((-1), 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test57");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.transferFocusUpCycle();
    boolean var68 = var61.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var69 = var61.getBaselineResizeBehavior();
    var61.show();
    var61.setEnabled(false);
    boolean var73 = var61.isMinimumSizeSet();
    var2.setContentPane((java.awt.Container)var61);
    var2.toFront();
    java.awt.Window.Type var76 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test58");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    java.awt.Component var18 = var5.locate(0, 111);
    boolean var20 = var5.requestFocus(true);
    var5.setAlignmentX((-1.0f));
    var5.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test59");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    int var7 = var5.getHeight();
    boolean var8 = var5.getFocusTraversalKeysEnabled();
    boolean var9 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test60");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var24 = var17.isAncestorOf((java.awt.Component)var23);
    javax.swing.plaf.PanelUI var25 = var17.getUI();
    var17.transferFocusDownCycle();
    var17.doLayout();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var33.enable(true);
    int var36 = var33.getY();
    boolean var37 = var33.isValid();
    java.awt.Toolkit var38 = var33.getToolkit();
    var5.add((java.awt.Component)var17, (java.lang.Object)var38);
    java.beans.PropertyChangeListener[] var41 = var5.getPropertyChangeListeners("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (-1.0f), 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test61");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    java.awt.Component var64 = var54.locate(0, (-1));
    var54.setAlignmentX(0.5f);
    java.awt.Font var67 = var54.getFont();
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var73.enable(true);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var82 = var81.getUIClassID();
    javax.swing.TransferHandler var83 = var81.getTransferHandler();
    java.awt.Color var84 = var81.getForeground();
    var73.setBackground(var84);
    var54.setForeground(var84);
    java.awt.Font var87 = var54.getFont();
    java.awt.FontMetrics var88 = var5.getFontMetrics(var87);
    java.awt.Container var89 = var5.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "PanelUI"+ "'", var82.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test62");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    javax.accessibility.AccessibleContext var60 = var2.getAccessibleContext();
    boolean var61 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test63");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.transferFocusDownCycle();
    var5.doLayout();
    boolean var16 = var5.getAutoscrolls();
    java.lang.String var17 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.image.ColorModel var31 = var23.getColorModel();
    var23.setLocation(100, 1);
    boolean var35 = var23.isDoubleBuffered();
    java.util.Locale var36 = var23.getLocale();
    java.awt.Dimension var37 = var23.getMaximumSize();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.image.ColorModel var51 = var43.getColorModel();
    boolean var52 = var43.getVerifyInputWhenFocusTarget();
    int var53 = var43.getWidth();
    java.util.Locale var54 = var43.getLocale();
    var23.setLocale(var54);
    javax.swing.plaf.PanelUI var56 = var23.getUI();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var69 = var62.isAncestorOf((java.awt.Component)var68);
    java.awt.Point var70 = var68.location();
    java.awt.Point var71 = var23.getLocation(var70);
    java.awt.Component var72 = var5.findComponentAt(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "PanelUI"+ "'", var17.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test64");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    float var8 = var5.getAlignmentY();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var17 = var14.locate(11, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    var23.updateUI();
    var23.show(false);
    float var33 = var23.getAlignmentY();
    java.awt.Rectangle var34 = var23.bounds();
    java.awt.Rectangle var35 = var14.getBounds(var34);
    var5.setBounds(var34);
    int var37 = var5.getWidth();
    java.awt.Container var38 = var5.getParent();
    java.awt.Toolkit var39 = var5.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test65");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Window var60 = var2.getOwner();
    boolean var61 = var2.isAutoRequestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.createBufferStrategy(10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test66");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isFocusable();
    java.awt.Point var28 = var18.location();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var29 = var18.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test67");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.event.KeyListener[] var15 = var11.getKeyListeners();
    java.awt.Component var18 = var11.findComponentAt(3, 11);
    boolean var19 = var11.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test68");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    var2.repaint(100L, 111, 11, 3, 111);
    java.awt.MenuBar var89 = var2.getMenuBar();
    java.util.List var90 = var2.getIconImages();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test69");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    var5.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test70");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.util.Locale var48 = var25.getLocale();
    javax.swing.JToolTip var49 = var25.createToolTip();
    java.beans.PropertyChangeListener[] var50 = var25.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test71");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    var5.setOpaque(false);
    boolean var20 = var5.isDoubleBuffered();
    int var21 = var5.getY();
    javax.swing.JToolTip var22 = var5.createToolTip();
    java.lang.String var23 = var5.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test72");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    java.awt.peer.ComponentPeer var39 = var5.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    boolean var7 = var5.requestFocus(true);
    int var10 = var5.getBaseline(100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test74");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var5.isDoubleBuffered();
    var5.setVisible(true);
    boolean var68 = var5.isPaintingTile();
    java.lang.Object var69 = var5.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test75");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    int var22 = var2.getDefaultCloseOperation();
    java.awt.Window var23 = var2.getOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test76");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.lang.String var7 = var5.toString();
    var5.firePropertyChange("", ' ', ' ');
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.Component var27 = var17.locate(0, (-1));
    var17.requestFocus();
    boolean var29 = var17.isFocusTraversable();
    java.awt.Insets var30 = var17.insets();
    java.awt.Insets var31 = var5.getInsets(var30);
    var5.firePropertyChange("PanelUI", 1.0f, 0.0f);
    boolean var36 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test77");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var2 = var0.getSingesErratiques();
    var2.ajoutSingesErratiques(0);
    javax.swing.event.EventListenerList var5 = var2.getBandeSingesEcouteurs();
    var2.ajoutSingesErratiques(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test78");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(11, 10, 0, 0, 100);
    var5.requestFocus();
    var5.firePropertyChange("PanelUI", (short)1, (short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var11 = var5.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test79");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var33.enable(true);
    int var36 = var33.getY();
    boolean var37 = var33.isValid();
    java.awt.Toolkit var38 = var33.getToolkit();
    java.awt.image.ColorModel var39 = var33.getColorModel();
    java.awt.Font var40 = var33.getFont();
    java.awt.FontMetrics var41 = var5.getFontMetrics(var40);
    var5.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test80");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    javax.accessibility.AccessibleContext var7 = var5.getAccessibleContext();
    var5.setPosition((-1), 111);
    var5.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test81");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    javax.swing.TransferHandler var15 = var13.getTransferHandler();
    java.awt.Color var16 = var13.getForeground();
    var5.setBackground(var16);
    java.awt.dnd.DropTarget var18 = var5.getDropTarget();
    java.awt.Dimension var19 = var5.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test82");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    java.lang.String var7 = var5.toString();
    boolean var8 = var5.isFocusTraversalPolicyProvider();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    java.awt.Color var16 = var14.getForeground();
    int var19 = var14.getBaseline(11, 1);
    var14.resize(111, 1);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var28.enable(true);
    java.awt.Toolkit var31 = var28.getToolkit();
    var28.firePropertyChange("", 100L, 1L);
    java.awt.Point var36 = var28.getLocation();
    java.awt.Component var37 = var14.findComponentAt(var36);
    java.awt.Point var38 = var5.getLocation(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test83");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    boolean var40 = var5.isFocusable();
    boolean var41 = var5.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test84");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    boolean var72 = var17.isAutoRequestFocus();
    var17.repaint(100L, (-1), 1, 100, (-1));
    var17.setTitle("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test85");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    java.awt.Component var64 = var54.locate(0, (-1));
    var54.setAlignmentX(0.5f);
    java.awt.Font var67 = var54.getFont();
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var73.enable(true);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var82 = var81.getUIClassID();
    javax.swing.TransferHandler var83 = var81.getTransferHandler();
    java.awt.Color var84 = var81.getForeground();
    var73.setBackground(var84);
    var54.setForeground(var84);
    java.awt.Font var87 = var54.getFont();
    java.awt.FontMetrics var88 = var5.getFontMetrics(var87);
    boolean var89 = var5.isOptimizedDrawingEnabled();
    boolean var90 = var5.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "PanelUI"+ "'", var82.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test86");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.Component var28 = var18.locate(0, (-1));
    var18.resize((-1), 0);
    var18.transferFocusDownCycle();
    var18.setDebugGraphicsOptions(1);
    java.awt.Dimension var35 = var18.getMaximumSize();
    java.awt.Dimension var36 = var5.getSize(var35);
    javax.swing.KeyStroke[] var37 = var5.getRegisteredKeyStrokes();
    boolean var38 = var5.isFocusCycleRoot();
    java.awt.FocusTraversalPolicy var39 = var5.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test87");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(100, 0, 0, 0, 111);
    var5.setBounds(3, 111, 111, 100);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test88");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isMaximumSizeSet();
    boolean var18 = var5.isOpaque();
    boolean var20 = var5.requestFocus(false);
    boolean var21 = var5.isPreferredSizeSet();
    java.awt.ComponentOrientation var22 = var5.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test89");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.repaint(1L);
    java.awt.Graphics var16 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test90");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    int var3 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test91");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    boolean var83 = var2.isAutoRequestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var85 = var2.getFocusTraversalKeys(111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test92");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.repaint((-1L), 100, 0, 10, 100);
    var5.doLayout();
    java.awt.Component.BaselineResizeBehavior var26 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test93");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isShowing();
    java.beans.VetoableChangeListener[] var9 = var5.getVetoableChangeListeners();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.event.HierarchyListener[] var23 = var15.getHierarchyListeners();
    java.awt.event.InputMethodListener[] var24 = var15.getInputMethodListeners();
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var32 = var31.getPeer();
    var31.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var31.repaint();
    var31.updateUI();
    var31.show(false);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    java.awt.Component var56 = var46.locate(0, (-1));
    var46.requestFocus();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    boolean var72 = var63.getVerifyInputWhenFocusTarget();
    var63.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var77 = var63.getBounds();
    var46.paintImmediately(var77);
    var31.computeVisibleRect(var77);
    tinymonkeys.vue.VueElement var85 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var85.enable(true);
    java.awt.Toolkit var88 = var85.getToolkit();
    java.awt.Component var90 = var31.add((java.awt.Component)var85, 0);
    javax.swing.InputMap var91 = var31.getInputMap();
    var5.putClientProperty((java.lang.Object)var25, (java.lang.Object)var31);
    var31.firePropertyChange("PanelUI", (short)0, (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test94");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    javax.swing.InputMap var54 = var5.getInputMap();
    var5.disable();
    boolean var56 = var5.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test95");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    boolean var65 = var2.isAutoRequestFocus();
    java.awt.Component var66 = var2.getGlassPane();
    var2.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test96");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    java.awt.event.KeyListener[] var29 = var5.getKeyListeners();
    javax.swing.event.AncestorListener[] var30 = var5.getAncestorListeners();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    javax.swing.InputMap var66 = var63.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var67 = var63.getBaselineResizeBehavior();
    var63.layout();
    var5.add((java.awt.Component)var36, (java.lang.Object)var63);
    var36.enable(true);
    int var72 = var36.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test97");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    java.awt.Toolkit var78 = var5.getToolkit();
    java.awt.event.MouseWheelListener[] var79 = var5.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test98");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var12.move(0, 100);
    var12.enable();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.transferFocusUpCycle();
    boolean var64 = var57.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var71 = var70.getPeer();
    var70.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var70.repaint();
    java.lang.Object var77 = var70.getTreeLock();
    java.awt.Component var80 = var70.locate(0, (-1));
    var70.resize((-1), 0);
    var70.transferFocusDownCycle();
    var70.setDebugGraphicsOptions(1);
    java.awt.Dimension var87 = var70.getMaximumSize();
    java.awt.Dimension var88 = var57.getSize(var87);
    var12.setSize(var87);
    javax.swing.event.AncestorListener[] var90 = var12.getAncestorListeners();
    boolean var91 = var12.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test99");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.locate(111, 111);
    javax.swing.KeyStroke[] var23 = var5.getRegisteredKeyStrokes();
    java.awt.Component.BaselineResizeBehavior var24 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test100");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    java.awt.Component var36 = var26.locate(0, (-1));
    var26.requestFocus();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.image.ColorModel var51 = var43.getColorModel();
    boolean var52 = var43.getVerifyInputWhenFocusTarget();
    var43.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var57 = var43.getBounds();
    var26.paintImmediately(var57);
    tinymonkeys.vue.VueElement var64 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var65 = var64.getPeer();
    var64.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var64.repaint();
    java.lang.Object var71 = var64.getTreeLock();
    java.awt.Component var74 = var64.locate(0, (-1));
    var64.setAlignmentX(0.5f);
    java.awt.Font var77 = var64.getFont();
    tinymonkeys.vue.VueElement var83 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var83.enable(true);
    tinymonkeys.vue.VueElement var91 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var92 = var91.getUIClassID();
    javax.swing.TransferHandler var93 = var91.getTransferHandler();
    java.awt.Color var94 = var91.getForeground();
    var83.setBackground(var94);
    var64.setForeground(var94);
    var26.setForeground(var94);
    var5.setBackground(var94);
    java.awt.ComponentOrientation var99 = var5.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "PanelUI"+ "'", var92.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test101");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    boolean var31 = var5.getAutoscrolls();
    java.awt.Insets var32 = var5.getInsets();
    boolean var33 = var5.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test102");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    java.lang.Object var18 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    java.lang.Object var31 = var24.getTreeLock();
    java.awt.image.ColorModel var32 = var24.getColorModel();
    boolean var33 = var24.getAutoscrolls();
    var24.setIgnoreRepaint(true);
    boolean var36 = var5.isFocusCycleRoot((java.awt.Container)var24);
    boolean var37 = var5.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test103");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    java.awt.ComponentOrientation var10 = var2.getComponentOrientation();
    boolean var11 = var2.isActive();
    int var12 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test104");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    int var5 = var4.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 11);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test105");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    var5.reshape(111, (-1), 100, 11);
    java.awt.event.HierarchyListener[] var45 = var5.getHierarchyListeners();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var58 = var51.isAncestorOf((java.awt.Component)var57);
    boolean var59 = var51.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var60 = var51.getMouseMotionListeners();
    javax.swing.ActionMap var61 = var51.getActionMap();
    java.lang.Object var62 = var5.getClientProperty((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test106");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.beans.PropertyChangeListener[] var21 = var5.getPropertyChangeListeners("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test107");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    var20.disable();
    javax.accessibility.AccessibleContext var58 = var20.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test108");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var15 = var5.inside(11, (-1));
    int var16 = var5.getY();
    var5.repaint(100L, (-1), (-1), (-1), (-1));
    java.awt.event.MouseMotionListener[] var23 = var5.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test109");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var12.move(0, 100);
    var12.enable();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.transferFocusUpCycle();
    boolean var64 = var57.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var71 = var70.getPeer();
    var70.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var70.repaint();
    java.lang.Object var77 = var70.getTreeLock();
    java.awt.Component var80 = var70.locate(0, (-1));
    var70.resize((-1), 0);
    var70.transferFocusDownCycle();
    var70.setDebugGraphicsOptions(1);
    java.awt.Dimension var87 = var70.getMaximumSize();
    java.awt.Dimension var88 = var57.getSize(var87);
    var12.setSize(var87);
    javax.swing.event.AncestorListener[] var90 = var12.getAncestorListeners();
    boolean var92 = var12.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test110");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    int var52 = var25.getHeight();
    java.awt.Point var54 = var25.getMousePosition(false);
    java.beans.PropertyChangeListener[] var55 = var25.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test111");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    var5.setRequestFocusEnabled(true);
    var5.move(3, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test112");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    var1.demandeDeplacement(10, 1);
    int var6 = var1.getX();
    java.lang.String var7 = var1.getAvatar();
    int var8 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test113");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    var15.setFont(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test114");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.BandeDeSingesErratiques var6 = var0.getSingesErratiques();
    java.util.Vector var7 = var6.getSingesErratiques();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test115");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window.Type var18 = var2.getType();
    int var19 = var2.getCursorType();
    boolean var20 = var2.getFocusableWindowState();
    boolean var21 = var2.isFocused();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test116");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    javax.swing.JLayeredPane var18 = var2.getLayeredPane();
    int var19 = var2.getState();
    int var20 = var2.getState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test117");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    var5.setDebugGraphicsOptions(1);
    java.awt.Dimension var22 = var5.getMaximumSize();
    int var23 = var5.countComponents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var25 = var5.areFocusTraversalKeysSet((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test118");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(1, 3, 100, 10, 11, "hi!");
    var6.mortPirate();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    boolean var22 = var13.getVerifyInputWhenFocusTarget();
    int var23 = var13.getWidth();
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var32 = var29.locate(11, 10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    var38.show(false);
    float var48 = var38.getAlignmentY();
    java.awt.Rectangle var49 = var38.bounds();
    java.awt.Rectangle var50 = var29.getBounds(var49);
    boolean var51 = var29.isFocusCycleRoot();
    java.awt.Component var54 = var29.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.image.ColorModel var68 = var60.getColorModel();
    var60.setLocation(100, 1);
    boolean var72 = var60.isMaximumSizeSet();
    java.awt.Component var73 = var29.add((java.awt.Component)var60);
    tinymonkeys.controleur.Controller var75 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var76 = new tinymonkeys.vue.Fenetre("PanelUI", var75);
    var76.pack();
    var76.addNotify();
    java.awt.Graphics var79 = var76.getGraphics();
    var73.paintAll(var79);
    var13.paintComponent(var79);
    var6.dessineElement(var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var83 = var6.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test119");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    java.awt.LayoutManager var10 = var2.getLayout();
    var2.setLocation(11, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test120");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    boolean var7 = var5.requestFocus(true);
    java.util.Locale var8 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test121");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Tresor var5 = var2.getTresor();
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    tinymonkeys.modele.SingeErratique var10 = new tinymonkeys.modele.SingeErratique((-1), 11, var8);
    tinymonkeys.modele.Ile var11 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var11);
    int[][] var13 = new int[][] { };
    var11.creationCarte(var13);
    var8.creationCarte(var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var8.creationCarte(var18);
    tinymonkeys.controleur.Controller var22 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var23 = new tinymonkeys.vue.Fenetre("PanelUI", var22);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var36 = var29.isAncestorOf((java.awt.Component)var35);
    boolean var37 = var29.isFocusTraversalPolicyProvider();
    boolean var40 = var29.contains(10, 111);
    java.awt.Dimension var41 = var29.minimumSize();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    var60.updateUI();
    int var68 = var47.getComponentZOrder((java.awt.Component)var60);
    java.awt.Insets var69 = var47.getInsets();
    java.util.Locale var70 = var47.getLocale();
    var47.hide();
    java.awt.LayoutManager var72 = var47.getLayout();
    var29.setLayout(var72);
    var23.setLayout(var72);
    java.awt.Color var75 = var23.getBackground();
    java.awt.MenuBar var76 = var23.getMenuBar();
    var8.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    java.awt.Rectangle var79 = var23.getMaximizedBounds();
    javax.swing.JLayeredPane var80 = var23.getLayeredPane();
    javax.accessibility.AccessibleContext var81 = var23.getAccessibleContext();
    java.awt.Toolkit var82 = var23.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test122");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    var5.setDebugGraphicsOptions(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var22 = var5.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test123");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Point var12 = var5.getMousePosition();
    java.awt.Point var13 = var5.getMousePosition();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    var19.repaint();
    boolean var30 = var19.areFocusTraversalKeysSet(1);
    boolean var31 = var19.isFocusable();
    java.awt.Font var32 = var19.getFont();
    java.awt.FontMetrics var33 = var5.getFontMetrics(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.contains(10, 111);
    java.awt.Dimension var17 = var5.minimumSize();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    var36.updateUI();
    int var44 = var23.getComponentZOrder((java.awt.Component)var36);
    java.awt.Insets var45 = var23.getInsets();
    java.util.Locale var46 = var23.getLocale();
    var23.hide();
    java.awt.LayoutManager var48 = var23.getLayout();
    var5.setLayout(var48);
    java.awt.Dimension var50 = var5.getMaximumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var52 = var5.getInputMap(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test125");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    var5.setDebugGraphicsOptions(1);
    java.awt.Dimension var22 = var5.getMaximumSize();
    var5.requestFocus();
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var29.enable(true);
    int var32 = var29.getY();
    boolean var33 = var5.isAncestorOf((java.awt.Component)var29);
    boolean var34 = var29.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test126");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    boolean var22 = var2.isResizable();
    int var23 = var2.getDefaultCloseOperation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var25 = var2.getFocusTraversalKeys((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test127");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.event.KeyListener[] var15 = var11.getKeyListeners();
    boolean var16 = var11.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test128");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    java.awt.Component.BaselineResizeBehavior var48 = var37.getBaselineResizeBehavior();
    boolean var49 = var37.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test129");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    java.lang.Object var21 = var14.getTreeLock();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    var27.updateUI();
    int var35 = var14.getComponentZOrder((java.awt.Component)var27);
    java.awt.Insets var36 = var14.getInsets();
    java.util.Locale var37 = var14.getLocale();
    var14.hide();
    java.awt.LayoutManager var39 = var14.getLayout();
    javax.swing.InputMap var40 = var14.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setInputMap(100, var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test130");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.event.WindowStateListener[] var57 = var2.getWindowStateListeners();
    java.awt.Window.Type var58 = var2.getType();
    boolean var59 = var2.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test131");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Point var60 = var2.location();
    boolean var61 = var2.isShowing();
    float var62 = var2.getOpacity();
    tinymonkeys.modele.Ile var63 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var64 = var63.getSingesErratiques();
    java.util.Vector var65 = var64.getSingesErratiques();
    var2.setIconImages((java.util.List)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test132");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    boolean var27 = var18.isFocusable();
    boolean var28 = var18.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test133");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    javax.accessibility.AccessibleContext var3 = var2.getAccessibleContext();
    java.util.List var4 = var2.getIconImages();
    java.awt.Point var5 = var2.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test134");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.removeAll();
    java.awt.Point var15 = var5.getMousePosition();
    var5.firePropertyChange("hi!", (short)100, (short)1);
    boolean var20 = var5.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test135");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    var20.disable();
    var20.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test136");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    var5.setAlignmentX(0.5f);
    var5.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test137");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    float var14 = var11.getAlignmentX();
    var11.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test138");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    boolean var11 = var5.areFocusTraversalKeysSet(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test139");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.getComponentAt(11, 10);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.repaint();
    java.lang.Object var35 = var28.getTreeLock();
    int var36 = var28.getY();
    java.beans.VetoableChangeListener[] var37 = var28.getVetoableChangeListeners();
    var5.remove((java.awt.Component)var28);
    java.beans.PropertyChangeListener[] var39 = var5.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test141");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    java.awt.im.InputMethodRequests var14 = var5.getInputMethodRequests();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    java.awt.Color var22 = var20.getForeground();
    var5.setForeground(var22);
    int var26 = var5.getBaseline(1, 11);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var45 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var46 = var45.getPeer();
    var45.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var45.repaint();
    java.lang.Object var52 = var45.getTreeLock();
    java.awt.event.HierarchyListener[] var53 = var45.getHierarchyListeners();
    boolean var54 = var33.isAncestorOf((java.awt.Component)var45);
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.repaint();
    java.awt.GraphicsConfiguration var68 = var61.getGraphicsConfiguration();
    java.awt.Insets var69 = var61.insets();
    var61.repaint(1L);
    java.util.Set var73 = var61.getFocusTraversalKeys(0);
    var33.setFocusTraversalKeys(0, var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys((-1), var73);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test142");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    var2.repaint(100L, 111, 11, 3, 111);
    java.lang.String var89 = var2.getWarningString();
    java.lang.String var90 = var2.getWarningString();
    var2.reshape(111, (-1), (-1), 1);
    java.awt.event.WindowListener[] var96 = var2.getWindowListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test143");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    boolean var34 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test144");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.contains(10, 111);
    java.awt.Dimension var17 = var5.minimumSize();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    var36.updateUI();
    int var44 = var23.getComponentZOrder((java.awt.Component)var36);
    java.awt.Insets var45 = var23.getInsets();
    java.util.Locale var46 = var23.getLocale();
    var23.hide();
    java.awt.LayoutManager var48 = var23.getLayout();
    var5.setLayout(var48);
    java.awt.Cursor var50 = var5.getCursor();
    var5.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test145");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.image.ColorModel var10 = var5.getColorModel();
    boolean var11 = var5.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test146");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    var5.move(100, 1);
    int var18 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 100);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test147");


    tinymonkeys.controleur.Controller var3 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var3);
    tinymonkeys.vue.Fenetre var5 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var3);
    tinymonkeys.vue.Fenetre var6 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.demandeDeplacementPirate(10, 0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test148");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.repaint(1L);
    java.util.Set var17 = var5.getFocusTraversalKeys(0);
    boolean var18 = var5.isOptimizedDrawingEnabled();
    java.awt.Container var19 = var5.getTopLevelAncestor();
    var5.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test149");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.setDimensions(10, 111, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test150");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    java.lang.Object var32 = var5.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test151");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    var5.addNotify();
    var5.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test152");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Pirate var4 = var2.getPirate();
    var2.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    tinymonkeys.modele.SingeErratique var12 = new tinymonkeys.modele.SingeErratique((-1), 11, var10);
    tinymonkeys.modele.Ile var13 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var14 = new tinymonkeys.modele.BandeDeSingesErratiques(var13);
    int[][] var15 = new int[][] { };
    var13.creationCarte(var15);
    var10.creationCarte(var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var10.creationCarte(var20);
    var2.creationCarte(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.VueCarte var24 = new tinymonkeys.vue.VueCarte(1, 10, var20);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test153");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    var2.setAutoRequestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test154");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.JMenuBar var56 = var2.getJMenuBar();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    java.lang.Object var69 = var62.getTreeLock();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var76 = var75.getPeer();
    var75.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var75.repaint();
    var75.updateUI();
    int var83 = var62.getComponentZOrder((java.awt.Component)var75);
    int var84 = var62.getY();
    var62.validate();
    var62.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    var62.firePropertyChange("hi!", '#', '#');
    java.awt.Rectangle var94 = var62.bounds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setShape((java.awt.Shape)var94);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test155");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    java.awt.Color var7 = var5.getForeground();
    boolean var8 = var5.isRequestFocusEnabled();
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '4', 'a');
    boolean var13 = var5.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    java.awt.Dimension var52 = var25.getMaximumSize();
    var25.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test157");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.controleur.Controller var11 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var12 = new tinymonkeys.vue.Fenetre("PanelUI", var11);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var25 = var18.isAncestorOf((java.awt.Component)var24);
    boolean var26 = var18.isFocusTraversalPolicyProvider();
    boolean var29 = var18.contains(10, 111);
    java.awt.Dimension var30 = var18.minimumSize();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    java.awt.Insets var58 = var36.getInsets();
    java.util.Locale var59 = var36.getLocale();
    var36.hide();
    java.awt.LayoutManager var61 = var36.getLayout();
    var18.setLayout(var61);
    var12.setLayout(var61);
    java.awt.Color var64 = var12.getBackground();
    java.awt.Toolkit var65 = var12.getToolkit();
    javax.swing.TransferHandler var66 = var12.getTransferHandler();
    int var67 = var12.getDefaultCloseOperation();
    var12.setResizable(false);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var12);
    java.awt.event.HierarchyListener[] var71 = var12.getHierarchyListeners();
    var12.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test158");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    javax.swing.InputMap var31 = var28.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var32 = var28.getBaselineResizeBehavior();
    boolean var33 = var28.isPreferredSizeSet();
    java.awt.Component var34 = var18.add("", (java.awt.Component)var28);
    java.awt.Cursor var35 = var28.getCursor();
    boolean var36 = var28.getVerifyInputWhenFocusTarget();
    java.lang.Object var37 = var5.getClientProperty((java.lang.Object)var36);
    java.awt.FocusTraversalPolicy var38 = var5.getFocusTraversalPolicy();
    java.awt.Graphics var39 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test159");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var9 = var5.getBaselineResizeBehavior();
    var5.layout();
    java.awt.Dimension var11 = var5.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test160");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage(1, 111, 3, 111, 0);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test161");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    var5.requestFocus();
    int var10 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 111);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test162");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    float var12 = var5.getAlignmentX();
    var5.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test163");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    boolean var65 = var2.isAutoRequestFocus();
    int var66 = var2.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test164");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setBounds((-1), 1, 111, 3);
    var2.show();
    java.awt.Component var66 = var2.getFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test165");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    java.awt.Component.BaselineResizeBehavior var48 = var37.getBaselineResizeBehavior();
    var37.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test166");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var26 = var19.isAncestorOf((java.awt.Component)var25);
    boolean var27 = var19.isFocusTraversalPolicyProvider();
    java.awt.im.InputMethodRequests var28 = var19.getInputMethodRequests();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    java.awt.Color var36 = var34.getForeground();
    var19.setForeground(var36);
    var5.setForeground(var36);
    var5.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test167");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(1, 3, 100, 10, 11, "hi!");
    java.awt.Rectangle var7 = var6.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test168");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusDownCycle();
    var5.setDebugGraphicsOptions(1);
    java.awt.Dimension var22 = var5.getMaximumSize();
    int var23 = var5.countComponents();
    java.lang.String var24 = var5.getToolTipText();
    var5.setFocusTraversalKeysEnabled(true);
    java.beans.PropertyChangeListener[] var27 = var5.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test169");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    boolean var7 = var6.isOpaque();
    var6.setLocation(100, 10);
    javax.swing.TransferHandler var11 = var6.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test170");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.image.ColorModel var68 = var60.getColorModel();
    var60.setLocation(100, 1);
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var78 = var77.getUIClassID();
    javax.swing.TransferHandler var79 = var77.getTransferHandler();
    java.awt.Color var80 = var77.getForeground();
    var60.setForeground(var80);
    var60.hide();
    java.awt.Component.BaselineResizeBehavior var83 = var60.getBaselineResizeBehavior();
    java.awt.GraphicsConfiguration var84 = var60.getGraphicsConfiguration();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var60, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "PanelUI"+ "'", var78.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test171");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    int var28 = var5.countComponents();
    java.awt.event.MouseListener[] var29 = var5.getMouseListeners();
    javax.swing.InputMap var30 = var5.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test172");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Window var60 = var2.getOwner();
    boolean var61 = var2.isAutoRequestFocus();
    java.awt.event.WindowStateListener[] var62 = var2.getWindowStateListeners();
    java.awt.Container var63 = var2.getFocusCycleRootAncestor();
    java.util.Set var65 = var2.getFocusTraversalKeys(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test173");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    javax.accessibility.AccessibleContext var60 = var2.getAccessibleContext();
    var2.setLocation(11, 111);
    boolean var64 = var2.isValidateRoot();
    var2.setAutoRequestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test174");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setVisible(false);
    java.awt.event.MouseListener[] var13 = var5.getMouseListeners();
    java.awt.Component.BaselineResizeBehavior var14 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test175");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Component var10 = var5.getComponentAt(0, 0);
    var5.setSize((-1), 100);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    int var41 = var20.getComponentZOrder((java.awt.Component)var33);
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.transferFocusUpCycle();
    boolean var54 = var47.getInheritsPopupMenu();
    java.awt.Dimension var55 = var47.minimumSize();
    java.awt.Dimension var56 = var33.getSize(var55);
    boolean var57 = var33.isDisplayable();
    java.awt.Component var58 = var5.add("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var33);
    java.lang.String var59 = var33.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test176");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    var5.transferFocusDownCycle();
    java.awt.event.MouseListener[] var16 = var5.getMouseListeners();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.Component var32 = var22.locate(0, (-1));
    var22.requestFocus();
    boolean var34 = var22.isFocusTraversable();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var41 = var40.getPeer();
    var40.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var40.repaint();
    java.lang.Object var47 = var40.getTreeLock();
    java.awt.Component var50 = var40.locate(0, (-1));
    var40.setAlignmentX(0.5f);
    java.awt.Font var53 = var40.getFont();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var61 = var60.getUIClassID();
    float var62 = var60.getAlignmentX();
    boolean var63 = var60.isOptimizedDrawingEnabled();
    var40.putClientProperty((java.lang.Object)' ', (java.lang.Object)var63);
    var40.transferFocusBackward();
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var72 = var71.getPeer();
    var71.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var71.repaint();
    java.awt.GraphicsConfiguration var78 = var71.getGraphicsConfiguration();
    var71.setFocusCycleRoot(true);
    var22.add((java.awt.Component)var40, (java.lang.Object)true);
    boolean var82 = var22.isDoubleBuffered();
    java.awt.Color var83 = var22.getForeground();
    var5.setForeground(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "PanelUI"+ "'", var61.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test177");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    javax.swing.event.EventListenerList var2 = var1.getBandeSingesEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test178");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isManagingFocus();
    java.awt.Component[] var17 = var5.getComponents();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var32 = var23.getMouseMotionListeners();
    javax.swing.ActionMap var33 = var23.getActionMap();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    java.lang.Object var46 = var39.getTreeLock();
    java.awt.Component var49 = var39.locate(0, (-1));
    var39.setAlignmentX(0.5f);
    java.awt.Font var52 = var39.getFont();
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var60 = var59.getUIClassID();
    float var61 = var59.getAlignmentX();
    boolean var62 = var59.isOptimizedDrawingEnabled();
    var39.putClientProperty((java.lang.Object)' ', (java.lang.Object)var62);
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var70 = var69.getPeer();
    var69.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var69.repaint();
    java.lang.Object var76 = var69.getTreeLock();
    java.awt.Component var79 = var69.locate(0, (-1));
    var69.setAlignmentX(0.5f);
    java.awt.Font var82 = var69.getFont();
    java.awt.FontMetrics var83 = var39.getFontMetrics(var82);
    java.awt.FontMetrics var84 = var23.getFontMetrics(var82);
    java.awt.FontMetrics var85 = var5.getFontMetrics(var82);
    java.awt.Component[] var86 = var5.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PanelUI"+ "'", var60.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test179");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(100, 1, 1, 10, 11, "hi!");
    var6.mortPirate();
    java.awt.Insets var8 = var6.insets();
    var6.setDoubleBuffered(true);
    tinymonkeys.modele.Ile var13 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var14 = new tinymonkeys.modele.BandeDeSingesErratiques(var13);
    tinymonkeys.modele.SingeErratique var15 = new tinymonkeys.modele.SingeErratique((-1), 11, var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var13.creationCarte(var18);
    tinymonkeys.modele.Ile var23 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var24 = new tinymonkeys.modele.BandeDeSingesErratiques(var23);
    tinymonkeys.modele.SingeErratique var25 = new tinymonkeys.modele.SingeErratique((-1), 11, var23);
    tinymonkeys.modele.Ile var26 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var27 = new tinymonkeys.modele.BandeDeSingesErratiques(var26);
    int[][] var28 = new int[][] { };
    var26.creationCarte(var28);
    var23.creationCarte(var28);
    var13.creationCarte(var28);
    tinymonkeys.modele.Pirate var33 = new tinymonkeys.modele.Pirate(var13, "hi!");
    tinymonkeys.modele.BandeDeSingesErratiques var34 = new tinymonkeys.modele.BandeDeSingesErratiques(var13);
    javax.swing.event.EventListenerList var35 = var34.getBandeSingesEcouteurs();
    java.lang.Object var36 = var6.getClientProperty((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test180");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    java.lang.String var2 = var1.getAvatar();
    var1.demandeDeplacement(10, 1);
    int var6 = var1.getY();
    var1.setAvatar("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    tinymonkeys.controleur.Controller var2 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var3 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var2);
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("hi!", var2);
    var2.demandeDeplacementPirate(0, 0);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test182");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    boolean var48 = var37.requestDefaultFocus();
    int var49 = var37.getHeight();
    java.awt.image.VolatileImage var52 = var37.createVolatileImage(3, 0);
    tinymonkeys.vue.VueElement var58 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var59 = var58.getPeer();
    var58.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var58.repaint();
    java.lang.Object var65 = var58.getTreeLock();
    java.awt.Component var68 = var58.locate(0, (-1));
    var58.requestFocus();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var76 = var75.getPeer();
    var75.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var75.repaint();
    java.lang.Object var82 = var75.getTreeLock();
    java.awt.image.ColorModel var83 = var75.getColorModel();
    boolean var84 = var75.getVerifyInputWhenFocusTarget();
    var75.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var89 = var75.getBounds();
    var58.paintImmediately(var89);
    var58.removeAll();
    java.awt.Color var92 = var58.getBackground();
    java.awt.Font var93 = var58.getFont();
    var37.setFont(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test183");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    var5.transferFocusDownCycle();
    var5.resize((-1), 100);
    boolean var17 = var5.getFocusTraversalKeysEnabled();
    boolean var18 = var5.isDoubleBuffered();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    java.lang.Object var31 = var24.getTreeLock();
    java.awt.Component var34 = var24.locate(0, (-1));
    var24.requestFocus();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.image.ColorModel var49 = var41.getColorModel();
    boolean var50 = var41.getVerifyInputWhenFocusTarget();
    var41.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var55 = var41.getBounds();
    var24.paintImmediately(var55);
    var24.transferFocusDownCycle();
    boolean var58 = var24.getInheritsPopupMenu();
    java.awt.Point var59 = var24.getLocation();
    java.awt.Point var60 = var5.getLocation(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    int var15 = var5.getWidth();
    var5.repaint(3, 3, 111, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test185");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.enable();
    boolean var8 = var5.isFocusOwner();
    var5.setSize(100, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test186");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    boolean var20 = var5.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test187");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Pirate var4 = var2.getPirate();
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    tinymonkeys.modele.SingeErratique var9 = new tinymonkeys.modele.SingeErratique((-1), 11, var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var7.creationCarte(var12);
    tinymonkeys.modele.Ile var17 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var18 = new tinymonkeys.modele.BandeDeSingesErratiques(var17);
    tinymonkeys.modele.SingeErratique var19 = new tinymonkeys.modele.SingeErratique((-1), 11, var17);
    tinymonkeys.modele.Ile var20 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var21 = new tinymonkeys.modele.BandeDeSingesErratiques(var20);
    int[][] var22 = new int[][] { };
    var20.creationCarte(var22);
    var17.creationCarte(var22);
    var7.creationCarte(var22);
    var2.creationCarte(var22);
    var0.creationCarte(var22);
    tinymonkeys.modele.Pirate var28 = var0.getPirate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test188");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    var25.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test189");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var43 = var5.getMaximumSize();
    var5.setSize((-1), (-1));
    java.awt.Rectangle var47 = var5.getVisibleRect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test190");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Component var10 = var5.getComponentAt(0, 0);
    var5.setSize((-1), 100);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    int var41 = var20.getComponentZOrder((java.awt.Component)var33);
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.transferFocusUpCycle();
    boolean var54 = var47.getInheritsPopupMenu();
    java.awt.Dimension var55 = var47.minimumSize();
    java.awt.Dimension var56 = var33.getSize(var55);
    boolean var57 = var33.isDisplayable();
    java.awt.Component var58 = var5.add("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var33);
    javax.swing.TransferHandler var59 = var33.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    int[][] var3 = var2.getCarte();
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique(111, 10, var2);
    boolean var7 = var2.singeEstPresent(3, 10);
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test192");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Dimension var18 = var2.getSize();
    boolean var19 = var2.isOpaque();
    java.lang.String var20 = var2.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "PanelUI"+ "'", var20.equals("PanelUI"));

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test193");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    java.awt.event.KeyListener[] var50 = var5.getKeyListeners();
    boolean var51 = var5.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test194");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    javax.swing.TransferHandler var65 = var2.getTransferHandler();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var67 = var2.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test195");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    javax.swing.TransferHandler var65 = var2.getTransferHandler();
    boolean var66 = var2.isDisplayable();
    java.awt.event.WindowFocusListener[] var67 = var2.getWindowFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test196");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    javax.accessibility.AccessibleContext var40 = var5.getAccessibleContext();
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test197");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor(0, 0);
    int var3 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test198");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setBounds((-1), 1, 111, 3);
    float var65 = var2.getOpacity();
    float var66 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.Component var53 = var43.locate(0, (-1));
    var43.setAlignmentX(0.5f);
    java.awt.Font var56 = var43.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var62.enable(true);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var71 = var70.getUIClassID();
    javax.swing.TransferHandler var72 = var70.getTransferHandler();
    java.awt.Color var73 = var70.getForeground();
    var62.setBackground(var73);
    var43.setForeground(var73);
    var5.setForeground(var73);
    int var77 = var5.getComponentCount();
    float var78 = var5.getAlignmentY();
    javax.swing.event.AncestorListener[] var79 = var5.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PanelUI"+ "'", var71.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test200");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var24 = var17.isAncestorOf((java.awt.Component)var23);
    javax.swing.plaf.PanelUI var25 = var17.getUI();
    var17.transferFocusDownCycle();
    var17.doLayout();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var33.enable(true);
    int var36 = var33.getY();
    boolean var37 = var33.isValid();
    java.awt.Toolkit var38 = var33.getToolkit();
    var5.add((java.awt.Component)var17, (java.lang.Object)var38);
    boolean var40 = var5.isFocusTraversalPolicyProvider();
    float var41 = var5.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test201");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    java.beans.VetoableChangeListener[] var23 = var15.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test202");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    javax.swing.JLayeredPane var18 = var2.getLayeredPane();
    var2.setCursor(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test203");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setBounds((-1), 1, 111, 3);
    java.awt.Component var65 = var2.getFocusOwner();
    java.awt.Component var66 = var2.getGlassPane();
    java.awt.Window.Type var67 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test204");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage(100, 0, 3, 1, 111);
    boolean var6 = var5.isFocusTraversalPolicyProvider();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.awt.event.FocusListener[] var8 = var5.getFocusListeners();
    java.awt.Component var11 = var5.findComponentAt(3, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test205");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    boolean var12 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.Component var28 = var18.locate(0, (-1));
    var18.resize((-1), 0);
    var18.transferFocusDownCycle();
    var18.setDebugGraphicsOptions(1);
    java.awt.Dimension var35 = var18.getMaximumSize();
    java.awt.Dimension var36 = var5.getSize(var35);
    javax.swing.KeyStroke[] var37 = var5.getRegisteredKeyStrokes();
    java.awt.Cursor var38 = var5.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test206");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    float var8 = var5.getAlignmentY();
    int var9 = var5.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 111);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test207");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.image.VolatileImage var59 = var20.createVolatileImage((-1), 10);
    java.awt.Container var60 = var20.getParent();
    java.awt.im.InputContext var61 = var20.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test208");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    java.awt.Component var53 = var43.locate(0, (-1));
    var43.setAlignmentX(0.5f);
    java.awt.Font var56 = var43.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var62.enable(true);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var71 = var70.getUIClassID();
    javax.swing.TransferHandler var72 = var70.getTransferHandler();
    java.awt.Color var73 = var70.getForeground();
    var62.setBackground(var73);
    var43.setForeground(var73);
    var5.setForeground(var73);
    int var77 = var5.getComponentCount();
    float var78 = var5.getAlignmentY();
    var5.setRequestFocusEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PanelUI"+ "'", var71.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test209");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    var5.move(1, 10);
    var5.enable();
    var5.firePropertyChange("hi!", '4', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test210");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    boolean var22 = var2.isAlwaysOnTop();
    java.awt.Image var23 = var2.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test211");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test212");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.removeAll();
    var5.repaint(11, 100, (-1), 111);
    boolean var44 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test213");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.createBufferStrategy(3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test214");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(11, (-1), (-1), 100, 100);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var18 = var11.isAncestorOf((java.awt.Component)var17);
    boolean var19 = var11.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var20 = var11.getMouseMotionListeners();
    javax.swing.ActionMap var21 = var11.getActionMap();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.lang.Object var34 = var27.getTreeLock();
    java.awt.Component var37 = var27.locate(0, (-1));
    var27.setAlignmentX(0.5f);
    java.awt.Font var40 = var27.getFont();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var48 = var47.getUIClassID();
    float var49 = var47.getAlignmentX();
    boolean var50 = var47.isOptimizedDrawingEnabled();
    var27.putClientProperty((java.lang.Object)' ', (java.lang.Object)var50);
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.repaint();
    java.lang.Object var64 = var57.getTreeLock();
    java.awt.Component var67 = var57.locate(0, (-1));
    var57.setAlignmentX(0.5f);
    java.awt.Font var70 = var57.getFont();
    java.awt.FontMetrics var71 = var27.getFontMetrics(var70);
    java.awt.FontMetrics var72 = var11.getFontMetrics(var70);
    java.awt.FontMetrics var73 = var5.getFontMetrics(var70);
    javax.swing.event.AncestorListener[] var74 = var5.getAncestorListeners();
    var5.paintImmediately(3, (-1), 3, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PanelUI"+ "'", var48.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test215");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    javax.swing.JLayeredPane var18 = var2.getLayeredPane();
    var18.transferFocusUpCycle();
    tinymonkeys.modele.Ile var22 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var23 = var22.getSingesErratiques();
    javax.swing.event.EventListenerList var24 = var22.getIleEcouteurs();
    tinymonkeys.modele.Ile var25 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var26 = new tinymonkeys.modele.BandeDeSingesErratiques(var25);
    int[][] var27 = new int[][] { };
    var25.creationCarte(var27);
    var22.setCarte(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.GestionImages var30 = new tinymonkeys.vue.GestionImages(var18, 0, 111, var27);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test216");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    var2.setFocusableWindowState(true);
    java.awt.event.WindowStateListener[] var58 = var2.getWindowStateListeners();
    var2.toFront();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var66 = var65.getUIClassID();
    tinymonkeys.controleur.Controller var68 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var69 = new tinymonkeys.vue.Fenetre("PanelUI", var68);
    var69.pack();
    var69.addNotify();
    java.awt.Graphics var72 = var69.getGraphics();
    var65.printComponents(var72);
    var2.paintComponents(var72);
    boolean var75 = var2.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "PanelUI"+ "'", var66.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test217");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.repaint();
    var5.firePropertyChange("hi!", '#', 'a');
    javax.accessibility.AccessibleContext var19 = var5.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test218");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage(1, 111, 0, 111, 10);
    javax.swing.JPopupMenu var6 = var5.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test219");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    var25.transferFocusDownCycle();
    boolean var53 = var25.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test220");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    var5.setOpaque(false);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var15.enable(true);
    boolean var18 = var15.isShowing();
    int var19 = var15.getX();
    var15.grabFocus();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    boolean var34 = var26.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var35 = var26.getMouseMotionListeners();
    javax.swing.ActionMap var36 = var26.getActionMap();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var43 = var42.getPeer();
    var42.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var42.repaint();
    java.lang.Object var49 = var42.getTreeLock();
    java.awt.Component var52 = var42.locate(0, (-1));
    var42.setAlignmentX(0.5f);
    java.awt.Font var55 = var42.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var63 = var62.getUIClassID();
    float var64 = var62.getAlignmentX();
    boolean var65 = var62.isOptimizedDrawingEnabled();
    var42.putClientProperty((java.lang.Object)' ', (java.lang.Object)var65);
    tinymonkeys.vue.VueElement var72 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var73 = var72.getPeer();
    var72.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var72.repaint();
    java.lang.Object var79 = var72.getTreeLock();
    java.awt.Component var82 = var72.locate(0, (-1));
    var72.setAlignmentX(0.5f);
    java.awt.Font var85 = var72.getFont();
    java.awt.FontMetrics var86 = var42.getFontMetrics(var85);
    java.awt.FontMetrics var87 = var26.getFontMetrics(var85);
    java.awt.FontMetrics var88 = var15.getFontMetrics(var85);
    java.awt.FontMetrics var89 = var5.getFontMetrics(var85);
    var5.resize(1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "PanelUI"+ "'", var63.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test221");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    var5.removeAll();
    boolean var24 = var5.contains(111, 11);
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var31 = var30.getPeer();
    var30.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var30.repaint();
    java.lang.Object var37 = var30.getTreeLock();
    java.awt.image.ColorModel var38 = var30.getColorModel();
    var30.setLocation(100, 1);
    boolean var42 = var30.isDoubleBuffered();
    java.util.Locale var43 = var30.getLocale();
    java.awt.Dimension var44 = var30.getMaximumSize();
    var5.setMaximumSize(var44);
    var5.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test222");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    boolean var8 = var2.coordonneesEgales(11, 11);
    var2.setPosition(111, 11);
    int var12 = var2.getX();
    int var13 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test223");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    tinymonkeys.controleur.Controller var65 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var66 = new tinymonkeys.vue.Fenetre("PanelUI", var65);
    int var67 = var66.getExtendedState();
    java.awt.Window.Type var68 = var66.getType();
    var2.setType(var68);
    boolean var70 = var2.isDoubleBuffered();
    var2.dispose();
    java.awt.Container var72 = var2.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test224");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    int var7 = var5.getHeight();
    var5.transferFocus();
    java.awt.Container var9 = var5.getTopLevelAncestor();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var16 = var15.getUIClassID();
    java.awt.peer.ComponentPeer var17 = var15.getPeer();
    java.beans.VetoableChangeListener[] var18 = var15.getVetoableChangeListeners();
    int var19 = var15.getWidth();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var25.enable(true);
    var25.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var40 = var37.locate(11, 10);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    var46.show(false);
    float var56 = var46.getAlignmentY();
    java.awt.Rectangle var57 = var46.bounds();
    java.awt.Rectangle var58 = var37.getBounds(var57);
    var25.computeVisibleRect(var58);
    var15.repaint(var58);
    var5.repaint(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "PanelUI"+ "'", var16.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test225");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.firePropertyChange("", 100L, (-1L));
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", (byte)1, (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test226");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.transferFocusDownCycle();
    boolean var9 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test227");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    var2.setResizable(false);
    java.awt.event.WindowListener[] var67 = var2.getWindowListeners();
    java.awt.im.InputMethodRequests var68 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test228");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    var2.liberationClavier();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    var10.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var10.repaint();
    var10.updateUI();
    var10.show(false);
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.Component var35 = var25.locate(0, (-1));
    var25.requestFocus();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var43 = var42.getPeer();
    var42.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var42.repaint();
    java.lang.Object var49 = var42.getTreeLock();
    java.awt.image.ColorModel var50 = var42.getColorModel();
    boolean var51 = var42.getVerifyInputWhenFocusTarget();
    var42.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var56 = var42.getBounds();
    var25.paintImmediately(var56);
    var10.computeVisibleRect(var56);
    javax.swing.InputMap var59 = var10.getInputMap();
    var10.disable();
    java.awt.Toolkit var61 = var10.getToolkit();
    java.awt.Color var62 = var10.getBackground();
    var2.setBackground(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test229");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    var5.removeAll();
    boolean var55 = var5.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test230");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    var5.requestFocus();
    var5.setBounds(10, 100, 11, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test231");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var5.setMinimumSize(var31);
    boolean var34 = var5.isMaximumSizeSet();
    java.awt.Component.BaselineResizeBehavior var35 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test232");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    boolean var19 = var5.isRequestFocusEnabled();
    int var20 = var5.getHeight();
    var5.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test233");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    var5.transferFocusDownCycle();
    var5.firePropertyChange("PanelUI", '#', '4');
    tinymonkeys.vue.VueSingeErratique var29 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var30 = var29.getGraphicsConfiguration();
    int var31 = var29.getX();
    java.awt.Rectangle var32 = var29.bounds();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var44.revalidate();
    var44.setSize(0, 11);
    java.awt.Dimension var49 = var44.getMinimumSize();
    java.awt.Dimension var50 = var38.getSize(var49);
    java.awt.Dimension var51 = var29.getSize(var50);
    var5.setPreferredSize(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test234");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var12 = var11.getPeer();
    var11.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var11.repaint();
    java.lang.Object var18 = var11.getTreeLock();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.repaint();
    var24.updateUI();
    int var32 = var11.getComponentZOrder((java.awt.Component)var24);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.transferFocusUpCycle();
    boolean var45 = var38.getInheritsPopupMenu();
    java.awt.Dimension var46 = var38.minimumSize();
    java.awt.Dimension var47 = var24.getSize(var46);
    boolean var48 = var5.isAncestorOf((java.awt.Component)var24);
    java.beans.PropertyChangeListener[] var49 = var5.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    boolean var32 = var19.hasFocus();
    tinymonkeys.controleur.Controller var34 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var35 = new tinymonkeys.vue.Fenetre("PanelUI", var34);
    var35.pack();
    var35.addNotify();
    java.awt.Graphics var38 = var35.getGraphics();
    var19.printAll(var38);
    java.awt.Dimension var40 = var19.getMinimumSize();
    boolean var41 = var19.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test236");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    java.awt.Component var10 = var5.getComponentAt(0, 0);
    var5.resize((-1), 3);
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test237");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    var10.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var10.repaint();
    java.lang.Object var17 = var10.getTreeLock();
    java.awt.Component var20 = var10.locate(0, (-1));
    var10.setAlignmentX(0.5f);
    java.awt.Font var23 = var10.getFont();
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var31 = var30.getUIClassID();
    float var32 = var30.getAlignmentX();
    boolean var33 = var30.isOptimizedDrawingEnabled();
    var10.putClientProperty((java.lang.Object)' ', (java.lang.Object)var33);
    var10.transferFocusBackward();
    java.awt.Dimension var36 = var10.getSize();
    var2.setSize(var36);
    java.awt.Container var38 = var2.getContentPane();
    java.awt.Container var39 = var2.getContentPane();
    java.awt.event.HierarchyBoundsListener[] var40 = var2.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test238");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    boolean var28 = var5.getFocusTraversalKeysEnabled();
    java.awt.Point var30 = var5.getMousePosition(true);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.image.ColorModel var44 = var36.getColorModel();
    var36.setLocation(100, 1);
    boolean var48 = var36.isDoubleBuffered();
    java.util.Locale var49 = var36.getLocale();
    java.awt.Dimension var50 = var36.getMaximumSize();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    java.lang.Object var63 = var56.getTreeLock();
    java.awt.image.ColorModel var64 = var56.getColorModel();
    boolean var65 = var56.getVerifyInputWhenFocusTarget();
    int var66 = var56.getWidth();
    java.util.Locale var67 = var56.getLocale();
    var36.setLocale(var67);
    javax.swing.plaf.PanelUI var69 = var36.getUI();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var82 = var75.isAncestorOf((java.awt.Component)var81);
    java.awt.Point var83 = var81.location();
    java.awt.Point var84 = var36.getLocation(var83);
    java.awt.Point var85 = var5.getLocation(var83);
    var5.repaint(10L, 10, 100, 100, 0);
    java.awt.Insets var92 = var5.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test239");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    java.awt.Rectangle var26 = var5.getBounds(var25);
    boolean var27 = var5.isFocusCycleRoot();
    java.awt.Component var30 = var5.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.image.ColorModel var44 = var36.getColorModel();
    var36.setLocation(100, 1);
    boolean var48 = var36.isMaximumSizeSet();
    java.awt.Component var49 = var5.add((java.awt.Component)var36);
    boolean var50 = var36.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test240");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Point var60 = var2.location();
    boolean var61 = var2.isShowing();
    var2.setAutoRequestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test241");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    java.awt.event.HierarchyBoundsListener[] var15 = var5.getHierarchyBoundsListeners();
    var5.invalidate();
    boolean var17 = var5.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test242");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    boolean var12 = var5.isFocusTraversalPolicySet();
    java.lang.String var13 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test243");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.Rectangle var8 = var5.bounds();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    java.awt.event.HierarchyListener[] var34 = var26.getHierarchyListeners();
    boolean var35 = var14.isAncestorOf((java.awt.Component)var26);
    boolean var36 = var26.isFontSet();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var43 = var42.getPeer();
    var42.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var42.repaint();
    java.lang.Object var49 = var42.getTreeLock();
    java.awt.Component var52 = var42.locate(0, (-1));
    var42.setAlignmentX(0.5f);
    java.awt.Font var55 = var42.getFont();
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var63 = var62.getUIClassID();
    float var64 = var62.getAlignmentX();
    boolean var65 = var62.isOptimizedDrawingEnabled();
    var42.putClientProperty((java.lang.Object)' ', (java.lang.Object)var65);
    tinymonkeys.vue.VueElement var72 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var73 = var72.getPeer();
    var72.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var72.repaint();
    java.lang.Object var79 = var72.getTreeLock();
    java.awt.Component var82 = var72.locate(0, (-1));
    var72.setAlignmentX(0.5f);
    java.awt.Font var85 = var72.getFont();
    java.awt.FontMetrics var86 = var42.getFontMetrics(var85);
    java.awt.FontMetrics var87 = var26.getFontMetrics(var85);
    var5.setFont(var85);
    java.awt.Dimension var89 = var5.getMinimumSize();
    java.awt.Point var90 = var5.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "PanelUI"+ "'", var63.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test244");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    var5.addNotify();
    java.awt.dnd.DropTarget var18 = var5.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test245");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window.Type var18 = var2.getType();
    int var19 = var2.getCursorType();
    boolean var20 = var2.getFocusableWindowState();
    boolean var21 = var2.isUndecorated();
    boolean var22 = var2.isLocationByPlatform();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.applyResourceBundle("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test246");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    var5.repaint(100L);
    java.awt.Dimension var17 = var5.preferredSize();
    tinymonkeys.controleur.Controller var19 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var20 = new tinymonkeys.vue.Fenetre("PanelUI", var19);
    int var21 = var20.getExtendedState();
    java.awt.Window.Type var22 = var20.getType();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    javax.swing.InputMap var31 = var28.getInputMap(0);
    boolean var32 = var28.isDisplayable();
    boolean var33 = var28.getFocusTraversalKeysEnabled();
    java.awt.Dimension var34 = var28.getMaximumSize();
    var20.setMinimumSize(var34);
    var5.resize(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test247");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Toolkit var18 = var5.getToolkit();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var27 = var24.locate(11, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    var33.show(false);
    float var43 = var33.getAlignmentY();
    java.awt.Rectangle var44 = var33.bounds();
    java.awt.Rectangle var45 = var24.getBounds(var44);
    java.awt.Rectangle var46 = var5.getBounds(var44);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.lang.Object var59 = var52.getTreeLock();
    java.awt.image.ColorModel var60 = var52.getColorModel();
    var52.setLocation(100, 1);
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var70 = var69.getUIClassID();
    javax.swing.TransferHandler var71 = var69.getTransferHandler();
    java.awt.Color var72 = var69.getForeground();
    var52.setForeground(var72);
    var5.setBackground(var72);
    javax.swing.InputVerifier var75 = var5.getInputVerifier();
    var5.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "PanelUI"+ "'", var70.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test248");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    javax.swing.InputMap var30 = var27.getInputMap(0);
    boolean var31 = var27.isShowing();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    java.awt.Component var33 = var18.add((java.awt.Component)var27);
    java.awt.Component var34 = var5.add("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var33);
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var47 = var40.isAncestorOf((java.awt.Component)var46);
    boolean var48 = var40.isFocusTraversalPolicyProvider();
    boolean var49 = var40.isShowing();
    boolean var50 = var40.isFocusTraversalPolicySet();
    var40.move(1, 10);
    var40.updateUI();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.image.ColorModel var68 = var60.getColorModel();
    var60.setLocation(100, 1);
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Point var74 = var60.getLocation();
    java.awt.Point var75 = var40.getLocation(var74);
    java.awt.Component var76 = var5.findComponentAt(var75);
    java.lang.String var77 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "PanelUI"+ "'", var77.equals("PanelUI"));

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test249");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Rectangle var31 = var5.bounds();
    boolean var32 = var5.isMaximumSizeSet();
    java.awt.Graphics var33 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test250");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    var5.setVisible(true);
    boolean var31 = var5.isOpaque();
    javax.swing.JRootPane var32 = var5.getRootPane();
    java.awt.Rectangle var33 = var5.getBounds();
    boolean var34 = var5.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test251");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    var5.transferFocusDownCycle();
    boolean var79 = var5.isMinimumSizeSet();
    var5.setEnabled(false);
    java.lang.String var82 = var5.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "PanelUI"+ "'", var82.equals("PanelUI"));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test252");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    var5.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    javax.swing.InputMap var30 = var27.getInputMap(0);
    boolean var31 = var27.isShowing();
    java.awt.dnd.DropTarget var32 = var27.getDropTarget();
    java.awt.Component var33 = var18.add((java.awt.Component)var27);
    java.awt.Component var34 = var5.add("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var33);
    java.beans.PropertyChangeListener[] var35 = var5.getPropertyChangeListeners();
    var5.firePropertyChange("", 11, (-1));
    tinymonkeys.controleur.Controller var42 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var43 = new tinymonkeys.vue.Fenetre("PanelUI", var42);
    int var44 = var43.getExtendedState();
    java.awt.Component var45 = var43.getFocusOwner();
    var43.setBounds(0, 111, (-1), (-1));
    java.awt.ComponentOrientation var51 = var43.getComponentOrientation();
    java.util.Set var53 = var43.getFocusTraversalKeys(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setFocusTraversalKeys(100, var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test253");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    java.awt.Cursor var13 = var5.getCursor();
    var5.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test254");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    javax.swing.InputMap var15 = var5.getInputMap();
    java.awt.ComponentOrientation var16 = var5.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test255");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    java.awt.Component var20 = var5.add((java.awt.Component)var14);
    int var21 = var5.getY();
    tinymonkeys.vue.VueElement var27 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var28 = var27.getPeer();
    var27.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var27.repaint();
    java.awt.GraphicsConfiguration var34 = var27.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var35 = var27.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var41.revalidate();
    java.lang.String var43 = var41.toString();
    java.awt.Component var44 = var27.add((java.awt.Component)var41);
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var57 = var50.isAncestorOf((java.awt.Component)var56);
    boolean var58 = var50.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var59 = var50.getMouseMotionListeners();
    javax.swing.ActionMap var60 = var50.getActionMap();
    var27.setActionMap(var60);
    var5.setActionMap(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var43.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test256");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    java.awt.Point var22 = var5.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test257");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var21 = var2.getLongueurCarte();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test258");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Point var12 = var5.getMousePosition();
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test259");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    var59.firePropertyChange("", '4', '4');
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var74 = var71.locate(11, 10);
    tinymonkeys.vue.VueElement var80 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var81 = var80.getPeer();
    var80.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var80.repaint();
    var80.updateUI();
    var80.show(false);
    float var90 = var80.getAlignmentY();
    java.awt.Rectangle var91 = var80.bounds();
    java.awt.Rectangle var92 = var71.getBounds(var91);
    var59.computeVisibleRect(var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setShape((java.awt.Shape)var92);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test260");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    java.awt.event.MouseWheelListener[] var52 = var25.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test261");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    var5.setFocusCycleRoot(true);
    boolean var15 = var5.getIgnoreRepaint();
    java.util.Locale var16 = var5.getLocale();
    var5.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test262");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("hi!", 1, 11);
    boolean var35 = var5.contains(111, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test263");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.image.ColorModel var33 = var25.getColorModel();
    boolean var34 = var25.getVerifyInputWhenFocusTarget();
    int var35 = var25.getWidth();
    java.util.Locale var36 = var25.getLocale();
    var5.setLocale(var36);
    boolean var38 = var5.isFocusTraversalPolicyProvider();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var44.enable(true);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var53 = var52.getUIClassID();
    javax.swing.TransferHandler var54 = var52.getTransferHandler();
    java.awt.Color var55 = var52.getForeground();
    var44.setBackground(var55);
    var5.setBackground(var55);
    var5.setToolTipText("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "PanelUI"+ "'", var53.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test264");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    tinymonkeys.modele.SingeErratique var7 = new tinymonkeys.modele.SingeErratique((-1), 11, var5);
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    int[][] var10 = new int[][] { };
    var8.creationCarte(var10);
    var5.creationCarte(var10);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    tinymonkeys.modele.SingeErratique var17 = new tinymonkeys.modele.SingeErratique((-1), 11, var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var15.creationCarte(var20);
    var5.creationCarte(var20);
    var0.creationCarte(var20);
    tinymonkeys.modele.Pirate var25 = var0.getPirate();
    tinymonkeys.modele.Pirate var26 = var0.getPirate();
    var26.demandeDeplacement(11, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test265");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    java.lang.String var7 = var5.toString();
    boolean var9 = var5.requestFocus(false);
    tinymonkeys.vue.VueTresor var15 = new tinymonkeys.vue.VueTresor(100, 111, 1, 11, 100);
    int var16 = var5.getComponentZOrder((java.awt.Component)var15);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.Component var32 = var22.locate(0, (-1));
    var22.setAlignmentX(0.5f);
    java.awt.Font var35 = var22.getFont();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var41.enable(true);
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var50 = var49.getUIClassID();
    javax.swing.TransferHandler var51 = var49.getTransferHandler();
    java.awt.Color var52 = var49.getForeground();
    var41.setBackground(var52);
    var22.setForeground(var52);
    java.awt.Insets var55 = var22.insets();
    boolean var56 = var22.isMaximumSizeSet();
    javax.accessibility.AccessibleContext var57 = var22.getAccessibleContext();
    var22.setAutoscrolls(false);
    java.awt.Dimension var60 = var22.getMaximumSize();
    var5.setPreferredSize(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "PanelUI"+ "'", var50.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test266");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.contains(10, 111);
    java.lang.String var17 = var5.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test267");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    java.lang.Object var18 = var5.getTreeLock();
    var5.revalidate();
    boolean var20 = var5.isMinimumSizeSet();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.enable(true);
    int var29 = var26.getY();
    boolean var30 = var26.isValid();
    java.awt.Toolkit var31 = var26.getToolkit();
    boolean var32 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var26);
    java.awt.Dimension var33 = var26.size();
    var5.setPreferredSize(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test268");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    int var13 = var5.getY();
    java.beans.VetoableChangeListener[] var14 = var5.getVetoableChangeListeners();
    var5.setToolTipText("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '4', '4');
    java.awt.event.MouseMotionListener[] var21 = var5.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test269");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Dimension var31 = var5.size();
    java.awt.Dimension var32 = var5.size();
    java.awt.Rectangle var33 = var5.getVisibleRect();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var39.enable(true);
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var48 = var47.getUIClassID();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.transferFocusUpCycle();
    boolean var61 = var54.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var68 = var67.getPeer();
    var67.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var67.repaint();
    java.lang.Object var74 = var67.getTreeLock();
    tinymonkeys.vue.VueElement var80 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var81 = var80.getPeer();
    var80.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var80.repaint();
    var80.updateUI();
    int var88 = var67.getComponentZOrder((java.awt.Component)var80);
    var47.add((java.awt.Component)var54, (java.lang.Object)var67);
    boolean var90 = var39.isFocusCycleRoot((java.awt.Container)var54);
    java.awt.image.VolatileImage var93 = var54.createVolatileImage((-1), 10);
    java.awt.Container var94 = var54.getParent();
    boolean var95 = var5.isFocusCycleRoot(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PanelUI"+ "'", var48.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test270");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    java.awt.ComponentOrientation var10 = var2.getComponentOrientation();
    java.util.Set var12 = var2.getFocusTraversalKeys(1);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    int var26 = var18.getY();
    java.awt.event.FocusListener[] var27 = var18.getFocusListeners();
    var18.show(true);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.requestFocus();
    boolean var47 = var35.isPaintingTile();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var54 = var53.getUIClassID();
    tinymonkeys.controleur.Controller var56 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var57 = new tinymonkeys.vue.Fenetre("PanelUI", var56);
    var57.pack();
    var57.addNotify();
    java.awt.Graphics var60 = var57.getGraphics();
    var53.printComponents(var60);
    var35.printComponents(var60);
    var18.printComponents(var60);
    var2.update(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test271");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    int[][] var4 = new int[][] { };
    var2.creationCarte(var4);
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var2, "PanelUI");
    tinymonkeys.modele.Pirate var9 = new tinymonkeys.modele.Pirate(var2, "");
    tinymonkeys.modele.Pirate var10 = var2.getPirate();
    tinymonkeys.modele.Tresor var11 = var2.getTresor();
    int[][] var12 = var2.getCarte();
    tinymonkeys.modele.SingeErratique var13 = new tinymonkeys.modele.SingeErratique(0, 0, var2);
    boolean var16 = var13.coordonneesEgales(111, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.deplacerSinge();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = var2.getSingesErratiques();
    tinymonkeys.modele.Pirate var4 = var2.getPirate();
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    tinymonkeys.modele.SingeErratique var9 = new tinymonkeys.modele.SingeErratique((-1), 11, var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var7.creationCarte(var12);
    tinymonkeys.modele.Ile var17 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var18 = new tinymonkeys.modele.BandeDeSingesErratiques(var17);
    tinymonkeys.modele.SingeErratique var19 = new tinymonkeys.modele.SingeErratique((-1), 11, var17);
    tinymonkeys.modele.Ile var20 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var21 = new tinymonkeys.modele.BandeDeSingesErratiques(var20);
    int[][] var22 = new int[][] { };
    var20.creationCarte(var22);
    var17.creationCarte(var22);
    var7.creationCarte(var22);
    var2.creationCarte(var22);
    var0.creationCarte(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.ajoutPirate("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test273");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    java.awt.Toolkit var62 = var59.getToolkit();
    java.awt.Component var64 = var5.add((java.awt.Component)var59, 0);
    var5.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test274");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var4 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var5 = new tinymonkeys.modele.BandeDeSingesErratiques(var4);
    tinymonkeys.modele.SingeErratique var6 = new tinymonkeys.modele.SingeErratique((-1), 11, var4);
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    int[][] var9 = new int[][] { };
    var7.creationCarte(var9);
    var4.creationCarte(var9);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    int[][] var14 = new int[][] { };
    var12.creationCarte(var14);
    var4.creationCarte(var14);
    tinymonkeys.controleur.Controller var18 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var19 = new tinymonkeys.vue.Fenetre("PanelUI", var18);
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var32 = var25.isAncestorOf((java.awt.Component)var31);
    boolean var33 = var25.isFocusTraversalPolicyProvider();
    boolean var36 = var25.contains(10, 111);
    java.awt.Dimension var37 = var25.minimumSize();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    var56.updateUI();
    int var64 = var43.getComponentZOrder((java.awt.Component)var56);
    java.awt.Insets var65 = var43.getInsets();
    java.util.Locale var66 = var43.getLocale();
    var43.hide();
    java.awt.LayoutManager var68 = var43.getLayout();
    var25.setLayout(var68);
    var19.setLayout(var68);
    java.awt.Color var71 = var19.getBackground();
    java.awt.MenuBar var72 = var19.getMenuBar();
    var4.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var19);
    boolean var74 = var19.isAutoRequestFocus();
    var1.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var19);
    var19.toBack();
    var19.setSize(111, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test275");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isValid();
    boolean var17 = var5.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test276");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    javax.swing.event.AncestorListener[] var12 = var5.getAncestorListeners();
    javax.swing.JRootPane var13 = var5.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test277");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    var5.setEnabled(true);
    java.awt.Point var11 = var5.location();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    boolean var26 = var17.getVerifyInputWhenFocusTarget();
    var17.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var31 = var17.getBounds();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var44 = var37.isAncestorOf((java.awt.Component)var43);
    java.awt.Point var45 = var43.location();
    java.awt.Point var46 = var17.getLocation(var45);
    java.awt.Component var47 = var5.getComponentAt(var46);
    boolean var48 = var5.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test278");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(10, 0, 10, (-1), (-1));
    java.awt.Dimension var6 = var5.getPreferredSize();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.Component var23 = var13.locate(0, (-1));
    var13.setAlignmentX(0.5f);
    java.awt.Font var26 = var13.getFont();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var32.enable(true);
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var41 = var40.getUIClassID();
    javax.swing.TransferHandler var42 = var40.getTransferHandler();
    java.awt.Color var43 = var40.getForeground();
    var32.setBackground(var43);
    var13.setForeground(var43);
    java.awt.Insets var46 = var13.insets();
    boolean var47 = var13.isMaximumSizeSet();
    javax.accessibility.AccessibleContext var48 = var13.getAccessibleContext();
    var13.setAutoscrolls(false);
    java.awt.Dimension var51 = var13.getMaximumSize();
    java.awt.Component var52 = var5.add("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.remove(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "PanelUI"+ "'", var41.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test279");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    boolean var15 = var5.isFocusTraversalPolicyProvider();
    boolean var16 = var5.isValid();
    boolean var17 = var5.isManagingFocus();
    int var18 = var5.getY();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    var24.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var24.transferFocusUpCycle();
    boolean var31 = var24.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.Component var47 = var37.locate(0, (-1));
    var37.resize((-1), 0);
    var37.transferFocusDownCycle();
    var37.setDebugGraphicsOptions(1);
    java.awt.Dimension var54 = var37.getMaximumSize();
    java.awt.Dimension var55 = var24.getSize(var54);
    var5.setSize(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test280");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    java.awt.event.MouseWheelListener[] var29 = var5.getMouseWheelListeners();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.transferFocusUpCycle();
    boolean var42 = var35.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var48 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var49 = var48.getPeer();
    var48.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var48.repaint();
    java.lang.Object var55 = var48.getTreeLock();
    java.awt.Component var58 = var48.locate(0, (-1));
    var48.resize((-1), 0);
    var48.transferFocusDownCycle();
    var48.setDebugGraphicsOptions(1);
    java.awt.Dimension var65 = var48.getMaximumSize();
    java.awt.Dimension var66 = var35.getSize(var65);
    var5.resize(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test281");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    boolean var65 = var23.isFontSet();
    boolean var66 = var23.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test282");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    java.awt.Dimension var32 = var5.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test283");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getCursorType();
    var2.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test284");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    var5.repaint(0, 1, 111, (-1));
    var5.setToolTipText("");
    boolean var26 = var5.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test285");


    tinymonkeys.controleur.Controller var2 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var3 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var2);
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var2);
    java.awt.Component var5 = var4.getFocusOwner();
    javax.swing.TransferHandler var6 = var4.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test286");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    var5.setFocusCycleRoot(true);
    var5.disable();
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (-1L), 10L);
    java.util.Locale var20 = var5.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test287");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Point var12 = var5.getMousePosition();
    java.awt.Graphics var13 = var5.getGraphics();
    java.awt.FocusTraversalPolicy var14 = var5.getFocusTraversalPolicy();
    int var15 = var5.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test288");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.transferFocusDownCycle();
    boolean var39 = var5.getInheritsPopupMenu();
    java.awt.Dimension var40 = var5.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test289");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var6 = var0.getPirate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test290");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(10, 1, 0, 11, 11, "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test291");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.event.MouseWheelListener[] var20 = var5.getMouseWheelListeners();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    boolean var32 = var26.getAutoscrolls();
    float var33 = var26.getAlignmentX();
    java.lang.Object var34 = var5.getClientProperty((java.lang.Object)var26);
    boolean var35 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test292");


    tinymonkeys.controleur.Controller var2 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var3 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var2);
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var2);
    java.awt.Shape var5 = var4.getShape();
    java.awt.Shape var6 = var4.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test293");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    float var15 = var5.getAlignmentY();
    java.awt.Rectangle var16 = var5.bounds();
    int var17 = var5.getDebugGraphicsOptions();
    java.lang.Object var18 = var5.getTreeLock();
    java.awt.Color var19 = var5.getForeground();
    boolean var20 = var5.getIgnoreRepaint();
    java.awt.LayoutManager var21 = var5.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test294");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.applyResourceBundle("hi!");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test295");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    java.lang.String var56 = var2.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "PanelUI"+ "'", var56.equals("PanelUI"));

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test296");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    int var13 = var5.getY();
    java.awt.event.FocusListener[] var14 = var5.getFocusListeners();
    var5.show(true);
    var5.firePropertyChange("PanelUI", (byte)(-1), (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test297");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    var2.firePropertyChange("PanelUI", 1L, (-1L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setCursor(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    var5.setLocation(1, 11);
    java.awt.Container var15 = var5.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test299");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    java.awt.Cursor var13 = var5.getCursor();
    var5.setBounds(10, 11, 1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test300");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.Dimension var7 = var5.getMaximumSize();
    javax.swing.event.AncestorListener[] var8 = var5.getAncestorListeners();
    var5.setToolTipText("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test301");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(1, 3, 11, 3, 0, "PanelUI");
    boolean var7 = var6.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test302");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    java.awt.image.ColorModel var34 = var5.getColorModel();
    var5.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test303");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.isLightweight();
    boolean var32 = var5.isFocusTraversalPolicyProvider();
    var5.transferFocusUpCycle();
    java.awt.Component.BaselineResizeBehavior var34 = var5.getBaselineResizeBehavior();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var41 = var40.getPeer();
    var40.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var40.repaint();
    java.lang.Object var47 = var40.getTreeLock();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var54 = var53.getPeer();
    var53.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var53.repaint();
    var53.updateUI();
    int var61 = var40.getComponentZOrder((java.awt.Component)var53);
    java.awt.Insets var62 = var40.getInsets();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    var68.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var68.repaint();
    java.lang.Object var75 = var68.getTreeLock();
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var82 = var81.getPeer();
    var81.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var81.repaint();
    var81.updateUI();
    int var89 = var68.getComponentZOrder((java.awt.Component)var81);
    java.awt.Insets var90 = var68.getInsets();
    java.util.Locale var91 = var68.getLocale();
    var68.hide();
    java.awt.LayoutManager var93 = var68.getLayout();
    var40.setLayout(var93);
    var5.setLayout(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test304");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    int var34 = var5.getY();
    boolean var35 = var5.getInheritsPopupMenu();
    boolean var36 = var5.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test305");


    tinymonkeys.vue.VueTresor var5 = new tinymonkeys.vue.VueTresor(11, 3, 10, 10, 111);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test306");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    java.awt.Window.Type var58 = var2.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    javax.swing.InputMap var18 = var15.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var19 = var15.getBaselineResizeBehavior();
    boolean var20 = var15.isPreferredSizeSet();
    java.awt.Component var21 = var5.add("", (java.awt.Component)var15);
    java.awt.Cursor var22 = var15.getCursor();
    boolean var23 = var15.getVerifyInputWhenFocusTarget();
    java.awt.peer.ComponentPeer var24 = var15.getPeer();
    java.lang.String var25 = var15.getToolTipText();
    var15.setDimensions(111, (-1), 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test308");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    java.awt.event.InputMethodListener[] var18 = var5.getInputMethodListeners();
    boolean var19 = var5.isMaximumSizeSet();
    java.awt.Component var22 = var5.locate(111, 111);
    var5.setToolTipText("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test309");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    java.awt.Color var8 = var5.getForeground();
    var5.show();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.image.ColorModel var23 = var15.getColorModel();
    var15.setLocation(100, 1);
    boolean var27 = var15.isDoubleBuffered();
    java.util.Locale var28 = var15.getLocale();
    java.awt.Dimension var29 = var15.getMaximumSize();
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.image.ColorModel var43 = var35.getColorModel();
    boolean var44 = var35.getVerifyInputWhenFocusTarget();
    int var45 = var35.getWidth();
    java.util.Locale var46 = var35.getLocale();
    var15.setLocale(var46);
    javax.swing.plaf.PanelUI var48 = var15.getUI();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var61 = var54.isAncestorOf((java.awt.Component)var60);
    java.awt.Point var62 = var60.location();
    java.awt.Point var63 = var15.getLocation(var62);
    var5.setLocation(var63);
    java.beans.PropertyChangeListener[] var66 = var5.getPropertyChangeListeners("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test310");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getCursorType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var2.areFocusTraversalKeysSet(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test311");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var22 = new tinymonkeys.modele.Pirate(var2, "hi!");
    tinymonkeys.modele.BandeDeSingesErratiques var23 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    javax.swing.event.EventListenerList var24 = var23.getBandeSingesEcouteurs();
    javax.swing.event.EventListenerList var25 = var23.getBandeSingesEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test312");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    boolean var83 = var2.isResizable();
    boolean var84 = var2.isMaximumSizeSet();
    java.awt.event.WindowStateListener[] var85 = var2.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test313");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    var17.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test314");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test315");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.setFocusCycleRoot(false);
    var5.transferFocus();
    java.awt.Insets var32 = var5.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test316");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var1);
    var1.lanceEvolutionsPersonnages();

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test317");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    boolean var31 = var5.getAutoscrolls();
    boolean var32 = var5.isFontSet();
    java.awt.Component.BaselineResizeBehavior var33 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test318");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    tinymonkeys.controleur.Controller var19 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var20 = new tinymonkeys.vue.Fenetre("PanelUI", var19);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    boolean var34 = var26.isFocusTraversalPolicyProvider();
    boolean var37 = var26.contains(10, 111);
    java.awt.Dimension var38 = var26.minimumSize();
    tinymonkeys.vue.VueElement var44 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var45 = var44.getPeer();
    var44.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var44.repaint();
    java.lang.Object var51 = var44.getTreeLock();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var58 = var57.getPeer();
    var57.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var57.repaint();
    var57.updateUI();
    int var65 = var44.getComponentZOrder((java.awt.Component)var57);
    java.awt.Insets var66 = var44.getInsets();
    java.util.Locale var67 = var44.getLocale();
    var44.hide();
    java.awt.LayoutManager var69 = var44.getLayout();
    var26.setLayout(var69);
    var20.setLayout(var69);
    java.awt.Color var72 = var20.getBackground();
    java.awt.Toolkit var73 = var20.getToolkit();
    javax.swing.TransferHandler var74 = var20.getTransferHandler();
    var20.setVisible(false);
    var20.setVisible(false);
    var2.addKeyListener((java.awt.event.KeyListener)var20);
    int var80 = var20.getCursorType();
    java.awt.Component var83 = var20.findComponentAt(11, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test319");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isShowing();
    java.beans.VetoableChangeListener[] var9 = var5.getVetoableChangeListeners();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.event.HierarchyListener[] var23 = var15.getHierarchyListeners();
    java.awt.event.InputMethodListener[] var24 = var15.getInputMethodListeners();
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var32 = var31.getPeer();
    var31.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var31.repaint();
    var31.updateUI();
    var31.show(false);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    java.awt.Component var56 = var46.locate(0, (-1));
    var46.requestFocus();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    boolean var72 = var63.getVerifyInputWhenFocusTarget();
    var63.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var77 = var63.getBounds();
    var46.paintImmediately(var77);
    var31.computeVisibleRect(var77);
    tinymonkeys.vue.VueElement var85 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var85.enable(true);
    java.awt.Toolkit var88 = var85.getToolkit();
    java.awt.Component var90 = var31.add((java.awt.Component)var85, 0);
    javax.swing.InputMap var91 = var31.getInputMap();
    var5.putClientProperty((java.lang.Object)var25, (java.lang.Object)var31);
    java.awt.Color var93 = var5.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test320");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var14 = var5.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.image.ColorModel var28 = var20.getColorModel();
    var20.setLocation(100, 1);
    boolean var32 = var20.isDoubleBuffered();
    java.util.Locale var33 = var20.getLocale();
    java.awt.Dimension var34 = var20.getMaximumSize();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var41 = var40.getPeer();
    var40.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var40.repaint();
    java.lang.Object var47 = var40.getTreeLock();
    java.awt.image.ColorModel var48 = var40.getColorModel();
    boolean var49 = var40.getVerifyInputWhenFocusTarget();
    int var50 = var40.getWidth();
    java.util.Locale var51 = var40.getLocale();
    var20.setLocale(var51);
    tinymonkeys.vue.VueElement var58 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var59 = var58.getPeer();
    var58.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var58.repaint();
    java.lang.Object var65 = var58.getTreeLock();
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var72 = var71.getPeer();
    var71.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var71.repaint();
    var71.updateUI();
    int var79 = var58.getComponentZOrder((java.awt.Component)var71);
    tinymonkeys.vue.VueElement var85 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var86 = var85.getPeer();
    var85.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var85.transferFocusUpCycle();
    boolean var92 = var85.getInheritsPopupMenu();
    java.awt.Dimension var93 = var85.minimumSize();
    java.awt.Dimension var94 = var71.getSize(var93);
    var20.setMaximumSize(var94);
    java.awt.Dimension var96 = var5.getSize(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test321");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.Color var57 = var2.getBackground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDefaultCloseOperation(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test322");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    boolean var27 = var17.isFontSet();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    java.awt.Component var43 = var33.locate(0, (-1));
    var33.setAlignmentX(0.5f);
    java.awt.Font var46 = var33.getFont();
    tinymonkeys.vue.VueElement var53 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var54 = var53.getUIClassID();
    float var55 = var53.getAlignmentX();
    boolean var56 = var53.isOptimizedDrawingEnabled();
    var33.putClientProperty((java.lang.Object)' ', (java.lang.Object)var56);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.Component var73 = var63.locate(0, (-1));
    var63.setAlignmentX(0.5f);
    java.awt.Font var76 = var63.getFont();
    java.awt.FontMetrics var77 = var33.getFontMetrics(var76);
    java.awt.FontMetrics var78 = var17.getFontMetrics(var76);
    java.awt.Component[] var79 = var17.getComponents();
    var17.repaint(100L);
    boolean var82 = var17.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "PanelUI"+ "'", var54.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test323");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    int var3 = var1.getX();
    var1.positionInitiale((-1), 10);
    var1.setAvatar("PanelUI");
    var1.setAvatar("");
    var1.positionInitiale(1, (-1));
    int var14 = var1.getX();
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var16 = var15.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = var15.getSingesErratiques();
    tinymonkeys.controleur.Controller var19 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var20 = new tinymonkeys.vue.Fenetre("PanelUI", var19);
    var20.pack();
    var20.addNotify();
    var17.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var20);
    tinymonkeys.controleur.Controller var25 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var26 = new tinymonkeys.vue.Fenetre("PanelUI", var25);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var39 = var32.isAncestorOf((java.awt.Component)var38);
    boolean var40 = var32.isFocusTraversalPolicyProvider();
    boolean var43 = var32.contains(10, 111);
    java.awt.Dimension var44 = var32.minimumSize();
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var51 = var50.getPeer();
    var50.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var50.repaint();
    java.lang.Object var57 = var50.getTreeLock();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    var63.updateUI();
    int var71 = var50.getComponentZOrder((java.awt.Component)var63);
    java.awt.Insets var72 = var50.getInsets();
    java.util.Locale var73 = var50.getLocale();
    var50.hide();
    java.awt.LayoutManager var75 = var50.getLayout();
    var32.setLayout(var75);
    var26.setLayout(var75);
    javax.accessibility.AccessibleContext var78 = var26.getAccessibleContext();
    java.lang.String var79 = var26.getTitle();
    var17.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var26);
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "PanelUI"+ "'", var79.equals("PanelUI"));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test324");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    var2.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test325");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor(100, 111);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test326");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    boolean var57 = var2.isShowing();
    tinymonkeys.controleur.Controller var59 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var60 = new tinymonkeys.vue.Fenetre("PanelUI", var59);
    int var61 = var60.getExtendedState();
    java.awt.Window.Type var62 = var60.getType();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    javax.swing.InputMap var71 = var68.getInputMap(0);
    boolean var72 = var68.isDisplayable();
    boolean var73 = var68.getFocusTraversalKeysEnabled();
    java.awt.Dimension var74 = var68.getMaximumSize();
    var60.setMinimumSize(var74);
    javax.swing.JLayeredPane var76 = var60.getLayeredPane();
    var2.setLayeredPane(var76);
    tinymonkeys.modele.Ile var80 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var81 = new tinymonkeys.modele.BandeDeSingesErratiques(var80);
    int[][] var82 = new int[][] { };
    var80.creationCarte(var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      tinymonkeys.vue.GestionImages var84 = new tinymonkeys.vue.GestionImages(var76, 0, (-1), var82);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test327");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    var5.setFocusTraversalPolicyProvider(true);
    var5.disable();
    boolean var20 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test328");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    int var28 = var5.countComponents();
    tinymonkeys.vue.VueSingeErratique var34 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var35 = var34.getGraphicsConfiguration();
    int var36 = var34.getX();
    java.awt.event.FocusListener[] var37 = var34.getFocusListeners();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    javax.swing.InputMap var46 = var43.getInputMap(0);
    boolean var47 = var43.isShowing();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    boolean var49 = var43.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var62 = var55.isAncestorOf((java.awt.Component)var61);
    javax.swing.plaf.PanelUI var63 = var55.getUI();
    var55.transferFocusDownCycle();
    var55.doLayout();
    tinymonkeys.vue.VueElement var71 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var71.enable(true);
    int var74 = var71.getY();
    boolean var75 = var71.isValid();
    java.awt.Toolkit var76 = var71.getToolkit();
    var43.add((java.awt.Component)var55, (java.lang.Object)var76);
    java.beans.PropertyChangeListener[] var79 = var43.getPropertyChangeListeners("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Color var80 = var43.getBackground();
    var34.setForeground(var80);
    var5.setForeground(var80);
    var5.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test329");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isFontSet();
    float var8 = var5.getAlignmentY();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var17 = var14.locate(11, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    var23.updateUI();
    var23.show(false);
    float var33 = var23.getAlignmentY();
    java.awt.Rectangle var34 = var23.bounds();
    java.awt.Rectangle var35 = var14.getBounds(var34);
    var5.setBounds(var34);
    java.awt.peer.ComponentPeer var37 = var5.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test330");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    var1.demandeDeplacement(10, (-1));
    int var6 = var1.getX();
    java.lang.String var7 = var1.getAvatar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test331");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    var2.setLocationByPlatform(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDefaultCloseOperation(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test332");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    java.lang.String var17 = var5.getName();
    var5.setIgnoreRepaint(true);
    boolean var20 = var5.isVisible();
    java.awt.event.KeyListener[] var21 = var5.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test333");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    java.awt.ComponentOrientation var10 = var2.getComponentOrientation();
    var2.liberationClavier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test334");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.BandeDeSingesErratiques var6 = var0.getSingesErratiques();
    tinymonkeys.controleur.Controller var8 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var9 = new tinymonkeys.vue.Fenetre("PanelUI", var8);
    javax.accessibility.AccessibleContext var10 = var9.getAccessibleContext();
    boolean var11 = var9.isBackgroundSet();
    var6.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var9);
    java.util.Locale var13 = var9.getLocale();
    var9.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test335");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var2 = var0.getSingesErratiques();
    tinymonkeys.controleur.Controller var4 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var5 = new tinymonkeys.vue.Fenetre("PanelUI", var4);
    var5.pack();
    var5.addNotify();
    var2.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var5);
    var5.toBack();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.Component var25 = var15.locate(0, (-1));
    var15.setAlignmentX(0.5f);
    java.awt.Font var28 = var15.getFont();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var43 = var42.getUIClassID();
    javax.swing.TransferHandler var44 = var42.getTransferHandler();
    java.awt.Color var45 = var42.getForeground();
    var34.setBackground(var45);
    var15.setForeground(var45);
    var5.setBackground(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test336");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    var5.setFocusCycleRoot(true);
    var5.disable();
    boolean var16 = var5.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test337");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    boolean var65 = var2.isAutoRequestFocus();
    java.awt.MenuBar var66 = var2.getMenuBar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDefaultCloseOperation(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test338");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    boolean var49 = var5.isForegroundSet();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var58 = var55.locate(11, 10);
    java.awt.Container var59 = var55.getParent();
    var55.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var62 = var55.getDropTarget();
    boolean var63 = var55.isFocusTraversalPolicySet();
    var5.setNextFocusableComponent((java.awt.Component)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var66 = var55.getFocusTraversalKeys(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test339");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Toolkit var18 = var5.getToolkit();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var27 = var24.locate(11, 10);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    var33.updateUI();
    var33.show(false);
    float var43 = var33.getAlignmentY();
    java.awt.Rectangle var44 = var33.bounds();
    java.awt.Rectangle var45 = var24.getBounds(var44);
    java.awt.Rectangle var46 = var5.getBounds(var44);
    tinymonkeys.vue.VueElement var52 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var53 = var52.getPeer();
    var52.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var52.repaint();
    java.lang.Object var59 = var52.getTreeLock();
    java.awt.image.ColorModel var60 = var52.getColorModel();
    var52.setLocation(100, 1);
    tinymonkeys.vue.VueElement var69 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var70 = var69.getUIClassID();
    javax.swing.TransferHandler var71 = var69.getTransferHandler();
    java.awt.Color var72 = var69.getForeground();
    var52.setForeground(var72);
    var5.setBackground(var72);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", '#', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "PanelUI"+ "'", var70.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test340");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    var2.repaint(100L, 111, 11, 3, 111);
    java.awt.Toolkit var89 = var2.getToolkit();
    java.awt.Rectangle var90 = var2.getMaximizedBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test341");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    boolean var17 = var5.isFocusTraversable();
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var24 = var23.getPeer();
    var23.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var23.repaint();
    java.lang.Object var30 = var23.getTreeLock();
    java.awt.Component var33 = var23.locate(0, (-1));
    var23.setAlignmentX(0.5f);
    java.awt.Font var36 = var23.getFont();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    float var45 = var43.getAlignmentX();
    boolean var46 = var43.isOptimizedDrawingEnabled();
    var23.putClientProperty((java.lang.Object)' ', (java.lang.Object)var46);
    var23.transferFocusBackward();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.awt.GraphicsConfiguration var61 = var54.getGraphicsConfiguration();
    var54.setFocusCycleRoot(true);
    var5.add((java.awt.Component)var23, (java.lang.Object)true);
    java.awt.GraphicsConfiguration var65 = var23.getGraphicsConfiguration();
    var23.firePropertyChange("hi!", (short)100, (short)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test342");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    var5.firePropertyChange("hi!", 1, 11);
    var5.move(0, 10);
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    java.awt.image.ColorModel var49 = var41.getColorModel();
    var41.setLocation(100, 1);
    boolean var53 = var41.isDoubleBuffered();
    java.util.Locale var54 = var41.getLocale();
    java.awt.Dimension var55 = var41.getMaximumSize();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.repaint();
    java.lang.Object var68 = var61.getTreeLock();
    java.awt.image.ColorModel var69 = var61.getColorModel();
    boolean var70 = var61.getVerifyInputWhenFocusTarget();
    int var71 = var61.getWidth();
    java.util.Locale var72 = var61.getLocale();
    var41.setLocale(var72);
    javax.swing.plaf.PanelUI var74 = var41.getUI();
    tinymonkeys.vue.VueElement var80 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var86 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var87 = var80.isAncestorOf((java.awt.Component)var86);
    java.awt.Point var88 = var86.location();
    java.awt.Point var89 = var41.getLocation(var88);
    java.awt.Point var90 = var5.getLocation(var88);
    var5.setDimensions(100, 10, 3);
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test343");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusBackward();
    var5.requestFocus();
    boolean var21 = var5.requestFocusInWindow();
    var5.setBounds((-1), 3, 1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test344");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var5.setMinimumSize(var31);
    boolean var34 = var5.isMaximumSizeSet();
    var5.layout();
    var5.firePropertyChange("", 10.0f, 100.0f);
    var5.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 3, (-1));
    var5.addNotify();
    var5.paintImmediately(3, 3, 0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test345");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    boolean var14 = var5.isShowing();
    boolean var15 = var5.isFocusTraversalPolicySet();
    tinymonkeys.vue.VueElement var21 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var22 = var21.getUIClassID();
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    var28.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var28.transferFocusUpCycle();
    boolean var35 = var28.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    var21.add((java.awt.Component)var28, (java.lang.Object)var41);
    var41.invalidate();
    javax.swing.InputVerifier var65 = var41.getInputVerifier();
    var41.setEnabled(false);
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var74 = var73.getPeer();
    javax.swing.InputMap var76 = var73.getInputMap(0);
    boolean var77 = var73.isShowing();
    java.awt.dnd.DropTarget var78 = var73.getDropTarget();
    java.awt.Dimension var79 = var73.getMaximumSize();
    java.awt.Dimension var80 = var41.getSize(var79);
    var5.setMinimumSize(var79);
    var5.setSize(11, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "PanelUI"+ "'", var22.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test346");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    java.awt.Component var22 = var2.getMostRecentFocusOwner();
    java.awt.Shape var23 = var2.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test347");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.util.List var80 = var2.getIconImages();
    java.lang.String var81 = var2.getTitle();
    var2.reshape(100, 100, 3, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "PanelUI"+ "'", var81.equals("PanelUI"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test348");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.im.InputContext var13 = var11.getInputContext();
    float var14 = var11.getAlignmentX();
    var11.repaint(0L, 100, 1, 11, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test349");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var25 = var24.getPeer();
    javax.swing.InputMap var27 = var24.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var28 = var24.getBaselineResizeBehavior();
    boolean var29 = var24.isPreferredSizeSet();
    java.awt.Component var30 = var14.add("", (java.awt.Component)var24);
    java.awt.Cursor var31 = var24.getCursor();
    boolean var32 = var24.getVerifyInputWhenFocusTarget();
    javax.swing.ActionMap var33 = var24.getActionMap();
    boolean var34 = var24.isOptimizedDrawingEnabled();
    java.awt.Color var35 = var24.getForeground();
    java.awt.Component var36 = var5.add((java.awt.Component)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test350");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    int var11 = var5.getBaseline(111, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test351");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    var2.toFront();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test352");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Component var4 = var2.getFocusOwner();
    var2.setBounds(0, 111, (-1), (-1));
    java.awt.ComponentOrientation var10 = var2.getComponentOrientation();
    java.util.Locale var11 = var2.getLocale();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.Component var27 = var17.locate(0, (-1));
    var17.resize((-1), 0);
    var17.transferFocusDownCycle();
    var17.setDebugGraphicsOptions(1);
    java.awt.Dimension var34 = var17.getMaximumSize();
    var17.requestFocus();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var41.enable(true);
    int var44 = var41.getY();
    boolean var45 = var17.isAncestorOf((java.awt.Component)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var47 = var2.add((java.awt.Component)var41, 111);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test353");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    var13.setLocation(100, 1);
    tinymonkeys.vue.VueElement var30 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var31 = var30.getUIClassID();
    javax.swing.TransferHandler var32 = var30.getTransferHandler();
    java.awt.Color var33 = var30.getForeground();
    var13.setForeground(var33);
    boolean var35 = var13.getIgnoreRepaint();
    boolean var36 = var13.isVisible();
    var13.setVisible(true);
    boolean var39 = var13.isOpaque();
    tinymonkeys.vue.VueElement var45 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var46 = var45.getPeer();
    var45.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var45.repaint();
    var45.updateUI();
    var45.show(false);
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.Component var70 = var60.locate(0, (-1));
    var60.requestFocus();
    tinymonkeys.vue.VueElement var77 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var78 = var77.getPeer();
    var77.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var77.repaint();
    java.lang.Object var84 = var77.getTreeLock();
    java.awt.image.ColorModel var85 = var77.getColorModel();
    boolean var86 = var77.getVerifyInputWhenFocusTarget();
    var77.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var91 = var77.getBounds();
    var60.paintImmediately(var91);
    var45.computeVisibleRect(var91);
    var13.setBounds(var91);
    var5.paintImmediately(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test354");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    float var7 = var5.getAlignmentX();
    boolean var8 = var5.isOptimizedDrawingEnabled();
    var5.setEnabled(true);
    java.awt.Point var11 = var5.location();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    boolean var26 = var17.getVerifyInputWhenFocusTarget();
    var17.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var31 = var17.getBounds();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var44 = var37.isAncestorOf((java.awt.Component)var43);
    java.awt.Point var45 = var43.location();
    java.awt.Point var46 = var17.getLocation(var45);
    java.awt.Component var47 = var5.getComponentAt(var46);
    java.awt.Component var50 = var5.findComponentAt(111, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test355");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    java.awt.Component var17 = var5.locate(3, 1);
    var5.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test356");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    java.awt.Insets var20 = var5.getInsets();
    javax.swing.JRootPane var21 = var5.getRootPane();
    var5.setDimensions(0, 111, 11);
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var32 = var31.getPeer();
    var31.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var31.transferFocusUpCycle();
    java.awt.Point var38 = var31.getLocation();
    java.awt.Component var39 = var5.findComponentAt(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test357");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    java.awt.image.ColorModel var34 = var5.getColorModel();
    java.awt.im.InputContext var35 = var5.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test358");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var2.setAvatar("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var6 = var5.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var7 = var5.getSingesErratiques();
    tinymonkeys.controleur.Controller var9 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var10 = new tinymonkeys.vue.Fenetre("PanelUI", var9);
    var10.pack();
    var10.addNotify();
    var7.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var10);
    var10.toBack();
    var2.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test359");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    boolean var38 = var5.requestFocusInWindow();
    var5.firePropertyChange("hi!", 'a', 'a');
    java.awt.LayoutManager var43 = var5.getLayout();
    javax.swing.InputVerifier var44 = var5.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test360");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.transferFocusUpCycle();
    boolean var39 = var32.getInheritsPopupMenu();
    java.awt.Dimension var40 = var32.minimumSize();
    java.awt.Dimension var41 = var18.getSize(var40);
    boolean var42 = var18.isDisplayable();
    var18.enable(true);
    java.awt.im.InputContext var45 = var18.getInputContext();
    var18.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test361");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    boolean var12 = var5.isFocusTraversalPolicySet();
    java.awt.event.KeyListener[] var13 = var5.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test362");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    var20.disable();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    var63.updateUI();
    var63.show(false);
    float var73 = var63.getAlignmentY();
    java.awt.Rectangle var74 = var63.bounds();
    java.awt.Rectangle var75 = var20.getBounds(var74);
    var20.enableInputMethods(false);
    var20.setDoubleBuffered(false);
    var20.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test363");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setResizable(false);
    var2.doLayout();
    var2.setTitle("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    var2.reshape(0, 111, 1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test364");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var2.demandeDeplacement(111, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test365");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.transferFocusUpCycle();
    boolean var68 = var61.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var69 = var61.getBaselineResizeBehavior();
    var61.show();
    var61.setEnabled(false);
    boolean var73 = var61.isMinimumSizeSet();
    var2.setContentPane((java.awt.Container)var61);
    boolean var75 = var2.isAlwaysOnTop();
    boolean var76 = var2.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test366");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    java.awt.Color var8 = var5.getForeground();
    javax.swing.KeyStroke[] var9 = var5.getRegisteredKeyStrokes();
    tinymonkeys.controleur.Controller var11 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var12 = new tinymonkeys.vue.Fenetre("PanelUI", var11);
    javax.accessibility.AccessibleContext var13 = var12.getAccessibleContext();
    javax.accessibility.AccessibleContext var14 = var12.getAccessibleContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var16 = var5.add((java.awt.Component)var12, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test367");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getAutoscrolls();
    var5.transferFocusDownCycle();
    java.awt.Rectangle var16 = var5.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test368");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    var2.pack();
    var2.addNotify();
    java.awt.Graphics var5 = var2.getGraphics();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.image.VolatileImage var8 = var2.createVolatileImage((-1), 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    java.awt.Point var28 = var17.getMousePosition(true);
    int var29 = var17.getY();
    java.awt.Component[] var30 = var17.getComponents();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    java.awt.image.ColorModel var44 = var36.getColorModel();
    var36.setLocation(100, 1);
    boolean var48 = var36.isDoubleBuffered();
    java.util.Locale var49 = var36.getLocale();
    java.awt.Dimension var50 = var36.getMaximumSize();
    java.awt.event.MouseWheelListener[] var51 = var36.getMouseWheelListeners();
    tinymonkeys.vue.VueElement var57 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var57.revalidate();
    var57.setSize(0, 11);
    java.awt.Dimension var62 = var57.getMinimumSize();
    boolean var63 = var57.getAutoscrolls();
    float var64 = var57.getAlignmentX();
    java.lang.Object var65 = var36.getClientProperty((java.lang.Object)var57);
    int var66 = var36.countComponents();
    javax.swing.TransferHandler var67 = var36.getTransferHandler();
    boolean var68 = var36.isOptimizedDrawingEnabled();
    tinymonkeys.vue.VueElement var74 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var75 = var74.getUIClassID();
    tinymonkeys.controleur.Controller var77 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var78 = new tinymonkeys.vue.Fenetre("PanelUI", var77);
    var78.pack();
    var78.addNotify();
    java.awt.Graphics var81 = var78.getGraphics();
    var74.printComponents(var81);
    var36.print(var81);
    var17.printComponents(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "PanelUI"+ "'", var75.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test370");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.event.WindowListener[] var18 = var2.getWindowListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var20 = var2.getFocusTraversalKeys(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test371");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var15 = var5.inside(11, (-1));
    var5.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test372");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    java.awt.Point var28 = var17.getMousePosition(true);
    int var29 = var17.getY();
    javax.swing.JPopupMenu var30 = var17.getComponentPopupMenu();
    var17.resetKeyboardActions();
    boolean var32 = var17.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test373");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.transferFocusDownCycle();
    boolean var39 = var5.isFocusTraversalPolicySet();
    var5.setBounds(10, (-1), 10, 0);
    var5.disable();
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    var51.updateUI();
    var51.show(false);
    boolean var61 = var51.isFocusTraversalPolicyProvider();
    boolean var62 = var51.isManagingFocus();
    java.awt.Dimension var63 = var51.getMaximumSize();
    var5.resize(var63);
    tinymonkeys.vue.VueElement var70 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var73 = var70.locate(11, 10);
    java.awt.Container var74 = var70.getParent();
    var70.setAlignmentX(0.5f);
    java.awt.dnd.DropTarget var77 = var70.getDropTarget();
    boolean var78 = var70.isFocusTraversalPolicySet();
    tinymonkeys.vue.VueElement var84 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var90 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var91 = var84.isAncestorOf((java.awt.Component)var90);
    java.awt.Point var92 = var90.location();
    java.awt.Point var93 = var70.getLocation(var92);
    java.awt.Component var94 = var5.getComponentAt(var92);
    var5.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test374");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    javax.swing.InputMap var31 = var5.getInputMap();
    java.beans.PropertyChangeListener[] var33 = var5.getPropertyChangeListeners("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test375");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.lang.String var7 = var5.toString();
    var5.firePropertyChange("", ' ', ' ');
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.Component var27 = var17.locate(0, (-1));
    var17.requestFocus();
    boolean var29 = var17.isFocusTraversable();
    java.awt.Insets var30 = var17.insets();
    java.awt.Insets var31 = var5.getInsets(var30);
    java.awt.Point var32 = var5.getMousePosition();
    var5.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test376");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    java.awt.Component var20 = var5.add((java.awt.Component)var14);
    var14.paintImmediately((-1), 11, (-1), 0);
    var14.setFocusTraversalPolicyProvider(false);
    var14.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test377");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.doLayout();
    java.awt.event.WindowListener[] var20 = var2.getWindowListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test378");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    java.awt.LayoutManager var34 = var5.getLayout();
    boolean var35 = var5.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test379");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    boolean var17 = var5.isDoubleBuffered();
    java.util.Locale var18 = var5.getLocale();
    java.awt.Dimension var19 = var5.getMaximumSize();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.image.ColorModel var33 = var25.getColorModel();
    boolean var34 = var25.getVerifyInputWhenFocusTarget();
    int var35 = var25.getWidth();
    java.util.Locale var36 = var25.getLocale();
    var5.setLocale(var36);
    javax.swing.plaf.PanelUI var38 = var5.getUI();
    var5.setLocation(11, 1);
    int var42 = var5.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test380");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    java.awt.event.KeyListener[] var50 = var5.getKeyListeners();
    var5.revalidate();
    java.awt.event.InputMethodListener[] var52 = var5.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    java.awt.Dimension var13 = var5.size();
    var5.setSize(11, 3);
    java.awt.Color var17 = var5.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test382");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var13 = var5.getMouseMotionListeners();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var19.revalidate();
    java.lang.String var21 = var19.toString();
    java.awt.Component var22 = var5.add((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var35 = var28.isAncestorOf((java.awt.Component)var34);
    boolean var36 = var28.isFocusTraversalPolicyProvider();
    java.awt.event.MouseMotionListener[] var37 = var28.getMouseMotionListeners();
    javax.swing.ActionMap var38 = var28.getActionMap();
    var5.setActionMap(var38);
    java.awt.Insets var40 = var5.getInsets();
    java.awt.Graphics var41 = var5.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"+ "'", var21.equals("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test383");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    javax.swing.InputMap var11 = var5.getInputMap();
    var5.repaint(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test384");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    java.awt.Toolkit var10 = var5.getToolkit();
    var5.setInheritsPopupMenu(false);
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.lang.Object var25 = var18.getTreeLock();
    java.awt.image.ColorModel var26 = var18.getColorModel();
    var18.setLocation(100, 1);
    boolean var30 = var18.isDoubleBuffered();
    java.util.Locale var31 = var18.getLocale();
    java.awt.Dimension var32 = var18.getMaximumSize();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    java.lang.Object var45 = var38.getTreeLock();
    java.awt.image.ColorModel var46 = var38.getColorModel();
    boolean var47 = var38.getVerifyInputWhenFocusTarget();
    int var48 = var38.getWidth();
    java.util.Locale var49 = var38.getLocale();
    var18.setLocale(var49);
    boolean var51 = var18.isFocusTraversalPolicyProvider();
    boolean var52 = var5.isAncestorOf((java.awt.Component)var18);
    var5.setFocusable(false);
    javax.swing.InputMap var55 = var5.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test385");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var26.revalidate();
    var26.setSize(0, 11);
    java.awt.Dimension var31 = var26.getMinimumSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var5.setMinimumSize(var31);
    boolean var34 = var5.isMaximumSizeSet();
    boolean var35 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test386");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    int[][] var3 = var2.getCarte();
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique(111, 10, var2);
    boolean var7 = var2.singeEstPresent(3, 10);
    tinymonkeys.controleur.Controller var9 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var10 = new tinymonkeys.vue.Fenetre("PanelUI", var9);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var23 = var16.isAncestorOf((java.awt.Component)var22);
    boolean var24 = var16.isFocusTraversalPolicyProvider();
    boolean var27 = var16.contains(10, 111);
    java.awt.Dimension var28 = var16.minimumSize();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    var47.updateUI();
    int var55 = var34.getComponentZOrder((java.awt.Component)var47);
    java.awt.Insets var56 = var34.getInsets();
    java.util.Locale var57 = var34.getLocale();
    var34.hide();
    java.awt.LayoutManager var59 = var34.getLayout();
    var16.setLayout(var59);
    var10.setLayout(var59);
    java.awt.Color var62 = var10.getBackground();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var10);
    tinymonkeys.modele.Pirate var64 = var2.getPirate();
    int var65 = var64.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test387");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    java.awt.Component[] var7 = var5.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    int[][] var3 = var2.getCarte();
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique(111, 10, var2);
    boolean var7 = var2.singeEstPresent(10, 11);
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test389");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    var2.setVisible(false);
    int var59 = var2.getDefaultCloseOperation();
    java.awt.Window var60 = var2.getOwner();
    boolean var61 = var2.isAutoRequestFocus();
    java.awt.event.WindowStateListener[] var62 = var2.getWindowStateListeners();
    java.awt.Container var63 = var2.getFocusCycleRootAncestor();
    javax.accessibility.AccessibleContext var64 = var2.getAccessibleContext();
    java.awt.Graphics var65 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    java.awt.Image var16 = var5.createImage(0, 1);
    var5.enable(true);
    var5.doLayout();
    javax.swing.ActionMap var20 = var5.getActionMap();
    int var21 = var5.getWidth();
    var5.setOpaque(true);
    java.awt.Dimension var24 = var5.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test391");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    boolean var15 = var5.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var3 = var2.getPirate();
    java.lang.String var4 = var3.getAvatar();
    javax.swing.event.EventListenerList var5 = var3.getPirateEcouteurs();
    tinymonkeys.controleur.Controller var7 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var8 = new tinymonkeys.vue.Fenetre("PanelUI", var7);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var21 = var14.isAncestorOf((java.awt.Component)var20);
    boolean var22 = var14.isFocusTraversalPolicyProvider();
    boolean var25 = var14.contains(10, 111);
    java.awt.Dimension var26 = var14.minimumSize();
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.repaint();
    java.lang.Object var39 = var32.getTreeLock();
    tinymonkeys.vue.VueElement var45 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var46 = var45.getPeer();
    var45.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var45.repaint();
    var45.updateUI();
    int var53 = var32.getComponentZOrder((java.awt.Component)var45);
    java.awt.Insets var54 = var32.getInsets();
    java.util.Locale var55 = var32.getLocale();
    var32.hide();
    java.awt.LayoutManager var57 = var32.getLayout();
    var14.setLayout(var57);
    var8.setLayout(var57);
    java.awt.Color var60 = var8.getBackground();
    java.awt.Toolkit var61 = var8.getToolkit();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var74 = var67.isAncestorOf((java.awt.Component)var73);
    javax.swing.plaf.PanelUI var75 = var67.getUI();
    java.awt.Image var78 = var67.createImage(0, 1);
    var67.enable(true);
    java.awt.Color var81 = var67.getBackground();
    var8.setBackground(var81);
    var8.setLocation(111, 10);
    java.awt.Container var86 = var8.getFocusCycleRootAncestor();
    var8.setState(0);
    boolean var89 = var8.isResizable();
    var3.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var8);
    var8.transferFocusUpCycle();
    var1.enregistreEcPirate((tinymonkeys.modele.PirateEcouteur)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test393");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var68 = var61.isAncestorOf((java.awt.Component)var67);
    javax.swing.plaf.PanelUI var69 = var61.getUI();
    java.awt.Image var72 = var61.createImage(0, 1);
    var61.enable(true);
    java.awt.Color var75 = var61.getBackground();
    var2.setBackground(var75);
    var2.setLocation(111, 10);
    java.awt.Container var80 = var2.getFocusCycleRootAncestor();
    var2.setState(0);
    boolean var83 = var2.isAutoRequestFocus();
    java.awt.Component var84 = var2.getMostRecentFocusOwner();
    java.awt.Rectangle var85 = var84.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test394");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test395");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.image.ColorModel var25 = var17.getColorModel();
    var17.setLocation(100, 1);
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var35 = var34.getUIClassID();
    javax.swing.TransferHandler var36 = var34.getTransferHandler();
    java.awt.Color var37 = var34.getForeground();
    var17.setForeground(var37);
    boolean var39 = var17.getIgnoreRepaint();
    java.awt.Component var40 = var5.add("PanelUI", (java.awt.Component)var17);
    var40.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test396");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    int[][] var2 = new int[][] { };
    var0.creationCarte(var2);
    tinymonkeys.modele.Pirate var5 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.Pirate var7 = new tinymonkeys.modele.Pirate(var0, "");
    tinymonkeys.modele.Pirate var8 = var0.getPirate();
    tinymonkeys.modele.Tresor var9 = var0.getTresor();
    tinymonkeys.modele.Pirate var11 = new tinymonkeys.modele.Pirate(var0, "PanelUI");
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    tinymonkeys.modele.Ile var13 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var14 = var13.getSingesErratiques();
    tinymonkeys.modele.Pirate var15 = var13.getPirate();
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    tinymonkeys.modele.SingeErratique var20 = new tinymonkeys.modele.SingeErratique((-1), 11, var18);
    tinymonkeys.modele.Ile var21 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var22 = new tinymonkeys.modele.BandeDeSingesErratiques(var21);
    int[][] var23 = new int[][] { };
    var21.creationCarte(var23);
    var18.creationCarte(var23);
    tinymonkeys.modele.Ile var28 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var29 = new tinymonkeys.modele.BandeDeSingesErratiques(var28);
    tinymonkeys.modele.SingeErratique var30 = new tinymonkeys.modele.SingeErratique((-1), 11, var28);
    tinymonkeys.modele.Ile var31 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var32 = new tinymonkeys.modele.BandeDeSingesErratiques(var31);
    int[][] var33 = new int[][] { };
    var31.creationCarte(var33);
    var28.creationCarte(var33);
    var18.creationCarte(var33);
    var13.creationCarte(var33);
    var13.demandeDeplacementPirate(111, 11);
    tinymonkeys.modele.Tresor var41 = var13.getTresor();
    tinymonkeys.modele.Ile var42 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var43 = var42.getSingesErratiques();
    tinymonkeys.modele.Pirate var44 = var42.getPirate();
    tinymonkeys.modele.Ile var47 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var48 = new tinymonkeys.modele.BandeDeSingesErratiques(var47);
    tinymonkeys.modele.SingeErratique var49 = new tinymonkeys.modele.SingeErratique((-1), 11, var47);
    tinymonkeys.modele.Ile var50 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var51 = new tinymonkeys.modele.BandeDeSingesErratiques(var50);
    int[][] var52 = new int[][] { };
    var50.creationCarte(var52);
    var47.creationCarte(var52);
    tinymonkeys.modele.Ile var57 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var58 = new tinymonkeys.modele.BandeDeSingesErratiques(var57);
    tinymonkeys.modele.SingeErratique var59 = new tinymonkeys.modele.SingeErratique((-1), 11, var57);
    tinymonkeys.modele.Ile var60 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var61 = new tinymonkeys.modele.BandeDeSingesErratiques(var60);
    int[][] var62 = new int[][] { };
    var60.creationCarte(var62);
    var57.creationCarte(var62);
    var47.creationCarte(var62);
    var42.creationCarte(var62);
    tinymonkeys.modele.Ile var67 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var68 = var67.getSingesErratiques();
    tinymonkeys.modele.Pirate var69 = var67.getPirate();
    tinymonkeys.modele.Ile var72 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var73 = new tinymonkeys.modele.BandeDeSingesErratiques(var72);
    tinymonkeys.modele.SingeErratique var74 = new tinymonkeys.modele.SingeErratique((-1), 11, var72);
    tinymonkeys.modele.Ile var75 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var76 = new tinymonkeys.modele.BandeDeSingesErratiques(var75);
    int[][] var77 = new int[][] { };
    var75.creationCarte(var77);
    var72.creationCarte(var77);
    tinymonkeys.modele.Ile var82 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var83 = new tinymonkeys.modele.BandeDeSingesErratiques(var82);
    tinymonkeys.modele.SingeErratique var84 = new tinymonkeys.modele.SingeErratique((-1), 11, var82);
    tinymonkeys.modele.Ile var85 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var86 = new tinymonkeys.modele.BandeDeSingesErratiques(var85);
    int[][] var87 = new int[][] { };
    var85.creationCarte(var87);
    var82.creationCarte(var87);
    var72.creationCarte(var87);
    var67.creationCarte(var87);
    var42.creationCarte(var87);
    var13.creationCarte(var87);
    var0.creationCarte(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test397");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Dimension var18 = var2.getSize();
    java.util.List var19 = var2.getIconImages();
    boolean var20 = var2.isVisible();
    java.awt.event.MouseListener[] var21 = var2.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test398");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var8 = var5.locate(11, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    var14.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var14.repaint();
    var14.updateUI();
    var14.show(false);
    float var24 = var14.getAlignmentY();
    java.awt.Rectangle var25 = var14.bounds();
    java.awt.Rectangle var26 = var5.getBounds(var25);
    boolean var27 = var5.isFocusCycleRoot();
    boolean var29 = var5.requestFocus(false);
    javax.swing.border.Border var30 = var5.getBorder();
    var5.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test399");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var21 = new tinymonkeys.modele.Pirate(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var24 = var2.valeurCarte(10, 3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test400");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    java.lang.Object var61 = var54.getTreeLock();
    java.awt.Component var64 = var54.locate(0, (-1));
    var54.setAlignmentX(0.5f);
    java.awt.Font var67 = var54.getFont();
    tinymonkeys.vue.VueElement var73 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var73.enable(true);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var82 = var81.getUIClassID();
    javax.swing.TransferHandler var83 = var81.getTransferHandler();
    java.awt.Color var84 = var81.getForeground();
    var73.setBackground(var84);
    var54.setForeground(var84);
    java.awt.Font var87 = var54.getFont();
    java.awt.FontMetrics var88 = var5.getFontMetrics(var87);
    java.awt.Component.BaselineResizeBehavior var89 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "PanelUI"+ "'", var82.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test401");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isVisible();
    boolean var8 = var5.isCursorSet();
    var5.show(true);
    var5.enable();
    boolean var12 = var5.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test402");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.event.FocusListener[] var8 = var5.getFocusListeners();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    boolean var20 = var14.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    javax.swing.plaf.PanelUI var34 = var26.getUI();
    var26.transferFocusDownCycle();
    var26.doLayout();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var42.enable(true);
    int var45 = var42.getY();
    boolean var46 = var42.isValid();
    java.awt.Toolkit var47 = var42.getToolkit();
    var14.add((java.awt.Component)var26, (java.lang.Object)var47);
    java.beans.PropertyChangeListener[] var50 = var14.getPropertyChangeListeners("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Color var51 = var14.getBackground();
    var5.setForeground(var51);
    boolean var53 = var5.isDoubleBuffered();
    var5.setAlignmentX(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test403");


    tinymonkeys.vue.VuePersonnage var5 = new tinymonkeys.vue.VuePersonnage((-1), (-1), 0, 1, 0);
    boolean var6 = var5.getFocusTraversalKeysEnabled();
    var5.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test404");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isAutoRequestFocus();
    java.awt.Container var65 = var2.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test405");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var3 = var2.getPirate();
    var2.demandeDeplacementPirate(1, 1);
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = var7.getSingesErratiques();
    tinymonkeys.modele.Pirate var9 = var7.getPirate();
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    tinymonkeys.modele.Ile var22 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var23 = new tinymonkeys.modele.BandeDeSingesErratiques(var22);
    tinymonkeys.modele.SingeErratique var24 = new tinymonkeys.modele.SingeErratique((-1), 11, var22);
    tinymonkeys.modele.Ile var25 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var26 = new tinymonkeys.modele.BandeDeSingesErratiques(var25);
    int[][] var27 = new int[][] { };
    var25.creationCarte(var27);
    var22.creationCarte(var27);
    var12.creationCarte(var27);
    var7.creationCarte(var27);
    tinymonkeys.modele.Ile var32 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var33 = var32.getSingesErratiques();
    tinymonkeys.modele.Pirate var34 = var32.getPirate();
    tinymonkeys.modele.Ile var37 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var38 = new tinymonkeys.modele.BandeDeSingesErratiques(var37);
    tinymonkeys.modele.SingeErratique var39 = new tinymonkeys.modele.SingeErratique((-1), 11, var37);
    tinymonkeys.modele.Ile var40 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var41 = new tinymonkeys.modele.BandeDeSingesErratiques(var40);
    int[][] var42 = new int[][] { };
    var40.creationCarte(var42);
    var37.creationCarte(var42);
    tinymonkeys.modele.Ile var47 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var48 = new tinymonkeys.modele.BandeDeSingesErratiques(var47);
    tinymonkeys.modele.SingeErratique var49 = new tinymonkeys.modele.SingeErratique((-1), 11, var47);
    tinymonkeys.modele.Ile var50 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var51 = new tinymonkeys.modele.BandeDeSingesErratiques(var50);
    int[][] var52 = new int[][] { };
    var50.creationCarte(var52);
    var47.creationCarte(var52);
    var37.creationCarte(var52);
    var32.creationCarte(var52);
    var7.creationCarte(var52);
    var2.setCarte(var52);
    tinymonkeys.modele.SingeErratique var59 = new tinymonkeys.modele.SingeErratique(111, 0, var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var59.deplacerSinge();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test406");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    boolean var49 = var5.isFocusTraversalPolicyProvider();
    java.awt.Font var50 = var5.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test407");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    int var27 = var5.getY();
    var5.validate();
    java.awt.event.KeyListener[] var29 = var5.getKeyListeners();
    javax.swing.event.AncestorListener[] var30 = var5.getAncestorListeners();
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    var36.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var36.repaint();
    java.lang.Object var43 = var36.getTreeLock();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    var49.updateUI();
    int var57 = var36.getComponentZOrder((java.awt.Component)var49);
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    javax.swing.InputMap var66 = var63.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var67 = var63.getBaselineResizeBehavior();
    var63.layout();
    var5.add((java.awt.Component)var36, (java.lang.Object)var63);
    var36.enable(true);
    java.awt.Component var74 = var36.locate(10, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test408");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    int var39 = var5.getY();
    boolean var40 = var5.isRequestFocusEnabled();
    java.awt.event.MouseMotionListener[] var41 = var5.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test409");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    boolean var14 = var5.isLightweight();
    var5.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test410");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    tinymonkeys.vue.VueElement var61 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var62 = var61.getPeer();
    var61.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var61.transferFocusUpCycle();
    boolean var68 = var61.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var69 = var61.getBaselineResizeBehavior();
    var61.show();
    var61.setEnabled(false);
    boolean var73 = var61.isMinimumSizeSet();
    var2.setContentPane((java.awt.Container)var61);
    boolean var75 = var2.isAlwaysOnTop();
    java.awt.Graphics var76 = var2.getGraphics();
    boolean var77 = var2.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var33 = var32.getPeer();
    var32.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var32.transferFocusUpCycle();
    boolean var39 = var32.getInheritsPopupMenu();
    java.awt.Dimension var40 = var32.minimumSize();
    java.awt.Dimension var41 = var18.getSize(var40);
    boolean var42 = var18.isDisplayable();
    boolean var43 = var18.isFocusCycleRoot();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    java.lang.Object var56 = var49.getTreeLock();
    java.awt.Component var59 = var49.locate(0, (-1));
    var49.requestFocus();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var67 = var66.getPeer();
    var66.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var66.repaint();
    java.lang.Object var73 = var66.getTreeLock();
    java.awt.image.ColorModel var74 = var66.getColorModel();
    boolean var75 = var66.getVerifyInputWhenFocusTarget();
    var66.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var80 = var66.getBounds();
    var49.paintImmediately(var80);
    boolean var82 = var49.requestFocusInWindow();
    var49.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var87 = var49.getMaximumSize();
    java.awt.Dimension var88 = var18.getSize(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test412");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.hasFocus();
    javax.swing.InputMap var8 = var5.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test413");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    boolean var64 = var2.isShowing();
    var2.toFront();
    boolean var66 = var2.isUndecorated();
    var2.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test414");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Dimension var18 = var2.getSize();
    var2.liberationClavier();
    var2.repaint(10L, 1, 100, 100, 1);
    java.awt.event.HierarchyBoundsListener[] var26 = var2.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test415");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    var25.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)10);
    java.awt.Dimension var52 = var25.getMaximumSize();
    javax.swing.JRootPane var53 = var25.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test416");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.LayoutManager var30 = var5.getLayout();
    java.awt.Dimension var31 = var5.size();
    java.awt.Dimension var32 = var5.size();
    java.awt.im.InputContext var33 = var5.getInputContext();
    var5.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test417");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    java.awt.Component var59 = var5.getComponentAt(1, 1);
    java.lang.String var60 = var5.getUIClassID();
    var5.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PanelUI"+ "'", var60.equals("PanelUI"));

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    boolean var18 = var2.isLocationByPlatform();
    var2.setState(100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    boolean var22 = var2.isAlwaysOnTop();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setOpacity(100.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test419");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    var5.setFocusTraversalPolicyProvider(true);
    java.awt.Point var19 = var5.getLocation();
    var5.addNotify();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var33 = var26.isAncestorOf((java.awt.Component)var32);
    boolean var34 = var26.isFocusTraversalPolicyProvider();
    boolean var35 = var26.isShowing();
    boolean var36 = var26.isFocusTraversalPolicySet();
    var26.move(1, 10);
    var26.updateUI();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    java.lang.Object var53 = var46.getTreeLock();
    java.awt.image.ColorModel var54 = var46.getColorModel();
    var46.setLocation(100, 1);
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Point var60 = var46.getLocation();
    java.awt.Point var61 = var26.getLocation(var60);
    java.awt.Component var62 = var5.findComponentAt(var61);
    var5.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test420");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.revalidate();
    var5.setSize(0, 11);
    java.awt.Dimension var10 = var5.getMinimumSize();
    boolean var11 = var5.getAutoscrolls();
    float var12 = var5.getAlignmentX();
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var5.disable();
    java.lang.String var15 = var5.getToolTipText();
    boolean var16 = var5.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test421");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Window[] var18 = var2.getOwnedWindows();
    java.awt.Graphics var19 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.repaint();
    javax.accessibility.AccessibleContext var15 = var5.getAccessibleContext();
    var5.removeNotify();
    java.awt.event.MouseMotionListener[] var17 = var5.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test423");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var24 = var17.isAncestorOf((java.awt.Component)var23);
    javax.swing.plaf.PanelUI var25 = var17.getUI();
    var17.transferFocusDownCycle();
    var17.doLayout();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var33.enable(true);
    int var36 = var33.getY();
    boolean var37 = var33.isValid();
    java.awt.Toolkit var38 = var33.getToolkit();
    var5.add((java.awt.Component)var17, (java.lang.Object)var38);
    java.beans.PropertyChangeListener[] var41 = var5.getPropertyChangeListeners("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Color var42 = var5.getBackground();
    boolean var43 = var5.isFocusable();
    int var44 = var5.getX();
    java.awt.Insets var45 = var5.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test424");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Tresor var5 = var2.getTresor();
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    tinymonkeys.modele.SingeErratique var10 = new tinymonkeys.modele.SingeErratique((-1), 11, var8);
    tinymonkeys.modele.Ile var11 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var11);
    int[][] var13 = new int[][] { };
    var11.creationCarte(var13);
    var8.creationCarte(var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var8.creationCarte(var18);
    tinymonkeys.controleur.Controller var22 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var23 = new tinymonkeys.vue.Fenetre("PanelUI", var22);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var36 = var29.isAncestorOf((java.awt.Component)var35);
    boolean var37 = var29.isFocusTraversalPolicyProvider();
    boolean var40 = var29.contains(10, 111);
    java.awt.Dimension var41 = var29.minimumSize();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    java.lang.Object var54 = var47.getTreeLock();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    var60.updateUI();
    int var68 = var47.getComponentZOrder((java.awt.Component)var60);
    java.awt.Insets var69 = var47.getInsets();
    java.util.Locale var70 = var47.getLocale();
    var47.hide();
    java.awt.LayoutManager var72 = var47.getLayout();
    var29.setLayout(var72);
    var23.setLayout(var72);
    java.awt.Color var75 = var23.getBackground();
    java.awt.MenuBar var76 = var23.getMenuBar();
    var8.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var23);
    java.awt.Rectangle var79 = var23.getMaximizedBounds();
    javax.swing.JLayeredPane var80 = var23.getLayeredPane();
    java.beans.PropertyChangeListener[] var82 = var80.getPropertyChangeListeners("PanelUI");
    boolean var83 = var80.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test425");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.transferFocusDownCycle();
    boolean var39 = var5.getInheritsPopupMenu();
    java.awt.Point var40 = var5.getLocation();
    var5.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test426");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    var5.updateUI();
    var5.show(false);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.requestFocus();
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.lang.Object var44 = var37.getTreeLock();
    java.awt.image.ColorModel var45 = var37.getColorModel();
    boolean var46 = var37.getVerifyInputWhenFocusTarget();
    var37.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var51 = var37.getBounds();
    var20.paintImmediately(var51);
    var5.computeVisibleRect(var51);
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var59.enable(true);
    java.awt.Toolkit var62 = var59.getToolkit();
    java.awt.Component var64 = var5.add((java.awt.Component)var59, 0);
    javax.swing.InputMap var65 = var5.getInputMap();
    int var66 = var5.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test427");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    var2.pack();
    var2.addNotify();
    boolean var5 = var2.isValidateRoot();
    var2.setLocation(100, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test428");


    tinymonkeys.controleur.Controller var2 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var3 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", var2);
    tinymonkeys.vue.Fenetre var4 = new tinymonkeys.vue.Fenetre("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", var2);
    java.awt.Shape var5 = var4.getShape();
    java.awt.event.WindowStateListener[] var6 = var4.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test429");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.repaint(1L);
    java.util.Set var17 = var5.getFocusTraversalKeys(0);
    javax.swing.KeyStroke[] var18 = var5.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test430");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    java.awt.Dimension var14 = var5.minimumSize();
    java.awt.event.HierarchyBoundsListener[] var15 = var5.getHierarchyBoundsListeners();
    javax.swing.InputVerifier var16 = var5.getInputVerifier();
    javax.accessibility.AccessibleContext var17 = var5.getAccessibleContext();
    boolean var18 = var5.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test431");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    var5.setDebugGraphicsOptions(111);
    var5.setSize(111, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test432");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isDisplayable();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.image.ColorModel var23 = var15.getColorModel();
    var15.setLocation(100, 1);
    boolean var27 = var15.isMaximumSizeSet();
    boolean var28 = var15.isOpaque();
    boolean var30 = var15.requestFocus(false);
    tinymonkeys.vue.VueElement var36 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var37 = var36.getPeer();
    javax.swing.InputMap var39 = var36.getInputMap(0);
    boolean var40 = var36.isShowing();
    java.awt.dnd.DropTarget var41 = var36.getDropTarget();
    boolean var42 = var36.getIgnoreRepaint();
    java.awt.Point var43 = var36.getMousePosition();
    java.awt.Graphics var44 = var36.getGraphics();
    tinymonkeys.vue.VueElement var50 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var51 = var50.getPeer();
    var50.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var50.repaint();
    java.lang.Object var57 = var50.getTreeLock();
    java.awt.Component var60 = var50.locate(0, (-1));
    var50.requestFocus();
    tinymonkeys.vue.VueElement var67 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var68 = var67.getPeer();
    var67.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var67.repaint();
    java.lang.Object var74 = var67.getTreeLock();
    java.awt.image.ColorModel var75 = var67.getColorModel();
    boolean var76 = var67.getVerifyInputWhenFocusTarget();
    var67.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var81 = var67.getBounds();
    var50.paintImmediately(var81);
    var50.removeAll();
    java.awt.Color var84 = var50.getBackground();
    var15.putClientProperty((java.lang.Object)var36, (java.lang.Object)var50);
    var5.setNextFocusableComponent((java.awt.Component)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test433");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var10 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var11 = new tinymonkeys.modele.BandeDeSingesErratiques(var10);
    int[][] var12 = new int[][] { };
    var10.creationCarte(var12);
    var2.creationCarte(var12);
    tinymonkeys.controleur.Controller var16 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var17 = new tinymonkeys.vue.Fenetre("PanelUI", var16);
    tinymonkeys.vue.VueElement var23 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var30 = var23.isAncestorOf((java.awt.Component)var29);
    boolean var31 = var23.isFocusTraversalPolicyProvider();
    boolean var34 = var23.contains(10, 111);
    java.awt.Dimension var35 = var23.minimumSize();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var42 = var41.getPeer();
    var41.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var41.repaint();
    java.lang.Object var48 = var41.getTreeLock();
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var55 = var54.getPeer();
    var54.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var54.repaint();
    var54.updateUI();
    int var62 = var41.getComponentZOrder((java.awt.Component)var54);
    java.awt.Insets var63 = var41.getInsets();
    java.util.Locale var64 = var41.getLocale();
    var41.hide();
    java.awt.LayoutManager var66 = var41.getLayout();
    var23.setLayout(var66);
    var17.setLayout(var66);
    java.awt.Color var69 = var17.getBackground();
    java.awt.MenuBar var70 = var17.getMenuBar();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var17);
    boolean var72 = var17.isAutoRequestFocus();
    boolean var73 = var17.isAlwaysOnTopSupported();
    java.awt.Window.Type var74 = var17.getType();
    var17.setState(111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test434");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.transferFocusUpCycle();
    tinymonkeys.vue.VueElement var17 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var18 = var17.getPeer();
    var17.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var17.repaint();
    java.lang.Object var24 = var17.getTreeLock();
    java.awt.event.HierarchyListener[] var25 = var17.getHierarchyListeners();
    boolean var26 = var5.isAncestorOf((java.awt.Component)var17);
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.awt.GraphicsConfiguration var40 = var33.getGraphicsConfiguration();
    java.awt.Insets var41 = var33.insets();
    var33.repaint(1L);
    java.util.Set var45 = var33.getFocusTraversalKeys(0);
    var5.setFocusTraversalKeys(0, var45);
    boolean var47 = var5.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test435");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    tinymonkeys.vue.VueElement var12 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var13 = var12.getPeer();
    var12.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var12.transferFocusUpCycle();
    boolean var19 = var12.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    int var46 = var25.getComponentZOrder((java.awt.Component)var38);
    var5.add((java.awt.Component)var12, (java.lang.Object)var25);
    java.awt.FocusTraversalPolicy var48 = var5.getFocusTraversalPolicy();
    boolean var49 = var5.isForegroundSet();
    java.beans.PropertyChangeListener[] var51 = var5.getPropertyChangeListeners("hi!");
    var5.repaint();
    java.awt.GraphicsConfiguration var53 = var5.getGraphicsConfiguration();
    var5.setAlignmentX(0.5f);
    boolean var58 = var5.contains(3, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test436");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    var2.setResizable(false);
    var2.setBounds((-1), 1, 111, 3);
    java.awt.Component var65 = var2.getFocusOwner();
    java.awt.MenuBar var66 = var2.getMenuBar();
    java.awt.Window var67 = var2.getOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test437");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    boolean var28 = var5.isVisible();
    var5.setVisible(true);
    java.awt.FocusTraversalPolicy var31 = var5.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test438");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    tinymonkeys.modele.SingeErratique var7 = new tinymonkeys.modele.SingeErratique((-1), 11, var5);
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    int[][] var10 = new int[][] { };
    var8.creationCarte(var10);
    var5.creationCarte(var10);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    tinymonkeys.modele.SingeErratique var17 = new tinymonkeys.modele.SingeErratique((-1), 11, var15);
    tinymonkeys.modele.Ile var18 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var19 = new tinymonkeys.modele.BandeDeSingesErratiques(var18);
    int[][] var20 = new int[][] { };
    var18.creationCarte(var20);
    var15.creationCarte(var20);
    var5.creationCarte(var20);
    var0.creationCarte(var20);
    tinymonkeys.modele.Pirate var25 = var0.getPirate();
    javax.swing.event.EventListenerList var26 = var25.getPirateEcouteurs();
    int var27 = var25.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test439");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    tinymonkeys.vue.VueElement var35 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var36 = var35.getPeer();
    var35.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var35.repaint();
    java.lang.Object var42 = var35.getTreeLock();
    java.awt.Component var45 = var35.locate(0, (-1));
    var35.setAlignmentX(0.5f);
    java.awt.Font var48 = var35.getFont();
    java.awt.FontMetrics var49 = var5.getFontMetrics(var48);
    var5.firePropertyChange("", false, true);
    var5.requestFocus();
    boolean var55 = var5.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test440");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    var5.setFocusTraversalPolicyProvider(true);
    var5.show();
    var5.setDimensions(100, 11, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test441");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.awt.Component var55 = var2.getGlassPane();
    javax.swing.JMenuBar var56 = var2.getJMenuBar();
    var2.setTitle("hi!");
    var2.setUndecorated(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test442");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    var5.transferFocusBackward();
    java.awt.Dimension var31 = var5.getSize();
    java.awt.peer.ComponentPeer var32 = var5.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test443");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Pirate var2 = var0.getPirate();
    var0.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var8 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var9 = new tinymonkeys.modele.BandeDeSingesErratiques(var8);
    tinymonkeys.modele.SingeErratique var10 = new tinymonkeys.modele.SingeErratique((-1), 11, var8);
    tinymonkeys.modele.Ile var11 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var12 = new tinymonkeys.modele.BandeDeSingesErratiques(var11);
    int[][] var13 = new int[][] { };
    var11.creationCarte(var13);
    var8.creationCarte(var13);
    tinymonkeys.modele.Ile var16 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var17 = new tinymonkeys.modele.BandeDeSingesErratiques(var16);
    int[][] var18 = new int[][] { };
    var16.creationCarte(var18);
    var8.creationCarte(var18);
    var0.creationCarte(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.suppressionTresor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test444");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    var5.addNotify();
    var5.repaint();
    var5.show(true);
    boolean var21 = var5.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test445");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = new tinymonkeys.modele.BandeDeSingesErratiques(var0);
    var1.ajoutSingesErratiques(0);
    javax.swing.event.EventListenerList var4 = var1.getBandeSingesEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test446");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.repaint();
    boolean var17 = var5.requestFocusInWindow();
    java.lang.String var18 = var5.getToolTipText();
    javax.swing.JPopupMenu var19 = var5.getComponentPopupMenu();
    javax.swing.KeyStroke[] var20 = var5.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test447");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var9 = var5.getBaselineResizeBehavior();
    var5.layout();
    boolean var13 = var5.contains((-1), 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test448");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    int var2 = var1.getX();
    int var3 = var1.getX();
    var1.positionInitiale((-1), 10);
    var1.setAvatar("PanelUI");
    var1.setAvatar("");
    var1.positionInitiale(1, (-1));
    int var14 = var1.getX();
    var1.demandeDeplacement(11, 100);
    var1.setAvatar("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]");
    javax.swing.event.EventListenerList var20 = var1.getPirateEcouteurs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test449");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    java.awt.Dimension var18 = var2.getSize();
    java.awt.Rectangle var19 = var2.getMaximizedBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test450");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    boolean var40 = var5.isFocusable();
    boolean var41 = var5.isLightweight();
    java.awt.Toolkit var42 = var5.getToolkit();
    java.awt.Container var43 = var5.getFocusCycleRootAncestor();
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var50 = var49.getUIClassID();
    boolean var51 = var49.isVisible();
    var49.nextFocus();
    java.awt.ComponentOrientation var53 = var49.getComponentOrientation();
    var5.setComponentOrientation(var53);
    java.lang.String var55 = var5.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "PanelUI"+ "'", var50.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test451");


    tinymonkeys.vue.VueSingeErratique var5 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    java.awt.GraphicsConfiguration var6 = var5.getGraphicsConfiguration();
    int var7 = var5.getX();
    java.awt.Rectangle var8 = var5.bounds();
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var20.revalidate();
    var20.setSize(0, 11);
    java.awt.Dimension var25 = var20.getMinimumSize();
    java.awt.Dimension var26 = var14.getSize(var25);
    java.awt.Dimension var27 = var5.getSize(var26);
    boolean var28 = var5.isFocusTraversalPolicySet();
    var5.setFocusTraversalPolicyProvider(false);
    boolean var31 = var5.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test452");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    boolean var14 = var5.getVerifyInputWhenFocusTarget();
    var5.removeAll();
    int var16 = var5.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test453");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    java.awt.peer.ComponentPeer var7 = var5.getPeer();
    java.beans.VetoableChangeListener[] var8 = var5.getVetoableChangeListeners();
    boolean var9 = var5.isShowing();
    var5.repaint(0L);
    float var12 = var5.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test454");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    javax.swing.TransferHandler var11 = var5.getTransferHandler();
    java.awt.Point var12 = var5.getMousePosition();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    java.awt.GraphicsConfiguration var25 = var18.getGraphicsConfiguration();
    var18.setFocusCycleRoot(true);
    java.awt.Point var28 = var18.getLocation();
    boolean var29 = var5.isAncestorOf((java.awt.Component)var18);
    javax.swing.InputMap var30 = var18.getInputMap();
    var18.repaint((-1), (-1), 11, 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test455");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.event.HierarchyListener[] var13 = var5.getHierarchyListeners();
    java.awt.event.InputMethodListener[] var14 = var5.getInputMethodListeners();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.repaint();
    java.lang.Object var27 = var20.getTreeLock();
    java.awt.Component var30 = var20.locate(0, (-1));
    var20.setAlignmentX(0.5f);
    java.awt.Font var33 = var20.getFont();
    boolean var34 = var20.isRequestFocusEnabled();
    java.awt.im.InputMethodRequests var35 = var20.getInputMethodRequests();
    tinymonkeys.vue.VueElement var41 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var41.enable(true);
    int var44 = var41.getY();
    boolean var45 = var41.isValid();
    java.awt.Toolkit var46 = var41.getToolkit();
    var41.setVisible(false);
    java.awt.event.MouseListener[] var49 = var41.getMouseListeners();
    tinymonkeys.vue.VueElement var55 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var56 = var55.getPeer();
    var55.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var55.repaint();
    java.lang.Object var62 = var55.getTreeLock();
    java.awt.image.ColorModel var63 = var55.getColorModel();
    boolean var64 = var55.getVerifyInputWhenFocusTarget();
    var55.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var69 = var55.getBounds();
    tinymonkeys.vue.VueElement var75 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var81 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var82 = var75.isAncestorOf((java.awt.Component)var81);
    java.awt.Point var83 = var81.location();
    java.awt.Point var84 = var55.getLocation(var83);
    java.awt.Point var85 = var41.getLocation(var84);
    java.awt.Point var86 = var20.getLocation(var84);
    java.awt.Point var87 = var5.getLocation(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test456");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getCursorType();
    tinymonkeys.vue.VueElement var9 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var9.enable(true);
    boolean var12 = var9.isShowing();
    int var13 = var9.getX();
    var9.grabFocus();
    boolean var15 = var9.isMaximumSizeSet();
    var2.setGlassPane((java.awt.Component)var9);
    java.awt.Dimension var17 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 111);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test457");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var24 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var24.enable(true);
    tinymonkeys.vue.VueElement var32 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var33 = var32.getUIClassID();
    javax.swing.TransferHandler var34 = var32.getTransferHandler();
    java.awt.Color var35 = var32.getForeground();
    var24.setBackground(var35);
    var5.setForeground(var35);
    java.awt.Insets var38 = var5.insets();
    boolean var39 = var5.isMaximumSizeSet();
    var5.reshape(111, (-1), 100, 11);
    int var45 = var5.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test458");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Graphics var54 = var2.getGraphics();
    var2.dispose();
    var2.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", '4', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Point var12 = var5.getMousePosition();
    var5.firePropertyChange("", 3, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test460");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var1 = var0.getSingesErratiques();
    tinymonkeys.modele.Ile var4 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var5 = new tinymonkeys.modele.BandeDeSingesErratiques(var4);
    tinymonkeys.modele.SingeErratique var6 = new tinymonkeys.modele.SingeErratique((-1), 11, var4);
    tinymonkeys.modele.Ile var7 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var8 = new tinymonkeys.modele.BandeDeSingesErratiques(var7);
    int[][] var9 = new int[][] { };
    var7.creationCarte(var9);
    var4.creationCarte(var9);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    int[][] var14 = new int[][] { };
    var12.creationCarte(var14);
    var4.creationCarte(var14);
    tinymonkeys.controleur.Controller var18 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var19 = new tinymonkeys.vue.Fenetre("PanelUI", var18);
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var31 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var32 = var25.isAncestorOf((java.awt.Component)var31);
    boolean var33 = var25.isFocusTraversalPolicyProvider();
    boolean var36 = var25.contains(10, 111);
    java.awt.Dimension var37 = var25.minimumSize();
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var44 = var43.getPeer();
    var43.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var43.repaint();
    java.lang.Object var50 = var43.getTreeLock();
    tinymonkeys.vue.VueElement var56 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var57 = var56.getPeer();
    var56.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var56.repaint();
    var56.updateUI();
    int var64 = var43.getComponentZOrder((java.awt.Component)var56);
    java.awt.Insets var65 = var43.getInsets();
    java.util.Locale var66 = var43.getLocale();
    var43.hide();
    java.awt.LayoutManager var68 = var43.getLayout();
    var25.setLayout(var68);
    var19.setLayout(var68);
    java.awt.Color var71 = var19.getBackground();
    java.awt.MenuBar var72 = var19.getMenuBar();
    var4.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var19);
    boolean var74 = var19.isAutoRequestFocus();
    var1.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var19);
    boolean var76 = var19.isUndecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test461");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var2 = var0.getSingesErratiques();
    tinymonkeys.controleur.Controller var4 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var5 = new tinymonkeys.vue.Fenetre("PanelUI", var4);
    var5.pack();
    var5.addNotify();
    var2.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var5);
    var5.toBack();
    tinymonkeys.vue.VueElement var15 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var16 = var15.getPeer();
    var15.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var15.repaint();
    java.lang.Object var22 = var15.getTreeLock();
    java.awt.Component var25 = var15.locate(0, (-1));
    var15.setAlignmentX(0.5f);
    java.awt.Font var28 = var15.getFont();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var34.enable(true);
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var43 = var42.getUIClassID();
    javax.swing.TransferHandler var44 = var42.getTransferHandler();
    java.awt.Color var45 = var42.getForeground();
    var34.setBackground(var45);
    var15.setForeground(var45);
    var5.setBackground(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.applyResourceBundle("");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test462");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    java.awt.Insets var13 = var5.insets();
    var5.repaint(1L);
    java.util.Set var17 = var5.getFocusTraversalKeys(0);
    boolean var18 = var5.isOptimizedDrawingEnabled();
    java.awt.Container var19 = var5.getTopLevelAncestor();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var26 = var25.getPeer();
    var25.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var25.repaint();
    java.lang.Object var32 = var25.getTreeLock();
    java.awt.Component var35 = var25.locate(0, (-1));
    var25.requestFocus();
    tinymonkeys.vue.VueElement var42 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var43 = var42.getPeer();
    var42.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var42.repaint();
    java.lang.Object var49 = var42.getTreeLock();
    java.awt.image.ColorModel var50 = var42.getColorModel();
    boolean var51 = var42.getVerifyInputWhenFocusTarget();
    var42.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var56 = var42.getBounds();
    var25.paintImmediately(var56);
    boolean var58 = var25.requestFocusInWindow();
    var25.firePropertyChange("hi!", 'a', 'a');
    java.awt.Dimension var63 = var25.getMaximumSize();
    var25.setSize((-1), (-1));
    java.awt.Rectangle var67 = var25.getVisibleRect();
    java.awt.Rectangle var68 = var5.getBounds(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test463");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(1, 3, 100, 10, 11, "hi!");
    var6.mortPirate();
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var14 = var13.getPeer();
    var13.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var13.repaint();
    java.lang.Object var20 = var13.getTreeLock();
    java.awt.image.ColorModel var21 = var13.getColorModel();
    boolean var22 = var13.getVerifyInputWhenFocusTarget();
    int var23 = var13.getWidth();
    tinymonkeys.vue.VueElement var29 = new tinymonkeys.vue.VueElement(0, 0, 1, 1, 11);
    java.awt.Component var32 = var29.locate(11, 10);
    tinymonkeys.vue.VueElement var38 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var39 = var38.getPeer();
    var38.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var38.repaint();
    var38.updateUI();
    var38.show(false);
    float var48 = var38.getAlignmentY();
    java.awt.Rectangle var49 = var38.bounds();
    java.awt.Rectangle var50 = var29.getBounds(var49);
    boolean var51 = var29.isFocusCycleRoot();
    java.awt.Component var54 = var29.findComponentAt(0, (-1));
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    var60.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var60.repaint();
    java.lang.Object var67 = var60.getTreeLock();
    java.awt.image.ColorModel var68 = var60.getColorModel();
    var60.setLocation(100, 1);
    boolean var72 = var60.isMaximumSizeSet();
    java.awt.Component var73 = var29.add((java.awt.Component)var60);
    tinymonkeys.controleur.Controller var75 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var76 = new tinymonkeys.vue.Fenetre("PanelUI", var75);
    var76.pack();
    var76.addNotify();
    java.awt.Graphics var79 = var76.getGraphics();
    var73.paintAll(var79);
    var13.paintComponent(var79);
    var6.dessineElement(var79);
    tinymonkeys.vue.VueElement var88 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var94 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var95 = var88.isAncestorOf((java.awt.Component)var94);
    java.awt.Dimension var96 = var88.size();
    var6.setPreferredSize(var96);
    var6.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test464");


    tinymonkeys.vue.VuePirate var6 = new tinymonkeys.vue.VuePirate(1, 10, 10, (-1), 11, "hi!");

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test465");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    javax.swing.event.AncestorListener[] var57 = var5.getAncestorListeners();
    var5.setDebugGraphicsOptions(0);
    java.awt.peer.ComponentPeer var60 = var5.getPeer();
    var5.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test466");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    tinymonkeys.controleur.Controller var65 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var66 = new tinymonkeys.vue.Fenetre("PanelUI", var65);
    int var67 = var66.getExtendedState();
    java.awt.Window.Type var68 = var66.getType();
    var2.setType(var68);
    boolean var70 = var2.isDoubleBuffered();
    var2.dispose();
    int var72 = var2.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test467");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var15 = var14.getPeer();
    javax.swing.InputMap var17 = var14.getInputMap(0);
    boolean var18 = var14.isShowing();
    java.awt.dnd.DropTarget var19 = var14.getDropTarget();
    java.awt.Component var20 = var5.add((java.awt.Component)var14);
    boolean var23 = var14.inside(11, 0);
    boolean var24 = var14.requestDefaultFocus();
    var14.firePropertyChange("tinymonkeys.vue.VueElement[,111,11,1x1,invalid,hidden,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777216,maximumSize=,minimumSize=,preferredSize=]", ' ', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test468");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    tinymonkeys.vue.VueElement var60 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var61 = var60.getPeer();
    java.awt.Color var62 = var60.getForeground();
    var2.setBackground(var62);
    tinymonkeys.controleur.Controller var65 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var66 = new tinymonkeys.vue.Fenetre("PanelUI", var65);
    int var67 = var66.getExtendedState();
    java.awt.Window.Type var68 = var66.getType();
    var2.setType(var68);
    boolean var70 = var2.getFocusableWindowState();
    var2.setTitle("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Graphics var54 = var2.getGraphics();
    var2.setFocusable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test470");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    tinymonkeys.vue.VueElement var13 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var14 = var13.getUIClassID();
    tinymonkeys.vue.VueElement var20 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var21 = var20.getPeer();
    var20.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var20.transferFocusUpCycle();
    boolean var27 = var20.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var33 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var34 = var33.getPeer();
    var33.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var33.repaint();
    java.lang.Object var40 = var33.getTreeLock();
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var47 = var46.getPeer();
    var46.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var46.repaint();
    var46.updateUI();
    int var54 = var33.getComponentZOrder((java.awt.Component)var46);
    var13.add((java.awt.Component)var20, (java.lang.Object)var33);
    boolean var56 = var5.isFocusCycleRoot((java.awt.Container)var20);
    int var57 = var5.getHeight();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    var63.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var63.repaint();
    java.lang.Object var70 = var63.getTreeLock();
    java.awt.image.ColorModel var71 = var63.getColorModel();
    var63.setLocation(100, 1);
    boolean var75 = var63.isDoubleBuffered();
    java.util.Locale var76 = var63.getLocale();
    var5.setLocale(var76);
    java.awt.Component.BaselineResizeBehavior var78 = var5.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test471");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    boolean var32 = var19.hasFocus();
    tinymonkeys.vue.VueSingeErratique var38 = new tinymonkeys.vue.VueSingeErratique(11, 10, 0, 0, 100);
    java.awt.Container var39 = var38.getTopLevelAncestor();
    tinymonkeys.vue.VueSingeErratique var45 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var51 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var52 = var51.getPeer();
    var51.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var51.repaint();
    java.lang.Object var58 = var51.getTreeLock();
    java.awt.Component var61 = var51.locate(0, (-1));
    var51.requestFocus();
    tinymonkeys.vue.VueElement var68 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var69 = var68.getPeer();
    var68.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var68.repaint();
    java.lang.Object var75 = var68.getTreeLock();
    java.awt.image.ColorModel var76 = var68.getColorModel();
    boolean var77 = var68.getVerifyInputWhenFocusTarget();
    var68.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var82 = var68.getBounds();
    var51.paintImmediately(var82);
    var45.setBounds(var82);
    var38.scrollRectToVisible(var82);
    var19.setBounds(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    var5.removeAll();
    boolean var39 = var5.isFocusable();
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", ' ', '4');
    boolean var44 = var5.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test473");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    int var8 = var5.getY();
    boolean var9 = var5.isValid();
    boolean var10 = var5.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test474");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    var2.setFocusableWindowState(true);
    java.awt.event.WindowStateListener[] var58 = var2.getWindowStateListeners();
    var2.toFront();
    javax.accessibility.AccessibleContext var60 = var2.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test475");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    int var13 = var5.getY();
    boolean var14 = var5.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test476");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    javax.swing.InputMap var21 = var18.getInputMap(0);
    tinymonkeys.vue.VueElement var28 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var29 = var28.getPeer();
    javax.swing.InputMap var31 = var28.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var32 = var28.getBaselineResizeBehavior();
    boolean var33 = var28.isPreferredSizeSet();
    java.awt.Component var34 = var18.add("", (java.awt.Component)var28);
    java.awt.Cursor var35 = var28.getCursor();
    boolean var36 = var28.getVerifyInputWhenFocusTarget();
    java.lang.Object var37 = var5.getClientProperty((java.lang.Object)var36);
    tinymonkeys.vue.VueElement var43 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var44 = var43.getUIClassID();
    boolean var45 = var43.isVisible();
    boolean var46 = var43.isCursorSet();
    var43.show(true);
    tinymonkeys.vue.VueElement var54 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var54.enable(true);
    int var57 = var54.getY();
    tinymonkeys.vue.VueElement var63 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var64 = var63.getPeer();
    java.awt.Color var65 = var63.getForeground();
    var43.add((java.awt.Component)var54, (java.lang.Object)var65, 0);
    var5.setForeground(var65);
    boolean var69 = var5.isOptimizedDrawingEnabled();
    boolean var70 = var5.isBackgroundSet();
    var5.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "PanelUI"+ "'", var44.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusBackward();
    javax.swing.plaf.PanelUI var20 = var5.getUI();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    int var48 = var26.getY();
    var26.validate();
    var26.firePropertyChange("hi!", 1, 11);
    var26.move(0, 10);
    tinymonkeys.vue.VueElement var62 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var63 = var62.getPeer();
    var62.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var62.repaint();
    java.lang.Object var69 = var62.getTreeLock();
    java.awt.Component var72 = var62.locate(0, (-1));
    var62.resize((-1), 0);
    var62.transferFocusDownCycle();
    javax.swing.KeyStroke[] var77 = var62.getRegisteredKeyStrokes();
    boolean var78 = var62.isMaximumSizeSet();
    tinymonkeys.vue.VueElement var84 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var90 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var91 = var84.isAncestorOf((java.awt.Component)var90);
    boolean var92 = var84.isFocusTraversalPolicyProvider();
    var84.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var97 = var84.preferredSize();
    var26.add((java.awt.Component)var62, (java.lang.Object)var97);
    var5.setSize(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test478");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    int var27 = var5.getY();
    boolean var28 = var5.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test479");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.resize((-1), 0);
    var5.transferFocusBackward();
    var5.requestFocus();
    boolean var21 = var5.requestFocusInWindow();
    var5.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test480");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    boolean var8 = var5.isOpaque();
    var5.setAlignmentX(1.0f);
    var5.firePropertyChange("hi!", (short)100, (short)0);
    boolean var15 = var5.isDoubleBuffered();
    var5.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test481");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.requestFocus();
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var23 = var22.getPeer();
    var22.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var22.repaint();
    java.lang.Object var29 = var22.getTreeLock();
    java.awt.image.ColorModel var30 = var22.getColorModel();
    boolean var31 = var22.getVerifyInputWhenFocusTarget();
    var22.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var36 = var22.getBounds();
    var5.paintImmediately(var36);
    tinymonkeys.vue.VueSingeErratique var43 = new tinymonkeys.vue.VueSingeErratique(1, 1, 10, (-1), 11);
    tinymonkeys.vue.VueElement var49 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var50 = var49.getPeer();
    var49.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var49.repaint();
    java.lang.Object var56 = var49.getTreeLock();
    java.awt.Component var59 = var49.locate(0, (-1));
    var49.requestFocus();
    tinymonkeys.vue.VueElement var66 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var67 = var66.getPeer();
    var66.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var66.repaint();
    java.lang.Object var73 = var66.getTreeLock();
    java.awt.image.ColorModel var74 = var66.getColorModel();
    boolean var75 = var66.getVerifyInputWhenFocusTarget();
    var66.firePropertyChange("hi!", '4', 'a');
    java.awt.Rectangle var80 = var66.getBounds();
    var49.paintImmediately(var80);
    var43.setBounds(var80);
    var5.setBounds(var80);
    java.awt.event.InputMethodListener[] var84 = var5.getInputMethodListeners();
    var5.firePropertyChange("PanelUI", (short)1, (short)(-1));
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test482");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    var5.validate();
    var5.firePropertyChange("tinymonkeys.vue.VueSingeErratique[,1,22,1x1,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777217,maximumSize=,minimumSize=,preferredSize=]", 0.0f, 100.0f);
    var5.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test483");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.image.ColorModel var13 = var5.getColorModel();
    var5.setLocation(100, 1);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var23 = var22.getUIClassID();
    javax.swing.TransferHandler var24 = var22.getTransferHandler();
    java.awt.Color var25 = var22.getForeground();
    var5.setForeground(var25);
    boolean var27 = var5.getIgnoreRepaint();
    var5.setFocusable(true);
    boolean var30 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PanelUI"+ "'", var23.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test484");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.MenuBar var55 = var2.getMenuBar();
    boolean var56 = var2.isActive();
    java.awt.event.WindowStateListener[] var57 = var2.getWindowStateListeners();
    java.awt.Window var58 = var2.getOwner();
    float var59 = var2.getOpacity();
    tinymonkeys.vue.VueElement var65 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var66 = var65.getPeer();
    var65.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var65.repaint();
    java.lang.Object var72 = var65.getTreeLock();
    java.awt.image.ColorModel var73 = var65.getColorModel();
    boolean var74 = var65.getAutoscrolls();
    var65.setIgnoreRepaint(true);
    java.awt.Rectangle var77 = var65.getVisibleRect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setShape((java.awt.Shape)var77);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test485");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    int[][] var3 = var2.getCarte();
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique(111, 10, var2);
    boolean var7 = var2.singeEstPresent(3, 10);
    tinymonkeys.controleur.Controller var9 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var10 = new tinymonkeys.vue.Fenetre("PanelUI", var9);
    tinymonkeys.vue.VueElement var16 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var22 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var23 = var16.isAncestorOf((java.awt.Component)var22);
    boolean var24 = var16.isFocusTraversalPolicyProvider();
    boolean var27 = var16.contains(10, 111);
    java.awt.Dimension var28 = var16.minimumSize();
    tinymonkeys.vue.VueElement var34 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var35 = var34.getPeer();
    var34.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var34.repaint();
    java.lang.Object var41 = var34.getTreeLock();
    tinymonkeys.vue.VueElement var47 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var48 = var47.getPeer();
    var47.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var47.repaint();
    var47.updateUI();
    int var55 = var34.getComponentZOrder((java.awt.Component)var47);
    java.awt.Insets var56 = var34.getInsets();
    java.util.Locale var57 = var34.getLocale();
    var34.hide();
    java.awt.LayoutManager var59 = var34.getLayout();
    var16.setLayout(var59);
    var10.setLayout(var59);
    java.awt.Color var62 = var10.getBackground();
    var2.enregistreEcIle((tinymonkeys.modele.IleEcouteur)var10);
    boolean var64 = var10.isFocusTraversalPolicySet();
    java.awt.Window.Type var65 = var10.getType();
    var10.pack();
    boolean var67 = var10.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    tinymonkeys.modele.Tresor var2 = new tinymonkeys.modele.Tresor((-1), (-1));
    var2.setPosition(0, (-1));
    int var6 = var2.getX();
    boolean var9 = var2.coordonneesEgales(111, (-1));
    int var10 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test487");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    java.awt.Component.BaselineResizeBehavior var9 = var5.getBaselineResizeBehavior();
    boolean var10 = var5.isPreferredSizeSet();
    java.awt.peer.ComponentPeer var11 = var5.getPeer();
    boolean var12 = var5.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test488");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    tinymonkeys.vue.VueElement var18 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var19 = var18.getPeer();
    var18.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var18.repaint();
    var18.updateUI();
    int var26 = var5.getComponentZOrder((java.awt.Component)var18);
    java.awt.Insets var27 = var5.getInsets();
    java.util.Locale var28 = var5.getLocale();
    var5.hide();
    java.awt.event.MouseMotionListener[] var30 = var5.getMouseMotionListeners();
    java.awt.event.MouseListener[] var31 = var5.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test489");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    javax.swing.TransferHandler var7 = var5.getTransferHandler();
    var5.setOpaque(false);
    boolean var10 = var5.getAutoscrolls();
    var5.transferFocusBackward();
    javax.swing.plaf.PanelUI var12 = var5.getUI();
    boolean var13 = var5.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test490");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    var5.enable(true);
    java.awt.Toolkit var8 = var5.getToolkit();
    var5.disable();
    java.awt.Dimension var10 = var5.minimumSize();
    javax.swing.TransferHandler var11 = var5.getTransferHandler();
    java.awt.FocusTraversalPolicy var12 = var5.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test491");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var11 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var12 = var5.isAncestorOf((java.awt.Component)var11);
    boolean var13 = var5.isFocusTraversalPolicyProvider();
    var5.removeAll();
    java.awt.Point var15 = var5.getMousePosition();
    boolean var16 = var5.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test492");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    int var3 = var2.getExtendedState();
    java.awt.Window.Type var4 = var2.getType();
    tinymonkeys.vue.VueElement var10 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var11 = var10.getPeer();
    javax.swing.InputMap var13 = var10.getInputMap(0);
    boolean var14 = var10.isDisplayable();
    boolean var15 = var10.getFocusTraversalKeysEnabled();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    javax.swing.JLayeredPane var18 = var2.getLayeredPane();
    var18.setAlignmentY(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test493");


    tinymonkeys.modele.Ile var2 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var3 = new tinymonkeys.modele.BandeDeSingesErratiques(var2);
    tinymonkeys.modele.SingeErratique var4 = new tinymonkeys.modele.SingeErratique((-1), 11, var2);
    tinymonkeys.modele.Ile var5 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var6 = new tinymonkeys.modele.BandeDeSingesErratiques(var5);
    int[][] var7 = new int[][] { };
    var5.creationCarte(var7);
    var2.creationCarte(var7);
    tinymonkeys.modele.Ile var12 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var13 = new tinymonkeys.modele.BandeDeSingesErratiques(var12);
    tinymonkeys.modele.SingeErratique var14 = new tinymonkeys.modele.SingeErratique((-1), 11, var12);
    tinymonkeys.modele.Ile var15 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var16 = new tinymonkeys.modele.BandeDeSingesErratiques(var15);
    int[][] var17 = new int[][] { };
    var15.creationCarte(var17);
    var12.creationCarte(var17);
    var2.creationCarte(var17);
    tinymonkeys.modele.Pirate var21 = new tinymonkeys.modele.Pirate(var2);
    tinymonkeys.modele.Ile var22 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var23 = var22.getSingesErratiques();
    tinymonkeys.modele.Pirate var24 = var22.getPirate();
    var22.demandeDeplacementPirate(111, 111);
    tinymonkeys.modele.Ile var30 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var31 = new tinymonkeys.modele.BandeDeSingesErratiques(var30);
    tinymonkeys.modele.SingeErratique var32 = new tinymonkeys.modele.SingeErratique((-1), 11, var30);
    tinymonkeys.modele.Ile var33 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var34 = new tinymonkeys.modele.BandeDeSingesErratiques(var33);
    int[][] var35 = new int[][] { };
    var33.creationCarte(var35);
    var30.creationCarte(var35);
    tinymonkeys.modele.Ile var38 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.BandeDeSingesErratiques var39 = new tinymonkeys.modele.BandeDeSingesErratiques(var38);
    int[][] var40 = new int[][] { };
    var38.creationCarte(var40);
    var30.creationCarte(var40);
    var22.creationCarte(var40);
    var2.setCarte(var40);
    tinymonkeys.modele.Pirate var45 = var2.getPirate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ArrayList var48 = var2.deplacementsPossibles(3, 3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test494");


    tinymonkeys.modele.Ile var0 = new tinymonkeys.modele.Ile();
    tinymonkeys.modele.Pirate var1 = var0.getPirate();
    tinymonkeys.modele.BandeDeSingesErratiques var2 = var0.getSingesErratiques();
    tinymonkeys.controleur.Controller var4 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var5 = new tinymonkeys.vue.Fenetre("PanelUI", var4);
    var5.pack();
    var5.addNotify();
    var2.enregistreEcBandeSinges((tinymonkeys.modele.BandeDeSingesErratiquesEcouteur)var5);
    int var9 = var5.getExtendedState();
    var5.move((-1), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test495");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var6 = var5.getUIClassID();
    boolean var7 = var5.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test496");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.lang.Object var12 = var5.getTreeLock();
    java.awt.Component var15 = var5.locate(0, (-1));
    var5.setAlignmentX(0.5f);
    java.awt.Font var18 = var5.getFont();
    tinymonkeys.vue.VueElement var25 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.lang.String var26 = var25.getUIClassID();
    float var27 = var25.getAlignmentX();
    boolean var28 = var25.isOptimizedDrawingEnabled();
    var5.putClientProperty((java.lang.Object)' ', (java.lang.Object)var28);
    boolean var30 = var5.isDoubleBuffered();
    boolean var31 = var5.requestFocusInWindow();
    var5.enableInputMethods(false);
    int var34 = var5.getY();
    tinymonkeys.vue.VueElement var40 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var46 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var47 = var40.isAncestorOf((java.awt.Component)var46);
    boolean var48 = var40.isFocusTraversalPolicyProvider();
    var40.firePropertyChange("hi!", 'a', '4');
    java.awt.Dimension var53 = var40.preferredSize();
    tinymonkeys.vue.VueElement var59 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var60 = var59.getPeer();
    var59.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var59.repaint();
    java.lang.Object var66 = var59.getTreeLock();
    tinymonkeys.vue.VueElement var72 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var73 = var72.getPeer();
    var72.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var72.repaint();
    var72.updateUI();
    int var80 = var59.getComponentZOrder((java.awt.Component)var72);
    boolean var81 = var72.isDoubleBuffered();
    java.awt.Dimension var82 = var72.size();
    java.awt.Dimension var83 = var40.getSize(var82);
    var5.resize(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test497");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    var5.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var5.repaint();
    java.awt.GraphicsConfiguration var12 = var5.getGraphicsConfiguration();
    boolean var13 = var5.getInheritsPopupMenu();
    tinymonkeys.vue.VueElement var19 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var20 = var19.getPeer();
    var19.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var19.repaint();
    java.lang.Object var26 = var19.getTreeLock();
    java.awt.image.ColorModel var27 = var19.getColorModel();
    boolean var28 = var19.getVerifyInputWhenFocusTarget();
    int var29 = var19.getWidth();
    var19.removeNotify();
    boolean var31 = var5.isAncestorOf((java.awt.Component)var19);
    tinymonkeys.vue.VueElement var37 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var38 = var37.getPeer();
    var37.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var37.repaint();
    java.awt.GraphicsConfiguration var44 = var37.getGraphicsConfiguration();
    var37.setFocusCycleRoot(true);
    var5.setNextFocusableComponent((java.awt.Component)var37);
    java.awt.Component var50 = var37.findComponentAt(111, (-1));
    var37.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test498");


    tinymonkeys.vue.VueElement var5 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var6 = var5.getPeer();
    javax.swing.InputMap var8 = var5.getInputMap(0);
    boolean var9 = var5.isShowing();
    java.awt.dnd.DropTarget var10 = var5.getDropTarget();
    boolean var11 = var5.getIgnoreRepaint();
    java.awt.Dimension var12 = var5.getMaximumSize();
    java.awt.event.MouseListener[] var13 = var5.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test499");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    javax.accessibility.AccessibleContext var54 = var2.getAccessibleContext();
    java.lang.String var55 = var2.getTitle();
    java.awt.Color var56 = var2.getBackground();
    boolean var57 = var2.isFocusOwner();
    java.awt.event.MouseListener[] var58 = var2.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "PanelUI"+ "'", var55.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test500");


    tinymonkeys.controleur.Controller var1 = new tinymonkeys.controleur.Controller();
    tinymonkeys.vue.Fenetre var2 = new tinymonkeys.vue.Fenetre("PanelUI", var1);
    tinymonkeys.vue.VueElement var8 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    tinymonkeys.vue.VueElement var14 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    boolean var15 = var8.isAncestorOf((java.awt.Component)var14);
    boolean var16 = var8.isFocusTraversalPolicyProvider();
    boolean var19 = var8.contains(10, 111);
    java.awt.Dimension var20 = var8.minimumSize();
    tinymonkeys.vue.VueElement var26 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var27 = var26.getPeer();
    var26.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var26.repaint();
    java.lang.Object var33 = var26.getTreeLock();
    tinymonkeys.vue.VueElement var39 = new tinymonkeys.vue.VueElement(1, 100, 0, 10, 10);
    java.awt.peer.ComponentPeer var40 = var39.getPeer();
    var39.firePropertyChange("hi!", (-1.0f), (-1.0f));
    var39.repaint();
    var39.updateUI();
    int var47 = var26.getComponentZOrder((java.awt.Component)var39);
    java.awt.Insets var48 = var26.getInsets();
    java.util.Locale var49 = var26.getLocale();
    var26.hide();
    java.awt.LayoutManager var51 = var26.getLayout();
    var8.setLayout(var51);
    var2.setLayout(var51);
    java.awt.Color var54 = var2.getBackground();
    java.awt.Toolkit var55 = var2.getToolkit();
    javax.swing.TransferHandler var56 = var2.getTransferHandler();
    int var57 = var2.getDefaultCloseOperation();
    java.awt.Shape var58 = var2.getShape();
    var2.setAutoRequestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

}
